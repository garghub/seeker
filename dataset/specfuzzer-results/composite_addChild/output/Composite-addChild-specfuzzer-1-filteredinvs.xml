<object-stream>
  <set>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.^(parent + max_child) : n.init_value &lt;= Integer_Variable_0 ) holds for: &lt;orig(this), this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;orig(this.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.parent.max_child.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * -1 ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; -1 ) holds for: orig(size(this.max_child.parent.children[..]))-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : n.init_value &gt;= n.parent.init_value ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.parent.value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 1 ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.parent.init_value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.max_child.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(this.parent.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;p.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.parent.max_child.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: p.max_child.value</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;p.parent.value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.children : n.value &lt;= Integer_Variable_0 ) holds for: &lt;orig(this), this.parent.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;c.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; 1 ) holds for: orig(this.max_child.parent.init_value)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) or (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.init_value = 0 ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.ancestors : n.init_value &lt;= Integer_Variable_0 ) holds for: &lt;orig(this), this.parent.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;c.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % -1 ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.max_child.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;p.parent.value , p.value , p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;p.init_value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.children : n.init_value != Integer_Variable_0 ) holds for: &lt;orig(this), this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.max_child.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;orig(this.parent.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.init_value = -1 ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;orig(this.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.max_child.max_child.value), orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.max_child.init_value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.init_value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;p.value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;p.max_child.value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 / 1 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 ) holds for: &lt;orig(this.parent.max_child.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % -1 ) holds for: &lt;p.init_value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.max_child.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.ancestors : n.children = n.parent.children ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;c.parent.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.max_child.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 1 ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : (n.parent.*(parent + max_child)) &amp; (n.max_child.*(parent + max_child)) not in empty ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / -1 ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) or (Integer_Variable_1 &gt; 0) ) holds for: &lt;c.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;c.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - 0 ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.value) , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.max_child.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.parent.init_value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;orig(this.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , c.parent.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.max_child.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;p.parent.value , p.parent.init_value , p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;p.max_child.value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;orig(this.parent.value), this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != #(Composite.ancestors) ) holds for: &lt;orig(this), this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;orig(this.parent.max_child.value), c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.max_child.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;p.parent.init_value, p.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.parent.max_child.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;p.parent.init_value, p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(this.parent.value), this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.max_child.init_value), c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.init_value &lt;= n.parent.init_value ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.max_child.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;p.init_value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - -1 ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;orig(this.parent.max_child.init_value), c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 1 ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt; 1) ) holds for: &lt;this.parent.init_value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(c.parent.value) , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.parent.parent.value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;p.parent.init_value , p.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.parent.parent.init_value, this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt; 0) ) holds for: &lt;c.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.parent.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , c.parent.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= 0 ) holds for: size(this.children[..])-1</string>
    <string>FuzzedInvariant ( some n : Composite.*(parent + max_child) : n not in n.^(parent + max_child) ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;c.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.parent.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.children : n.value &lt;= Integer_Variable_0 ) holds for: &lt;orig(this), this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % 1 ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , this.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;p.max_child.value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;orig(this.parent.max_child.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % -1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != #(Composite.ancestors) ) holds for: &lt;orig(this), this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - -1 ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.value) , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &gt; -1) ) holds for: &lt;c.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= -1 ) holds for: size(this.max_child.children[..])-1</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.max_child.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : n.init_value != 0 ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , c.parent.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.*(parent + max_child) : n.value &gt;= Integer_Variable_0 ) holds for: &lt;orig(this), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt; 1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.max_child.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.max_child.init_value), c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(c.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.parent.parent.init_value, this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(c.parent.value) , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.max_child.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;this.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;c.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.init_value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;p.init_value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - -1 ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;orig(this.parent.max_child.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;orig(this.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.value), c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;c.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;orig(this.parent.max_child.init_value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.parent.max_child.init_value), c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;p.parent.init_value , p.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % 1 ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.parent.max_child.value), c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 1 ) holds for: &lt;this.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;p.init_value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.parent.parent.init_value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.parent.parent.init_value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + -1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 1 ) holds for: &lt;orig(this.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.parent.max_child.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.parent.value), c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(c.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % -1 ) holds for: &lt;this.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;orig(c.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: p.parent.value</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.*(parent + max_child) : n.children = n.max_child.children ) holds for: this</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(c.parent.value) , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.max_child.max_child.value), orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % -1 ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % -1 ) holds for: &lt;c.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;c.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.max_child.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;c.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , this.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.max_child.value) , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + -1 ) holds for: &lt;this.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;p.init_value , p.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;p.parent.value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;orig(this.parent.value), this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * -1 ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.max_child.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;orig(this.parent.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.ancestors : n.init_value &lt;= Integer_Variable_0 ) holds for: &lt;orig(this), this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - -1 ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n not in n.^(parent + max_child) ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : n = n.max_child ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % -1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = 0 ) holds for: orig(size(this.max_child.max_child.children[..]))</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;c.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 / 1 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.value = -1 ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;orig(this.parent.max_child.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.parent.max_child.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.value, orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;p.init_value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;this.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * -1 ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , c.value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.value &gt; #(Composite.*(parent + max_child)) ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt; 1) ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.parent.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;c.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.parent.value , p.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.max_child.value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - -1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.parent.value), orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.init_value &gt; n.parent.init_value ) holds for: this</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.value) , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(p.parent.children[..])</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / 1 ) holds for: &lt;this.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.children != n.parent.children ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.parent.parent.init_value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; -1 ) holds for: size(p.parent.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;orig(this.parent.max_child.init_value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;p.parent.value , p.parent.init_value , p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(c.parent.value) , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;p.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.value &lt; n.parent.value ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 1 ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + -1 ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : n.value = #(Composite.*(parent + max_child).init_value) ) holds for: this</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * 0 ) holds for: &lt;c.parent.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / -1 ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.max_child.value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;p.max_child.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.max_child.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.parent.value , p.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.init_value, this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : (n.max_child.*(parent + max_child)) &amp; (n.max_child.*(parent + max_child)) in empty ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - -1 ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.ancestors : n.init_value &lt;= Integer_Variable_0 ) holds for: &lt;orig(this), this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;p.value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(c.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.max_child.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;orig(this.parent.max_child.init_value), c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(this.parent.max_child.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: size(this.children[..])-1</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;orig(this.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;p.init_value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;c.value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.*(parent + max_child) : n.init_value &lt;= Integer_Variable_0 ) holds for: &lt;orig(this), this.parent.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.parent.init_value</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.parent.parent.init_value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % 1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.parent.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.parent.init_value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.*(parent + max_child) : n.init_value != Integer_Variable_0 ) holds for: &lt;this, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * -1 ) holds for: &lt;this.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;p.init_value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; 1 ) holds for: size(this.children[..])</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;c.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;c.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;p.parent.value , p.value , p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.max_child.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;orig(c.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) or (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.max_child.max_child.value), orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;p.parent.value , p.parent.init_value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 1 ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;orig(c.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.max_child.init_value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + -1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.parent.parent.children[..])-1</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , c.parent.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.parent.value, orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 1 ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : n.children = n.parent.children ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;orig(this.parent.max_child.init_value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.value = -1 ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(c.children[..])</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.value), c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.parent.value , p.parent.init_value , p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.parent.init_value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.ancestors : n.children != n.max_child.children ) holds for: this</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: orig(this.max_child.value)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.parent.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.parent.max_child.init_value), this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;p.parent.value , p.value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.max_child.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;orig(this.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.parent.parent.children[..])</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.parent.max_child.value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;orig(this.parent.max_child.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= -1 ) holds for: size(c.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.parent.max_child.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.children : n.value &lt;= Integer_Variable_0 ) holds for: &lt;orig(this), this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : (n.parent.*(parent + max_child)) &amp; (n.parent.*(parent + max_child)) in empty ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : (n.parent.*(parent + max_child)) &amp; (n.parent.*(parent + max_child)) in empty ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: orig(this.max_child.parent.value)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.*(parent + max_child) : n.value &gt;= Integer_Variable_0 ) holds for: &lt;this, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - 0 ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.init_value = -1 ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 1 ) holds for: size(this.parent.children[..])</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;orig(this.parent.max_child.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;c.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.ancestors : n.children != n.parent.children ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % -1 ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;orig(this.parent.max_child.value), this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.parent.max_child.value), this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; 0 ) holds for: size(this.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.parent.max_child.init_value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;p.parent.value, p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , c.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;this.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;c.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: orig(this.parent.parent.value)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.max_child.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % -1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;orig(this.parent.max_child.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt;= 0) ) holds for: &lt;c.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.parent.max_child.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.*(parent + max_child) : n.ancestors != n.max_child.ancestors ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;p.parent.value, p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= 0 ) holds for: size(this.max_child.children[..])</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.init_value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.parent.max_child.init_value), c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;c.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;p.parent.value , p.init_value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; 1 ) holds for: orig(size(this.parent.max_child.children[..]))-1</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;orig(this.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;p.parent.value, p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;orig(this.parent.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.max_child.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= 1 ) holds for: size(this.parent.max_child.children[..])-1</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.max_child.init_value), c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt;= 0) ) holds for: &lt;this.parent.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;c.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.parent.parent.init_value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.init_value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.parent.init_value, orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.parent.max_child.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;orig(this.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.parent.parent.init_value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;p.init_value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;p.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;c.parent.value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - -1 ) holds for: &lt;orig(this.parent.max_child.init_value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;p.parent.value , p.parent.value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.parent.init_value , p.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.max_child.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.parent.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.parent.max_child.init_value), this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; 0 ) holds for: size(p.parent.children[..])</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;p.parent.init_value, p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.init_value = 0 ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;c.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 1 ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.^(parent + max_child) : n.init_value &gt; n.max_child.init_value ) holds for: this</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % 1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.init_value, this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;orig(this.parent.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : (n.parent.*(parent + max_child)) &amp; (n.parent.*(parent + max_child)) not in empty ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;p.parent.value , p.parent.value , p.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;c.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;p.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;p.parent.init_value, p.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - 0 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * -1 ) holds for: &lt;this.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;c.parent.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.init_value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.init_value &lt;= Integer_Variable_0 ) holds for: &lt;orig(this), this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.parent.max_child.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;c.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;orig(this.parent.max_child.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.value), orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.parent.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + -1 ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;c.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;orig(this.parent.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;c.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;orig(this.parent.parent.value), orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;c.parent.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.parent.max_child.init_value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.ancestors : n.init_value = #(Composite.children) ) holds for: this</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 not in Composite.ancestors.value ) holds for: &lt;this, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;p.value , p.init_value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.*(parent + max_child) : n not in n.^(parent + max_child) ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % 1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.parent.parent.init_value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 in Composite.*(parent + max_child).init_value ) holds for: &lt;orig(this), this.parent.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + -1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;p.parent.value , p.parent.init_value , p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;p.parent.value, p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;orig(this.parent.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;orig(c.parent.value), c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.children : n != n.max_child ) holds for: this</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.parent.parent.init_value</string>
    <string>FuzzedInvariant ( all n : Composite.children : n.init_value &lt;= n.parent.init_value ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.max_child.parent.children[..])</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;p.parent.value , p.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;p.parent.init_value, p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;c.parent.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) or (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.parent.parent.init_value, this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;p.parent.value, p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;c.parent.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt; 1) ) holds for: &lt;c.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;c.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;c.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; -1 ) holds for: orig(this.max_child.max_child.value)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;p.parent.value, p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.ancestors : n.children = n.max_child.children ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 1 ) holds for: &lt;c.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;this.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;orig(this.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.parent.max_child.init_value), this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;p.max_child.value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % 1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % 1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: orig(size(this.parent.max_child.children[..]))-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 not in Composite.ancestors.init_value ) holds for: &lt;orig(this), this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;p.parent.init_value, p.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.parent.max_child.value), this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;p.parent.value , p.parent.init_value , p.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n not in n.^(parent + max_child) ) holds for: this</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.max_child.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.max_child.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;p.parent.value , p.parent.init_value , p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;c.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % -1 ) holds for: &lt;this.parent.max_child.value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: size(this.max_child.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;p.parent.init_value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt; 1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.max_child.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.max_child.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.max_child.value), c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;p.max_child.value , p.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.max_child.init_value), orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;orig(this.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;p.value , p.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.parent.init_value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;p.parent.value, p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.parent.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 0 ) holds for: &lt;orig(this.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.parent.max_child.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 not in Composite.children.init_value ) holds for: &lt;this, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.value &lt;= 0 ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 0 ) holds for: size(this.parent.parent.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , c.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;orig(c.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.value), this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;p.value , p.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: orig(this.parent.max_child.value)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.value, orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(c.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;c.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;p.parent.init_value, p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;c.value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.parent.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n != n.parent.parent ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.init_value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.max_child.init_value), c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;p.max_child.value , p.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;p.parent.init_value , p.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;orig(this.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 1 ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 1 ) holds for: &lt;this.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.init_value, orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.init_value , p.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.init_value , p.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;orig(this.parent.max_child.init_value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;c.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.max_child.max_child.value), orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.parent.parent.value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.parent.value), this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.parent.max_child.value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) iff (Integer_Variable_1 != -1) ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;c.parent.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 1 ) holds for: size(p.parent.children[..])</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;p.parent.value, p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;p.value , p.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.parent.children[..])</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;p.value , p.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;c.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.max_child.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;p.value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: orig(size(this.max_child.max_child.children[..]))-1</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.init_value, this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.init_value &gt;= n.max_child.init_value ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.*(parent + max_child) : n.value &gt;= Integer_Variable_0 ) holds for: &lt;orig(this), this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 1 ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % 1 ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;p.parent.init_value , p.value , p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / 1 ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , c.parent.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;orig(this.parent.max_child.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;c.parent.value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + -1 ) holds for: &lt;c.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;p.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.init_value, this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.parent.parent.init_value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.parent.value, orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;c.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : n.init_value &gt;= n.parent.init_value ) holds for: this</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;c.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;c.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.parent.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.init_value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(c.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.max_child.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;c.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;p.init_value , p.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.*(parent + max_child) : n.init_value &lt;= Integer_Variable_0 ) holds for: &lt;this, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 1 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 0 ) holds for: orig(size(this.max_child.parent.children[..]))-1</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; 0 ) holds for: size(this.children[..])</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt; 1) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;orig(this.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;orig(this.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt;= 0) ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt;= 1) ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;p.parent.init_value , p.parent.init_value , p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;p.parent.value, p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;c.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : (n.parent.*(parent + max_child)) &amp; (n.max_child.*(parent + max_child)) not in empty ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;orig(this.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;orig(this.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / 1 ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.parent.parent.init_value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;p.parent.value , p.init_value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != #(Composite.^(parent + max_child).init_value) ) holds for: &lt;orig(this), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : n in n.^(parent + max_child) ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = 1 ) holds for: size(this.parent.parent.children[..])</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.parent.max_child.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n in n.^(parent + max_child) ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;orig(this.parent.max_child.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;p.init_value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.parent.init_value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;p.init_value , p.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.parent.parent.init_value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % 1 ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - 0 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.max_child.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.max_child.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;p.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;c.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - -1 ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; 0 ) holds for: size(this.max_child.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.init_value &lt; #(Composite.^(parent + max_child)) ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(c.parent.value) , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;orig(this.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;this.max_child.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.parent.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.max_child.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;p.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 1 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.parent.value), c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;orig(this.parent.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : n.init_value = n.parent.init_value ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 1 ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;c.value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.max_child.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.parent.value , p.parent.value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;p.init_value , p.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + -1 ) holds for: &lt;this.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(this.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.max_child.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.max_child.value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % 1 ) holds for: &lt;p.init_value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.value) , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.max_child.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt;= 0) ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.parent.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;p.max_child.value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.parent.init_value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.parent.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;p.parent.init_value , p.value , p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , c.parent.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;p.parent.init_value , p.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;orig(this.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;orig(this.parent.max_child.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 1 ) holds for: size(this.parent.parent.children[..])</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;p.max_child.value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt;= 0) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.parent.value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.parent.parent.value, orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.^(parent + max_child) : n.children != n.max_child.children ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;orig(this.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(this.parent.max_child.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(c.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;orig(this.parent.max_child.init_value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;p.init_value , p.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;orig(this.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;p.parent.value, p.init_value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.ancestors : n.children = n.parent.children ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : (n.parent.*(parent + max_child)) &amp; (n.parent.*(parent + max_child)) not in empty ) holds for: this</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.init_value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;orig(this.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.^(parent + max_child) : n.children = n.parent.children ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;p.value , p.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.max_child.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.init_value, orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;this.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;this.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.^(parent + max_child) : n.init_value &lt;= Integer_Variable_0 ) holds for: &lt;orig(this), this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;p.parent.init_value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : n = n.max_child ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;c.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;orig(this.parent.max_child.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;p.parent.value, p.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.max_child.value), c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;c.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.children : n != n.max_child ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; 0 ) holds for: size(this.max_child.parent.children[..])</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.parent.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.init_value &gt; -1 ) holds for: this</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: orig(this.max_child.parent.init_value)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.parent.max_child.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.init_value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.init_value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;p.init_value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.*(parent + max_child) : n.children = n.parent.children ) holds for: this</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , c.parent.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.parent.init_value, this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.value), c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.parent.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;p.max_child.value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;p.parent.init_value, p.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;p.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;p.parent.value, p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;orig(this.parent.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;p.parent.value , p.parent.value , p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;this.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % -1 ) holds for: &lt;orig(this.max_child.max_child.value), orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.parent.max_child.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;p.init_value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.parent.max_child.init_value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;orig(this.parent.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.^(parent + max_child) : n.init_value &gt;= n.max_child.init_value ) holds for: this</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 0 ) holds for: size(this.parent.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;c.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % -1 ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.parent.init_value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt;= 0) ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.parent.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.max_child.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 not in Composite.ancestors.init_value ) holds for: &lt;this, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.max_child.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;c.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;p.init_value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.^(parent + max_child) : n.value != Integer_Variable_0 ) holds for: &lt;orig(this), this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;c.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / 1 ) holds for: &lt;c.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.init_value, this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.max_child.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt; 1) ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;p.parent.value, p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.max_child.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;p.value , p.init_value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.*(parent + max_child) : n.value &gt;= Integer_Variable_0 ) holds for: &lt;orig(this), this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;p.value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n in n.^(parent + max_child) ) holds for: this</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.parent.parent.init_value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;p.parent.value, p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.max_child.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.max_child.parent.children[..])-1</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - -1 ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;p.parent.init_value, p.value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.value &gt; n.parent.value ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.parent.init_value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.init_value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: orig(size(this.max_child.max_child.children[..]))-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.init_value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;p.parent.init_value , p.init_value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.value) , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;p.parent.value, p.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / 1 ) holds for: &lt;this.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt; 1) ) holds for: &lt;c.value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % -1 ) holds for: &lt;this.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 1) iff (Integer_Variable_1 &gt; 1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;c.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * 0 ) holds for: &lt;orig(this.max_child.max_child.value), orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % 1 ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % -1 ) holds for: &lt;this.max_child.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;p.init_value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : (n.parent.*(parent + max_child)) &amp; (n.max_child.*(parent + max_child)) not in empty ) holds for: this</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.max_child.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;p.init_value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.value &gt; n.parent.value ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt; 1) ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 / 1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.value), c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.parent.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.value), orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: &lt;p.init_value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;c.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % -1 ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % -1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.init_value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;p.parent.value, p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.max_child.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.max_child.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % 1 ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;p.parent.init_value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;orig(this.value), orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;p.value , p.init_value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , this.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.max_child.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;p.parent.value , p.parent.init_value , p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * -1 ) holds for: &lt;c.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.max_child.value, orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - -1 ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 ) holds for: &lt;this.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.*(parent + max_child) : n.children != n.max_child.children ) holds for: this</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.max_child.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;p.max_child.value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;c.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.parent.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; -1 ) holds for: size(c.parent.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;p.value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;c.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;orig(this.parent.max_child.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(this.parent.max_child.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.parent.value , p.parent.init_value , p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;p.init_value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: orig(size(this.max_child.parent.children[..]))</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;c.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + -1 ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;c.parent.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;orig(this.parent.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.value), c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.parent.parent.init_value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.max_child.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.children != n.max_child.children ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , this.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;c.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.*(parent + max_child) : n.children = n.max_child.children ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.parent.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;p.parent.init_value , p.parent.init_value , p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;orig(this.parent.max_child.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.parent.value), this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.parent.max_child.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.init_value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.parent.max_child.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.init_value &lt;= Integer_Variable_0 ) holds for: &lt;this, this.value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.ancestors : n.init_value = #(Composite.children) ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;p.value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.children[..])</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;c.parent.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.max_child.value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;c.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;c.parent.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % -1 ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.init_value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; 1 ) holds for: size(c.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.parent.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.parent.max_child.value), this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; -1 ) holds for: size(this.max_child.parent.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.*(parent + max_child) : n.ancestors = n.max_child.ancestors ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 1 ) holds for: &lt;c.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;c.parent.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.parent.value), this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;p.max_child.value , p.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.ancestors : n.children != n.parent.children ) holds for: this</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;p.init_value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - -1 ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n != n.parent.parent ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.parent.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;p.parent.value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 0 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.max_child.value, orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.parent.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(this.parent.max_child.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + -1 ) holds for: &lt;p.init_value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.parent.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.parent.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;orig(this.parent.max_child.init_value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;p.parent.value, p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 in Composite.^(parent + max_child).init_value ) holds for: &lt;orig(this), this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;orig(this.parent.max_child.init_value), this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.init_value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.value), this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 1 ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % 1 ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.init_value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.max_child.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;c.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;orig(this.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - -1 ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &gt; -1) ) holds for: &lt;c.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.ancestors : n.children = n.max_child.children ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.parent.max_child.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt;= 0) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;orig(this.parent.max_child.value), c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;p.parent.value , p.parent.value , p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % 1 ) holds for: &lt;this.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;p.parent.value, p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.parent.parent.init_value, this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 in Composite.*(parent + max_child).init_value ) holds for: &lt;this, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.parent.init_value</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.parent.parent.value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(c.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;c.parent.value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;orig(c.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.max_child.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.init_value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; 0 ) holds for: orig(this.max_child.parent.init_value)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;p.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(c.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt; 1) ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;c.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;p.init_value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n != null ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt; 1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.parent.init_value , p.value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.max_child.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt; 1) ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;p.parent.value, p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.init_value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;p.parent.init_value , p.value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;p.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.parent.value), c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: &lt;this.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.^(parent + max_child) : n.children = n.parent.children ) holds for: this</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - -1 ) holds for: &lt;orig(this.parent.max_child.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.init_value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) iff (Integer_Variable_1 != -1) ) holds for: &lt;p.init_value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;p.parent.value, p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.parent.parent.init_value, this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , c.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.parent.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;p.value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;p.parent.init_value , p.value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.parent.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;orig(c.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;p.parent.init_value , p.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 not in Composite.children.init_value ) holds for: &lt;orig(this), this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.max_child.init_value), c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.value) , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;c.value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.parent.parent.value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.max_child.value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;c.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.ancestors != n.parent.ancestors ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: p.parent.init_value</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) xor (Integer_Variable_1 &gt;= -1) ) holds for: &lt;p.value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n != null ) holds for: this</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;p.init_value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 in Composite.*(parent + max_child).init_value ) holds for: &lt;orig(this), this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;orig(this.parent.max_child.init_value), this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.parent.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.parent.max_child.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.init_value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;c.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) xor (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.value), orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.parent.parent.value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.init_value, orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;p.value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.max_child.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;c.parent.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt;= 0) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;p.value , p.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; 1 ) holds for: size(c.children[..])</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / -1 ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : (n.max_child.*(parent + max_child)) &amp; (n.parent.*(parent + max_child)) in empty ) holds for: this</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;orig(this.parent.max_child.init_value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 0 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.parent.value), this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;orig(this.parent.max_child.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / -1 ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - 0 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &gt; -1) ) holds for: &lt;c.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;p.max_child.value , p.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;p.parent.init_value , p.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;p.parent.init_value , p.parent.init_value , p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.parent.parent.value), orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : n.children = n.parent.children ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - 0 ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.value , p.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;orig(this.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;p.value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;p.max_child.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / 1 ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.init_value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.init_value, orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;p.parent.value , p.value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 1 ) holds for: &lt;this.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &gt; -1) ) holds for: &lt;p.init_value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;p.parent.init_value , p.value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &gt; -1) ) holds for: &lt;c.parent.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.parent.max_child.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.max_child.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;orig(this.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;p.parent.value , p.parent.value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.parent.max_child.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = 0 ) holds for: size(c.children[..])</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.parent.value</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;p.parent.value , p.parent.value , p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % -1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt; 1) ) holds for: &lt;c.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;orig(this.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + -1 ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 1 ) holds for: size(c.parent.children[..])</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;c.parent.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;c.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;p.parent.value, p.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 in Composite.*(parent + max_child).init_value ) holds for: &lt;orig(this), this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;p.parent.value , p.parent.value , p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= 1 ) holds for: orig(size(this.parent.max_child.children[..]))-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;c.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.value , this.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , c.parent.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;p.init_value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;p.parent.value, p.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;p.value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;c.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;p.parent.value , p.parent.init_value , p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;p.init_value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; 0 ) holds for: size(c.parent.children[..])</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / -1 ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;p.init_value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.children[..])-1</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;orig(c.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: &lt;this.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , this.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.max_child.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : n not in n.^(parent + max_child) ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;c.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;p.parent.init_value , p.init_value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;c.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.init_value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.parent.parent.value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.value != #(Composite.*(parent + max_child).init_value) ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;c.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= 0 ) holds for: size(c.children[..])</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) xor (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.parent.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;c.parent.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.parent.max_child.value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;p.parent.value , p.value , p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;p.parent.init_value , p.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.init_value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;p.value , p.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;orig(this.parent.max_child.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(c.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(c.parent.children[..])</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 0 ) holds for: size(this.max_child.parent.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;c.parent.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt; 1) ) holds for: &lt;this.parent.parent.init_value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / 1 ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;c.parent.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;p.init_value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.parent.max_child.value), c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;c.parent.value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.parent.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;c.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.max_child.max_child.value), orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) or (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.parent.max_child.value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.parent.init_value , p.parent.init_value , p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : (n.max_child.*(parent + max_child)) &amp; (n.max_child.*(parent + max_child)) in empty ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.init_value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % 1 ) holds for: &lt;this.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;p.value , p.value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % -1 ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.parent.value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) or (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.max_child.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.parent.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;p.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt; 1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;c.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.init_value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + -1 ) holds for: &lt;p.init_value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.parent.init_value , p.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.init_value, orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.max_child.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.value), c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;p.parent.value, p.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;p.init_value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.*(parent + max_child) : n.init_value &lt; n.max_child.init_value ) holds for: this</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.value &lt;= n.parent.value ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.parent.max_child.init_value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.max_child.value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.max_child.value), this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;p.value , p.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;c.parent.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;p.value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: p.parent.value</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.max_child.children[..])</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;p.init_value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= 1 ) holds for: size(this.max_child.children[..])</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;p.parent.value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.init_value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(c.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;c.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt;= 0) ) holds for: &lt;this.parent.parent.init_value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.parent.init_value , p.value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : (n.max_child.*(parent + max_child)) &amp; (n.parent.*(parent + max_child)) in empty ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;c.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;p.parent.value, p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - 0 ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;c.value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + -1 ) holds for: &lt;this.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / -1 ) holds for: &lt;this.parent.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.value) , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.value), orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;p.parent.value , p.value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.init_value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.parent.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.max_child.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.parent.max_child.init_value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;orig(this.parent.max_child.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;c.value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;p.parent.value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;c.value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;p.parent.init_value , p.value , p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % 1 ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;p.parent.value , p.parent.init_value , p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;p.init_value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.max_child.value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; 1 ) holds for: size(this.max_child.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.max_child.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;p.parent.value , p.init_value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.parent.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.children[..])</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % -1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt; 1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.max_child.value) , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.value , p.value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + -1 ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.init_value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;orig(this.parent.max_child.value), this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.init_value, orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;c.value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.parent.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;p.max_child.value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.parent.max_child.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;p.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.max_child.init_value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.max_child.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;p.value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;this.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= 0 ) holds for: size(this.children[..])</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.init_value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.parent.max_child.value), c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;orig(c.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.init_value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;p.parent.value, p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 / 1 ) holds for: &lt;orig(this.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.parent.init_value, orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;orig(this.parent.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;c.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;orig(this.parent.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.max_child.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(this.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;orig(this.parent.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;orig(this.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;c.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.init_value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 in Composite.^(parent + max_child).init_value ) holds for: &lt;orig(this), this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;p.parent.value , p.parent.value , p.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.init_value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;c.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - -1 ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;this.parent.parent.init_value, this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 ) holds for: &lt;this.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.max_child.init_value), orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.parent.max_child.init_value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.^(parent + max_child) : n.init_value &lt;= Integer_Variable_0 ) holds for: &lt;orig(this), this.parent.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;orig(this.parent.max_child.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;c.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 in Composite.ancestors.value ) holds for: &lt;orig(this), this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;c.value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: orig(this.parent.value)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;p.parent.value, p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;p.parent.value, p.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(c.parent.value) , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;p.parent.init_value , p.parent.init_value , p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) iff (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(this.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.value) , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;p.parent.init_value , p.parent.init_value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;c.parent.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;orig(this.parent.max_child.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.parent.parent.value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.max_child.init_value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; 1 ) holds for: orig(size(this.max_child.max_child.children[..]))</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;orig(this.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : n not in n.^(parent + max_child) ) holds for: this</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.parent.parent.init_value, orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;c.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.value), orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;p.init_value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , this.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.value &lt; n.parent.value ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.max_child.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.parent.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(this.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 1 ) holds for: &lt;orig(this.parent.max_child.init_value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.init_value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , c.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; 0 ) holds for: orig(size(this.max_child.parent.children[..]))</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.max_child.init_value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;orig(this.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % -1 ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;orig(this.parent.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;p.parent.value , p.parent.init_value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.parent.parent.init_value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;orig(this.parent.max_child.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.init_value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;p.parent.value , p.value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.parent.max_child.init_value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % -1 ) holds for: &lt;this.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;p.value , p.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.max_child.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.max_child.init_value), c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - -1 ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.parent.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.init_value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;orig(this.parent.max_child.init_value), c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;c.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;p.init_value , p.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;p.parent.value, p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt;= 0) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;p.parent.value, p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.max_child.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % 1 ) holds for: &lt;p.init_value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.init_value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;orig(this.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.parent.max_child.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : (n.parent.*(parent + max_child)) &amp; (n.parent.*(parent + max_child)) in empty ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % -1 ) holds for: &lt;this.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;p.init_value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % -1 ) holds for: &lt;this.parent.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % -1 ) holds for: &lt;this.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , c.parent.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.parent.max_child.value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;orig(this.parent.max_child.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.max_child.init_value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.max_child.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.parent.parent.value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = 0 ) holds for: size(this.max_child.children[..])</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.parent.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.parent.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;c.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.parent.init_value , p.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.parent.init_value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;orig(c.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;p.parent.value, p.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;p.parent.value, p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;p.parent.value, p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;orig(this.parent.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;c.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;p.parent.init_value , p.value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.value , c.parent.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.parent.max_child.value), this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;orig(this.parent.max_child.init_value), c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= 0 ) holds for: orig(size(this.parent.max_child.children[..]))-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.parent.max_child.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.^(parent + max_child) : n.children = n.max_child.children ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.max_child.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , c.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;p.parent.value, p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 1 ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;c.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.value), this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;p.init_value , p.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.parent.parent.value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / -1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.max_child.value), c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.parent.value), c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;c.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 1 ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : n.init_value = n.parent.init_value ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.max_child.init_value), c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: orig(this.parent.value)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;c.parent.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;p.parent.value, p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;p.init_value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;p.parent.value , p.parent.init_value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) or (Integer_Variable_1 &gt; 0) ) holds for: &lt;c.parent.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;c.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;c.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;p.max_child.value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.init_value &gt; -1 ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % -1 ) holds for: &lt;p.init_value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * -1 ) holds for: &lt;orig(this.max_child.max_child.value), orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;c.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: &lt;c.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;p.value , p.init_value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / 1 ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt;= 0) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.parent.parent.init_value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.parent.value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;orig(c.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;p.parent.init_value , p.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;c.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) xor (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - -1 ) holds for: &lt;this.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;p.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % 1 ) holds for: &lt;this.parent.parent.init_value, this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - -1 ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.init_value &gt; n.max_child.init_value ) holds for: this</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; 0 ) holds for: size(this.parent.parent.children[..])</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt; 1) ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = 0 ) holds for: size(this.children[..])</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;p.value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - 0 ) holds for: &lt;c.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.max_child.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 1 ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : n.init_value = #(Composite.^(parent + max_child).init_value) ) holds for: this</string>
    <string>FuzzedInvariant ( all n : Composite.*(parent + max_child) : n.children != n.max_child.children ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;c.parent.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(c.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.parent.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.value) , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(c.parent.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : n.init_value &lt;= n.parent.init_value ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;orig(this.parent.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; 0 ) holds for: size(this.parent.children[..])</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;orig(this.parent.max_child.value), this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;c.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - -1 ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.parent.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.parent.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.max_child.init_value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;c.parent.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;p.parent.init_value, p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.^(parent + max_child) : n.children != n.parent.children ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : n in n.^(parent + max_child) ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.value), orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.value &lt;= n.parent.value ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.max_child.init_value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.parent.max_child.value), c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;orig(this.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;p.init_value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.^(parent + max_child) : n.init_value &gt;= Integer_Variable_0 ) holds for: &lt;orig(this), this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: orig(size(this.max_child.parent.children[..]))-1</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; 1 ) holds for: size(this.max_child.children[..])</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 0 ) holds for: size(p.parent.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.parent.max_child.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.init_value, this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: &lt;c.parent.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(c.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.max_child.value), c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt; 1) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.parent.parent.value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.value) , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.parent.value), this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.max_child.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;orig(this.parent.max_child.init_value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.init_value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.init_value &lt;= n.parent.init_value ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;p.parent.value, p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.parent.value , p.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + -1 ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.parent.value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(this.parent.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.parent.max_child.init_value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.value) , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;c.parent.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * -1 ) holds for: &lt;c.parent.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + -1 ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;c.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.max_child.init_value), this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;orig(this.parent.max_child.init_value), orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;orig(this.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 1 ) holds for: &lt;orig(this.parent.max_child.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.parent.parent.init_value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.^(parent + max_child) : n.children = n.max_child.children ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;p.parent.value , p.init_value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;p.parent.init_value , p.value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.parent.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;p.parent.value, p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= 0 ) holds for: orig(size(this.max_child.max_child.children[..]))-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= -1 ) holds for: orig(size(this.max_child.max_child.children[..]))-1</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;orig(this.parent.value), c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;c.parent.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: orig(this.max_child.init_value)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % -1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;p.parent.value , p.value , p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;p.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : (n.max_child.*(parent + max_child)) &amp; (n.max_child.*(parent + max_child)) in empty ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;orig(this.parent.max_child.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / 1 ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;c.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * 0 ) holds for: &lt;this.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;c.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * -1 ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.max_child.value), orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % 1 ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;orig(this.parent.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % -1 ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 1 ) holds for: size(this.children[..])</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.max_child.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.value) , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.parent.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 in Composite.^(parent + max_child).value ) holds for: &lt;orig(this), this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;c.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.^(parent + max_child) : n.value &lt;= Integer_Variable_0 ) holds for: &lt;orig(this), this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.parent.value), c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;orig(this.parent.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= -1 ) holds for: orig(this.max_child.parent.init_value)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.^(parent + max_child) : n.init_value &gt;= n.max_child.init_value ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;p.parent.value, p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - -1 ) holds for: &lt;this.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;p.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;orig(this.parent.max_child.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.value) , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;p.init_value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt;= 0) ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;c.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;p.init_value , p.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;p.parent.value , p.parent.value , p.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; -1 ) holds for: orig(this.max_child.parent.init_value)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;p.max_child.value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.init_value &lt; #(Composite.^(parent + max_child)) ) holds for: this</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt; 1) ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.value , p.init_value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= 0 ) holds for: size(c.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + -1 ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.^(parent + max_child) : n.init_value &gt;= Integer_Variable_0 ) holds for: &lt;orig(this), this.parent.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.max_child.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; -1 ) holds for: size(this.parent.parent.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.init_value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;orig(this.parent.max_child.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;p.max_child.value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;p.init_value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.max_child.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.parent.max_child.value</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + -1 ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.ancestors : n.children != n.max_child.children ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(c.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , c.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + -1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.value, orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.init_value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.parent.value , p.value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;orig(this.parent.value), c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;c.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - 0 ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;p.parent.value, p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - 0 ) holds for: &lt;this.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.max_child.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.parent.init_value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.parent.init_value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.value) , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;orig(this.parent.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(c.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % 1 ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.max_child.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.value) , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;p.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.parent.value), orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;c.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.parent.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: orig(this.parent.max_child.init_value)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;p.parent.value , p.init_value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 1 ) holds for: &lt;this.parent.parent.init_value, this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.parent.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.value , p.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : n.children = n.max_child.children ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.value &lt;= 0 ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( all n : Composite.children : n.ancestors = n.max_child.ancestors ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( all n : Composite.*(parent + max_child) : n.ancestors != n.max_child.ancestors ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.parent.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.parent.value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;c.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 1 ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(c.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;c.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + -1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;c.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * 0 ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.^(parent + max_child) : n.children != n.parent.children ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;c.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 1 ) holds for: &lt;this.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;p.value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= 0 ) holds for: orig(this.max_child.parent.init_value)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt;= 0) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.init_value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;orig(this.parent.max_child.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.parent.value), this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;p.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;c.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - 0 ) holds for: &lt;this.parent.parent.init_value, this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.children : (n.max_child.*(parent + max_child)) &amp; (n.parent.*(parent + max_child)) in empty ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / 1 ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % -1 ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;orig(this.value), orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.max_child.value), this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.parent.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;c.parent.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;orig(this.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;c.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.ancestors != n.max_child.ancestors ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.parent.max_child.init_value), this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;p.parent.value, p.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 0 ) holds for: size(this.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;p.init_value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / -1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.init_value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;c.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.parent.max_child.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.parent.value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;p.parent.value , p.value , p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : (n.parent.*(parent + max_child)) &amp; (n.parent.*(parent + max_child)) in empty ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt;= 0) ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt; 1) ) holds for: &lt;p.max_child.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;p.parent.value, p.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.parent.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 1 ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;p.parent.value, p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; 1 ) holds for: size(this.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.*(parent + max_child) : n.children != n.parent.children ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;orig(this.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : n.value = #(Composite.*(parent + max_child).init_value) ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.parent.value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 ) holds for: &lt;orig(this.parent.max_child.init_value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.parent.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / 1 ) holds for: &lt;orig(this.parent.max_child.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) xor (Integer_Variable_1 = -1) ) holds for: &lt;p.init_value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.parent.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;c.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 1 ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;orig(this.parent.max_child.value), c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;p.init_value , p.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.max_child.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.ancestors != n.parent.ancestors ) holds for: this</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.parent.value) , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.parent.value , p.init_value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.init_value, orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: orig(this.parent.max_child.value)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / -1 ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;p.init_value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.max_child.value) , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - -1 ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= -1 ) holds for: size(this.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;c.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % -1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 1) iff (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.max_child.max_child.value), orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.max_child.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;p.parent.value , p.value , p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: orig(this.parent.max_child.init_value)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;p.parent.value , p.parent.init_value , p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) xor (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;p.init_value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;orig(this.parent.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.max_child.children[..])-1</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;c.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / 1 ) holds for: &lt;orig(this.parent.max_child.init_value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;p.init_value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: p.parent.init_value</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;p.parent.value , p.init_value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;c.parent.value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 1 ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - -1 ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.max_child.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;c.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;orig(this.parent.max_child.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.parent.max_child.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.^(parent + max_child) : n.init_value &gt; n.max_child.init_value ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.value), this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - -1 ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / -1 ) holds for: &lt;this.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;p.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;p.value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: &lt;c.parent.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.parent.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;c.value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;p.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;p.parent.value, p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;p.max_child.value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;orig(this.parent.max_child.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.init_value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;p.value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.parent.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - 0 ) holds for: &lt;c.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.init_value, orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(c.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;c.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;p.value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;p.init_value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;c.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % 1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;c.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.parent.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;p.parent.init_value , p.init_value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.parent.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;orig(this.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.children : n.ancestors != n.parent.ancestors ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.value &gt;= n.max_child.value ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + -1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.ancestors : n.value = #(Composite.ancestors.init_value) ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;orig(c.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;p.parent.value, p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;p.value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.children != n.parent.children ) holds for: this</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(c.parent.value) , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;orig(this.parent.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;p.parent.init_value , p.init_value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.parent.max_child.value), this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;p.init_value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;orig(this.parent.max_child.init_value), this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= 0 ) holds for: orig(size(this.max_child.max_child.children[..]))</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.*(parent + max_child) : n.value &gt;= Integer_Variable_0 ) holds for: &lt;orig(this), this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.parent.parent.init_value, this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , this.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.value), orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 1) iff (Integer_Variable_1 &gt; 1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;c.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; 0 ) holds for: orig(size(this.max_child.max_child.children[..]))-1</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.parent.parent.init_value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : n = n.max_child.max_child ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.parent.max_child.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % -1 ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.init_value &gt; n.max_child.init_value ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.parent.max_child.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 ) holds for: &lt;c.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.init_value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.value), c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + -1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;p.init_value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.value != #(Composite.*(parent + max_child).init_value) ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;c.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.^(parent + max_child) : n.children != n.max_child.children ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;p.parent.value, p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.max_child.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;p.parent.value, p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.parent.max_child.init_value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;c.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.init_value &gt; n.parent.init_value ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;p.value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * -1 ) holds for: &lt;this.parent.max_child.value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;c.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) iff (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * 0 ) holds for: &lt;this.parent.max_child.value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - 0 ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;orig(this.parent.max_child.init_value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;p.init_value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - -1 ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.init_value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) or (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.max_child.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;orig(this.parent.max_child.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;p.value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.children : n.children != n.parent.children ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;c.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.max_child.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;p.parent.init_value , p.parent.init_value , p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;p.value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : n.ancestors = n.parent.ancestors ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;p.max_child.value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * 0 ) holds for: &lt;this.max_child.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.max_child.init_value), this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.children : n.value &lt;= Integer_Variable_0 ) holds for: &lt;orig(this), this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.*(parent + max_child) : n.init_value &lt; n.max_child.init_value ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;p.init_value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt;= 0) ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;p.parent.value, p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.parent.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - -1 ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= 0 ) holds for: size(this.max_child.children[..])-1</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.max_child.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;c.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.max_child.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.value), c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 in Composite.*(parent + max_child).value ) holds for: &lt;orig(this), this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - 0 ) holds for: &lt;p.init_value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.parent.max_child.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;p.value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;c.parent.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(c.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;p.init_value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;c.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - -1 ) holds for: &lt;c.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 1) iff (Integer_Variable_1 &gt; 1) ) holds for: &lt;orig(this.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * -1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.parent.max_child.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.init_value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;orig(this.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.max_child.value), orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.children : n.ancestors != n.parent.ancestors ) holds for: this</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.init_value &gt;= n.max_child.init_value ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 in Composite.^(parent + max_child).init_value ) holds for: &lt;orig(this), this.parent.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.max_child.value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * 1 ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.parent.value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.parent.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.value), this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - -1 ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.max_child.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt; 1) ) holds for: &lt;this.parent.parent.init_value, orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;p.parent.value , p.parent.init_value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.parent.max_child.init_value), this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.parent.value , p.parent.init_value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.parent.parent.init_value, orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.init_value, this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;c.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;orig(this.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt; 1) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.*(parent + max_child) : n.children != n.parent.children ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.parent.max_child.init_value), this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.init_value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.^(parent + max_child) : n.init_value &gt;= Integer_Variable_0 ) holds for: &lt;orig(this), this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;c.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : n.init_value = #(Composite.^(parent + max_child).init_value) ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;p.init_value , p.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;orig(c.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;p.init_value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;this.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / 1 ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.*(parent + max_child) : n.ancestors = n.max_child.ancestors ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % -1 ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / 1 ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.parent.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.parent.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;p.value , p.value , p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt; 1) ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;c.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.init_value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;p.max_child.value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.parent.max_child.init_value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.init_value, this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;orig(c.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 1 ) holds for: size(this.max_child.parent.children[..])</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;orig(this.parent.value), c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;p.value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.max_child.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) xor (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= 1 ) holds for: size(this.children[..])</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: orig(size(this.max_child.max_child.children[..]))</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 1 ) holds for: &lt;p.init_value, p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , c.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt; 1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.parent.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt; 1) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;p.parent.init_value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(c.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / -1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;p.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;c.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , c.parent.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.parent.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.value , this.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(this.parent.value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % 1 ) holds for: &lt;this.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + -1 ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;p.parent.value , p.parent.value , p.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.parent.max_child.init_value), c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 0 ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.max_child.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / 1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= 1 ) holds for: size(c.children[..])</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - -1 ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.parent.parent.init_value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.max_child.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.parent.max_child.init_value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.max_child.value , p.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;p.value , p.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;orig(this.parent.value), this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.parent.max_child.value), this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;p.value , p.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.children : n.value &gt; #(Composite.*(parent + max_child)) ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; 1 ) holds for: orig(size(this.max_child.max_child.children[..]))-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt; 0) ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(this.parent.max_child.init_value), c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= -1 ) holds for: orig(this.max_child.max_child.value)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;orig(this.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % -1 ) holds for: &lt;this.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;this.parent.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: orig(size(this.max_child.max_child.children[..]))-1</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;c.parent.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % 1 ) holds for: &lt;this.parent.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.^(parent + max_child) : n.value = Integer_Variable_0 ) holds for: &lt;orig(this), this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;p.max_child.value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; -1 ) holds for: size(this.parent.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;p.max_child.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;p.value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;orig(this.parent.max_child.init_value), this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.parent.init_value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.parent.init_value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;this.parent.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.max_child.parent.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.value), c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , c.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.max_child.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; -1 ) holds for: size(this.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.parent.max_child.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt;= 1) ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 1) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= 1 ) holds for: orig(size(this.max_child.max_child.children[..]))</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;p.parent.value , p.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - -1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;c.parent.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 0 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.parent.parent.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.max_child.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;c.parent.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;orig(this.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;p.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(c.parent.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;c.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - -1 ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 0 ) holds for: &lt;this.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;c.parent.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(c.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - 0 ) holds for: &lt;this.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;p.init_value , p.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;p.parent.value , p.parent.value , p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) or (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.max_child.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.init_value, orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.value , c.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.parent.parent.value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.parent.max_child.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.max_child.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;c.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.init_value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 1 ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.parent.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;c.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - 0 ) holds for: &lt;this.init_value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(this.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;p.parent.value , p.parent.init_value , p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % 1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.init_value) , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * -1 ) holds for: &lt;this.max_child.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;c.parent.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(p.parent.children[..])-1</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;c.parent.value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : n.init_value != 0 ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.init_value, c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.value), this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: size(c.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , c.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;c.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;p.parent.value, p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= 1 ) holds for: orig(this.max_child.parent.init_value)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 0 ) holds for: size(c.parent.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;this.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 ) holds for: &lt;orig(this.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(c.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;orig(this.parent.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , c.parent.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;p.value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.value , orig(c.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - 0 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.max_child.value), c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.max_child.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;p.max_child.value, this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;p.value , p.max_child.value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;p.parent.value, p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(c.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;p.init_value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;c.parent.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;p.parent.value, p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;orig(this.max_child.parent.init_value), orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;p.parent.init_value , p.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;p.init_value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;orig(this.parent.parent.value), orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * 0 ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 not in Composite.children.value ) holds for: &lt;orig(this), this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;p.value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;c.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(c.children[..])-1</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.parent.parent.init_value, this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.value , c.value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.parent.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 not in Composite.children.value ) holds for: &lt;this, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , c.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.parent.init_value, c.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , c.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.max_child.init_value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;p.parent.init_value, p.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.parent.init_value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= 1 ) holds for: orig(size(this.parent.max_child.children[..]))</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * 0 ) holds for: &lt;c.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.init_value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: &lt;this.parent.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % 1 ) holds for: &lt;this.parent.init_value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.value , this.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: &lt;orig(this.parent.value), c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;c.value , orig(c.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) iff (Integer_Variable_1 != -1) ) holds for: &lt;this.parent.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % 1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;orig(this.parent.max_child.value), this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.max_child.init_value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % -1 ) holds for: &lt;this.parent.parent.init_value, this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.init_value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.parent.parent.value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;p.parent.init_value, p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 0 ) holds for: orig(this.max_child.max_child.value)</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * -1 ) holds for: &lt;this.parent.parent.init_value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.init_value, orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;c.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.parent.max_child.value, this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.max_child.max_child.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / 1 ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.value , this.parent.max_child.value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.init_value, this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.parent.max_child.value) , orig(c.parent.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;p.init_value , p.init_value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.parent.value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.children[..])-1</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;c.value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;p.parent.init_value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.parent.parent.init_value, this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.parent.value) , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) implies (Integer_Variable_1 &gt;= -1) ) holds for: &lt;this.parent.max_child.value, this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;c.parent.value, c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , this.max_child.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;orig(this.max_child.value) , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;p.value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != 1) ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % 1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.parent.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;c.value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.max_child.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % -1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.max_child.value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.max_child.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.parent.max_child.init_value), orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; 0 ) holds for: size(c.children[..])-1</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.init_value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &lt;= 0) ) holds for: &lt;this.parent.parent.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;this.parent.parent.init_value, orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , c.value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , this.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= 1 ) holds for: orig(size(this.max_child.parent.children[..]))</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - 1 ) holds for: &lt;this.parent.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.parent.max_child.value), c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.value , this.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , c.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;c.parent.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.parent.parent.value, this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.init_value , c.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.max_child.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , this.max_child.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(c.parent.value) , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.parent.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(c.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.parent.max_child.value), this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;p.parent.value, p.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;p.parent.init_value , p.value , p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , this.parent.init_value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / 1 ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 in Composite.*(parent + max_child).init_value ) holds for: &lt;orig(this), this.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , c.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.value, orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( some n : Composite.children : n.children != n.parent.children ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( no n : Composite.*(parent + max_child) : n.children = n.parent.children ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;c.parent.value, orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.parent.parent.value, this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.parent.max_child.value, this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + -1 ) holds for: &lt;this.max_child.parent.init_value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , c.parent.value , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.init_value , orig(this.max_child.parent.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.init_value , c.value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , c.parent.value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.max_child.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.value , c.parent.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.value , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , orig(this.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.parent.parent.value), orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;orig(this.parent.max_child.init_value), this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;c.parent.init_value , orig(this.value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + -1 ) holds for: &lt;this.parent.parent.init_value, this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(this.value) , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.init_value) , this.max_child.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.parent.value) , orig(this.parent.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;p.max_child.value , p.max_child.value , p.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;p.parent.value, p.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = 0 ) holds for: size(this.parent.parent.children[..])-1</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 % 1 ) holds for: &lt;this.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.parent.value, this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.value) , orig(this.max_child.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;orig(this.max_child.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.init_value , orig(c.parent.value) , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , orig(this.parent.max_child.value) , c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.value) , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.init_value , this.init_value , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.init_value , c.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( all n : Composite.children : n.ancestors = n.parent.ancestors ) holds for: this</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , this.max_child.parent.init_value , orig(this.max_child.parent.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.parent.max_child.value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;c.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.max_child.parent.init_value) , orig(this.max_child.value) , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.value , this.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.init_value , orig(this.max_child.parent.init_value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.parent.max_child.init_value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.max_child.init_value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.init_value , this.parent.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.parent.parent.value) , orig(this.value) , orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;this.parent.parent.value, orig(this.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , this.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.parent.parent.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.value) , orig(this.parent.max_child.init_value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.init_value , this.init_value , orig(c.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , c.value , orig(this.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;p.parent.value , p.value , p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt;= -1) ) holds for: &lt;orig(this.value), orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.value , this.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , orig(this.parent.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.max_child.value , orig(this.parent.max_child.init_value) , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.value) , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.parent.value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , orig(this.parent.max_child.value) , orig(this.parent.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.parent.value , this.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.value , c.parent.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - 0 ) holds for: &lt;c.parent.init_value, orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = -1) ) holds for: &lt;orig(c.parent.value), orig(this.max_child.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.init_value , this.max_child.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % -1 ) holds for: &lt;c.parent.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.value , this.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.parent.parent.init_value, c.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(c.parent.value) , orig(this.max_child.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.parent.max_child.value) , this.init_value , this.max_child.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: &lt;p.parent.value, p.value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.parent.init_value , this.max_child.value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;orig(c.parent.value), orig(this.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;p.parent.value , p.parent.init_value , this.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , c.parent.init_value , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , c.parent.value&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.init_value , this.parent.parent.init_value , orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: &lt;this.init_value, orig(this.parent.parent.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.max_child.value, orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;c.parent.init_value , c.parent.init_value , orig(this.max_child.max_child.value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;c.parent.value , orig(c.parent.value) , orig(this.max_child.parent.init_value)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.parent.parent.value , this.max_child.parent.init_value , this.max_child.parent.init_value&gt;</string>
  </set>
</object-stream>