buckets=33
specs=33
=====================================
:::OBJECT
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.free
this.start == 1
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.free
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.capacity_
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( some n : RingBuffer.data : n = null ) holds for: this
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.free, this.capacity_>
=====================================
:::POSTCONDITION
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <orig(this), this.start>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
