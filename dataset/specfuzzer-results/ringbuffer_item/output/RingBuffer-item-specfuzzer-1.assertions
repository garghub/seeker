===========================================================================
examples.RingBuffer:::OBJECT
FuzzedInvariant ( some n : RingBuffer.data : n = null ) holds for: this
this.data != null
this.start == 1 || this.start == 2 || this.start == 3
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.start
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.start
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.start
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.start
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.start
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.start
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.start
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.free
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.free
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.free
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.free
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.free
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.free
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.free
this.free >= 1
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.capacity_
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.capacity_
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.capacity_
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.capacity_
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.capacity_
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.capacity_
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.capacity_
daikon.Quant.size(this.data) >= 1
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <this, this.capacity_>
this.start <= this.free
this.start <= this.capacity_
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.free, this.capacity_>
this.free <= this.capacity_
===========================================================================
examples.RingBuffer.item():::ENTER
this.start == 1 || this.start == 2
this.free == 2 || this.free == 3
this.capacity_ == 8
daikon.Quant.size(this.data) == 2 || daikon.Quant.size(this.data) == 3
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <this, this.start>
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <this, this.free>
FuzzedInvariant ( Integer_Variable_0 = #(RingBuffer.data) ) holds for: <this, this.free>
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <this, this.free>
FuzzedInvariant ( Integer_Variable_0 != #(RingBuffer.data) ) holds for: <this, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > #(RingBuffer.data) ) holds for: <this, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
this.start < this.free
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
this.start < this.capacity_
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.free, this.capacity_>
this.free < this.capacity_
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
===========================================================================
examples.RingBuffer.item():::EXIT
this.data == \old(this.data)
daikon.Quant.pairwiseEqual(this.data, \old(this.data))
this.start == \old(this.start)
this.free == \old(this.free)
this.capacity_ == \old(this.capacity_)
this.start == 1 || this.start == 2
this.free == 2 || this.free == 3
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.free
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: this.free
this.capacity_ == 8
\result.getClass().getName() == java.lang.String.class.getName()
daikon.Quant.size(this.data) == 2 || daikon.Quant.size(this.data) == 3
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.data[])-1
daikon.Quant.memberOf(\result.getClass().getName() , daikon.Quant.typeArray(this.data) )
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
this.start < this.free
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
this.start < this.capacity_
FuzzedInvariant ( Integer_Variable_0 != #(RingBuffer.data) ) holds for: <orig(this), this.start>
FuzzedInvariant ( Integer_Variable_0 < #(RingBuffer.data) ) holds for: <orig(this), this.start>
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <orig(this), this.start>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.free, this.capacity_>
this.free < this.capacity_
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <orig(this), this.free>
FuzzedInvariant ( Integer_Variable_0 = #(RingBuffer.data) ) holds for: <orig(this), this.free>
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <orig(this), this.free>
FuzzedInvariant ( Integer_Variable_0 != #(RingBuffer.data) ) holds for: <orig(this), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > #(RingBuffer.data) ) holds for: <orig(this), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <orig(this), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
