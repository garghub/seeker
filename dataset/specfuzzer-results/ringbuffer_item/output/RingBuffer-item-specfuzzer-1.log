> SpecFuzzer
# Inference step (Daikon + Fuzzed Specs)
Daikon version 5.8.2, released May 4, 2020; http://plse.cs.washington.edu/daikon.

Loading invariants from file: invs_file.xml
Loaded: 0

Fuzzing specs:
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 < 0)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % -1
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) implies (Integer_Variable_0 > Integer_Variable_1)
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) or (Integer_Variable_0 != Integer_Variable_1)
Discarded due to arity: 4 - (Integer_Variable_0 > #(RingBuffer.data)) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 < #(RingBuffer.data))
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) or (Integer_Variable_0 < #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 < #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - 0
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(RingBuffer.data)
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 < #(RingBuffer.data))
Discarded due to arity: 4 - (Integer_Variable_0 = #(RingBuffer.data)) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1)
Fuzzed spec: all n : RingBuffer.data : n != null
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) or (Integer_Variable_0 > Integer_Variable_1)
Fuzzed spec: all n : RingBuffer.data : n != null
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) or (Integer_Variable_0 <= Integer_Variable_1)
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) iff (Integer_Variable_0 <= Integer_Variable_1)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 >= 0)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0 or Boolean_Variable_1) implies (Integer_Variable_0 > 1)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 <= Integer_Variable_1)
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: no n : RingBuffer.data : n != null
Discarded due to arity: 4 - (Integer_Variable_0 > #(RingBuffer.data)) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 0
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 > -1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 <= 1)
Fuzzed spec: (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) implies (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 >= #(RingBuffer.data)
Fuzzed spec: (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 > -1) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(RingBuffer.data)
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 <= #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(RingBuffer.data)
Fuzzed spec: (Integer_Variable_0 != 0) iff (Integer_Variable_1 < 1)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 != 0
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) iff (Integer_Variable_0 > Integer_Variable_1)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 >= 0)
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 >= #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n != null
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) or (Integer_Variable_0 > Integer_Variable_1)
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 >= -1)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: (Integer_Variable_0 > 1) or (Integer_Variable_1 = #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : RingBuffer.data : n != null
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) iff (Integer_Variable_0 < #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 = 1)
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: Integer_Variable_0 > 0
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) or (Integer_Variable_0 <= Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 <= 0)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(RingBuffer.data)
Fuzzed spec: some n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) implies (Integer_Variable_0 > Integer_Variable_1)
Fuzzed spec: (Integer_Variable_0 < #(RingBuffer.data)) iff (Integer_Variable_1 != #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) or (Integer_Variable_0 <= Integer_Variable_1)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 != Integer_Variable_1)
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 <= #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 <= #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + -1
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0 implies Boolean_Variable_1) or (Integer_Variable_0 >= 0)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(RingBuffer.data)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % -1
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 = #(RingBuffer.data)) xor (Integer_Variable_1 <= 0)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(RingBuffer.data)
Discarded due to arity: 4 - (Integer_Variable_0 < #(RingBuffer.data)) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 <= #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0 implies Boolean_Variable_1) xor (Integer_Variable_0 != 0)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 >= 1)
Fuzzed spec: (Boolean_Variable_0 or Boolean_Variable_1) xor (Integer_Variable_0 > 1)
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0 xor Boolean_Variable_1) or (Integer_Variable_0 = 0)
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - 1
Fuzzed spec: (Boolean_Variable_0 iff Boolean_Variable_1) or (Integer_Variable_0 <= 1)
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) implies (Integer_Variable_0 >= #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(RingBuffer.data)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) xor (Integer_Variable_0 > #(RingBuffer.data))
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / -1
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= #(RingBuffer.data)
Fuzzed spec: (Boolean_Variable_0 implies Boolean_Variable_1) implies (Integer_Variable_0 <= 1)
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 <= #(RingBuffer.data))
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 > #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 > Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 = #(RingBuffer.data)
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 >= #(RingBuffer.data)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) or (Integer_Variable_0 > #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 < 1)
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Boolean_Variable_0 or Boolean_Variable_1) or (Integer_Variable_0 >= 0)
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 >= Integer_Variable_1)
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) xor (Integer_Variable_0 >= #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - 1
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 < 0)
Discarded due to arity: 4 - (Integer_Variable_0 != #(RingBuffer.data)) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Boolean_Variable_0 implies Boolean_Variable_1) xor (Integer_Variable_0 = 0)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 = #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) or (Integer_Variable_0 < #(RingBuffer.data))
Fuzzed spec: (Integer_Variable_0 < #(RingBuffer.data)) implies (Integer_Variable_1 >= 0)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(RingBuffer.data)
Fuzzed spec: some n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) implies (Integer_Variable_0 > #(RingBuffer.data))
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) xor (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: (Boolean_Variable_0 iff Boolean_Variable_1) xor (Integer_Variable_0 = 0)
Fuzzed spec: (Integer_Variable_0 >= -1) implies (Integer_Variable_1 = 1)
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 < #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 <= -1)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 > #(RingBuffer.data)) iff (Integer_Variable_1 > #(RingBuffer.data))
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) or (Integer_Variable_0 <= Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 = 1)
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) iff (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 > #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 = 0)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0 xor Boolean_Variable_1) implies (Integer_Variable_0 = 0)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 != Integer_Variable_1)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 != #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0 xor Boolean_Variable_1) implies (Integer_Variable_0 < 0)
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 <= #(RingBuffer.data))
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2)
Discarded due to arity: 4 - (Integer_Variable_0 > #(RingBuffer.data)) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(RingBuffer.data)
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) iff (Integer_Variable_0 != #(RingBuffer.data))
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 = -1) or (Integer_Variable_1 < 1)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 = #(RingBuffer.data)
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) implies (Integer_Variable_0 < #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0 iff Boolean_Variable_1) implies (Integer_Variable_0 = 0)
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) xor (Integer_Variable_0 <= #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 != 0)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 <= #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) xor (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(RingBuffer.data)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / -1
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0 iff Boolean_Variable_1) xor (Integer_Variable_0 < 1)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 < 0) or (Integer_Variable_1 != #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 = #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 = #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 > #(RingBuffer.data)
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) xor (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(RingBuffer.data)
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) xor (Integer_Variable_0 > #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(RingBuffer.data)
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Discarded due to arity: 4 - (Integer_Variable_0 != #(RingBuffer.data)) implies (Integer_Variable_1 <= Integer_Variable_2)
Discarded due to arity: 4 - (Integer_Variable_0 >= #(RingBuffer.data)) xor (Integer_Variable_1 = Integer_Variable_2)
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) xor (Integer_Variable_0 != Integer_Variable_1)
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 < -1)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Boolean_Variable_0 xor Boolean_Variable_1) xor (Integer_Variable_0 > 1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % 0
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 = -1)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 >= #(RingBuffer.data)) implies (Integer_Variable_1 != #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 != Integer_Variable_1)
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1)
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 > 0)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0 or Boolean_Variable_1) implies (Integer_Variable_0 > 0)
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: (Integer_Variable_0 = #(RingBuffer.data)) xor (Integer_Variable_1 = #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 = 1) iff (Integer_Variable_1 != #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Discarded due to arity: 4 - (Integer_Variable_0 = #(RingBuffer.data)) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: all n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) or (Integer_Variable_0 != Integer_Variable_1)
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: (Integer_Variable_0 <= -1) implies (Integer_Variable_1 >= #(RingBuffer.data))
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Boolean_Variable_0 or Boolean_Variable_1) xor (Integer_Variable_0 > 0)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 <= #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 <= Integer_Variable_1)
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 < Integer_Variable_1)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 = -1)
Fuzzed spec: (Integer_Variable_0 != 1) iff (Integer_Variable_1 <= #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) iff (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 > #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / 0
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 > Integer_Variable_1)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) iff (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: (Integer_Variable_0 < -1) or (Integer_Variable_1 < 0)
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 < Integer_Variable_1)
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 = 1)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 < Integer_Variable_1)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 >= #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 != 0)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(RingBuffer.data)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 <= Integer_Variable_1)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: (Integer_Variable_0 <= #(RingBuffer.data)) iff (Integer_Variable_1 != -1)
Fuzzed spec: some n : RingBuffer.data : n != null
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) implies (Integer_Variable_0 != #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 >= #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) or (Integer_Variable_0 > #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 <= #(RingBuffer.data)
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % -1
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 <= Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) xor (Integer_Variable_0 < #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 <= #(RingBuffer.data)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 >= #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(RingBuffer.data)
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 != #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 <= Integer_Variable_1)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Boolean_Variable_0 implies Boolean_Variable_1) implies (Integer_Variable_0 = 0)
Fuzzed spec: (Boolean_Variable_0 iff Boolean_Variable_1) xor (Integer_Variable_0 >= 1)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) implies (Integer_Variable_0 > #(RingBuffer.data))
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 <= Integer_Variable_1)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 >= #(RingBuffer.data)
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 < 1)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 1
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 < Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 <= 0)
Fuzzed spec: (Boolean_Variable_0 iff Boolean_Variable_1) xor (Integer_Variable_0 > 1)
Fuzzed spec: no n : RingBuffer.data : n != null
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) iff (Integer_Variable_0 > Integer_Variable_1)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 <= Integer_Variable_1)
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: (Integer_Variable_0 != 1) iff (Integer_Variable_1 >= #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) or (Integer_Variable_0 < #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 < 1)
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0)
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) implies (Integer_Variable_0 >= Integer_Variable_1)
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) xor (Integer_Variable_0 <= #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) implies (Integer_Variable_0 <= Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = 1
Discarded due to arity: 4 - (Integer_Variable_0 = #(RingBuffer.data)) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1)
Fuzzed spec: (Boolean_Variable_0 implies Boolean_Variable_1) iff (Integer_Variable_0 < 0)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 < 1)
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) iff (Integer_Variable_0 != Integer_Variable_1)
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 >= 1)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0 or Boolean_Variable_1) xor (Integer_Variable_0 != 0)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 < 0) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(RingBuffer.data)
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * 1
Fuzzed spec: Integer_Variable_0 <= #(RingBuffer.data)
Fuzzed spec: (Integer_Variable_0 != #(RingBuffer.data)) implies (Integer_Variable_1 >= #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 = 1)
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: (Integer_Variable_0 < #(RingBuffer.data)) iff (Integer_Variable_1 != 0)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 <= Integer_Variable_1)
Fuzzed spec: all n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) xor (Integer_Variable_0 < #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0 iff Boolean_Variable_1) xor (Integer_Variable_0 != 0)
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(RingBuffer.data)
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 = #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0 xor Boolean_Variable_1) iff (Integer_Variable_0 >= -1)
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Boolean_Variable_0 iff Boolean_Variable_1) xor (Integer_Variable_0 > 0)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 < #(RingBuffer.data))
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0 implies Boolean_Variable_1) implies (Integer_Variable_0 >= 1)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(RingBuffer.data)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: (Integer_Variable_0 <= #(RingBuffer.data)) xor (Integer_Variable_1 >= -1)
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 != Integer_Variable_1)
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0 or Boolean_Variable_1) implies (Integer_Variable_0 > 1)
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 <= Integer_Variable_1)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 >= -1)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * 0
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 != #(RingBuffer.data)) or (Integer_Variable_1 <= #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 = 0
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) iff (Integer_Variable_0 != #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - 0
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 != #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 != #(RingBuffer.data)) or (Integer_Variable_1 >= 0)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / 0
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 != #(RingBuffer.data))
Fuzzed spec: (Integer_Variable_0 != 0) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 < #(RingBuffer.data)
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 != #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: (Integer_Variable_0 >= #(RingBuffer.data)) or (Integer_Variable_1 > #(RingBuffer.data))
Fuzzed spec: (Integer_Variable_0 != #(RingBuffer.data)) iff (Integer_Variable_1 <= -1)
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) or (Integer_Variable_0 < Integer_Variable_1)
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 != #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 = #(RingBuffer.data))
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) xor (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 <= 1) or (Integer_Variable_1 > #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 >= 1)
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : RingBuffer.data : n != null
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 != #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 > #(RingBuffer.data)) iff (Integer_Variable_1 < 1)
Fuzzed spec: (Integer_Variable_0 != 0) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 != -1) or (Integer_Variable_1 >= #(RingBuffer.data))
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: (Integer_Variable_0 >= #(RingBuffer.data)) or (Integer_Variable_1 < -1)
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 <= 0)
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) xor (Integer_Variable_0 <= #(RingBuffer.data))
Discarded due to arity: 4 - (Integer_Variable_0 > #(RingBuffer.data)) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 0
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n != null
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) or (Integer_Variable_0 <= #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: (Boolean_Variable_0 implies Boolean_Variable_1) xor (Integer_Variable_0 >= 0)
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) or (Integer_Variable_0 < Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(RingBuffer.data)
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * 0
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 > -1)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) implies (Integer_Variable_0 < Integer_Variable_1)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(RingBuffer.data)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 != #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 <= 1)
Fuzzed spec: (Integer_Variable_0 <= 0) xor (Integer_Variable_1 < 1)
Fuzzed spec: (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= #(RingBuffer.data))
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) xor (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) implies (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 < Integer_Variable_1)
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 < #(RingBuffer.data)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0 xor Boolean_Variable_1) or (Integer_Variable_0 <= 0)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: (Boolean_Variable_0 xor Boolean_Variable_1) iff (Integer_Variable_0 != -1)
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 > #(RingBuffer.data))
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 = 0)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 <= #(RingBuffer.data))
Fuzzed spec: (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(RingBuffer.data)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 != 0)
Fuzzed spec: Integer_Variable_0 != #(RingBuffer.data)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 != 1)
Discarded due to arity: 4 - (Integer_Variable_0 = #(RingBuffer.data)) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / 0
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0 implies Boolean_Variable_1) or (Integer_Variable_0 >= 1)
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) implies (Integer_Variable_0 > #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(RingBuffer.data)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 > Integer_Variable_1)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / 1
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 <= -1)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(RingBuffer.data)
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: (Integer_Variable_0 = 0) iff (Integer_Variable_1 > -1)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) xor (Integer_Variable_0 <= #(RingBuffer.data))
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 = 1)
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 >= 0)
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 != 0)
Fuzzed spec: Integer_Variable_0 = #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Boolean_Variable_0 xor Boolean_Variable_1) or (Integer_Variable_0 < -1)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 < -1)
Fuzzed spec: (Boolean_Variable_0 or Boolean_Variable_1) xor (Integer_Variable_0 < -1)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Boolean_Variable_0 xor Boolean_Variable_1) xor (Integer_Variable_0 < -1)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) iff (Integer_Variable_0 <= Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 1
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 != Integer_Variable_1)
Discarded due to arity: 4 - (Integer_Variable_0 = #(RingBuffer.data)) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 != 0) xor (Integer_Variable_1 > -1)
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 > #(RingBuffer.data))
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 <= Integer_Variable_1)
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 > #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - -1
Fuzzed spec: Integer_Variable_0 >= #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 > -1) implies (Integer_Variable_1 <= 0)
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 != 1)
Fuzzed spec: some n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) implies (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * 0
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) xor (Integer_Variable_0 > #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 >= #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < #(RingBuffer.data)) iff (Integer_Variable_1 != -1)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: Integer_Variable_0 != #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 < #(RingBuffer.data)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 <= 1)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(RingBuffer.data)
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < 0)
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 != #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: (Integer_Variable_0 < 0) xor (Integer_Variable_1 <= 1)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 <= 0
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) or (Integer_Variable_0 > #(RingBuffer.data))
Fuzzed spec: (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Discarded due to arity: 4 - (Integer_Variable_0 != #(RingBuffer.data)) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 < #(RingBuffer.data)
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 = -1)
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 > #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n != null
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 <= Integer_Variable_1)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0 xor Boolean_Variable_1) implies (Integer_Variable_0 < -1)
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) xor (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * 1
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 >= 0)
Fuzzed spec: (Integer_Variable_0 != #(RingBuffer.data)) or (Integer_Variable_1 = #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(RingBuffer.data)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 < #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * -1
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 != #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 = -1)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(RingBuffer.data)
Discarded due to arity: 4 - (Integer_Variable_0 <= #(RingBuffer.data)) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) implies (Integer_Variable_0 <= Integer_Variable_1)
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 >= -1)
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 = #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) or (Integer_Variable_0 < Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(RingBuffer.data)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 < #(RingBuffer.data)
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 > #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 < 1)
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0 implies Boolean_Variable_1) implies (Integer_Variable_0 != 1)
Fuzzed spec: (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0)
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: (Boolean_Variable_0 xor Boolean_Variable_1) or (Integer_Variable_0 < 0)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 = #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: no n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 != #(RingBuffer.data))
Fuzzed spec: (Integer_Variable_0 > #(RingBuffer.data)) or (Integer_Variable_1 >= 1)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n != null
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 != Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 = Integer_Variable_1)
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) implies (Integer_Variable_0 <= Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 > #(RingBuffer.data)
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 >= #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 <= #(RingBuffer.data))
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > #(RingBuffer.data)
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 > -1)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + 0
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 >= -1) iff (Integer_Variable_1 != #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / -1
Fuzzed spec: Integer_Variable_0 <= #(RingBuffer.data)
Fuzzed spec: (Integer_Variable_0 <= 1) xor (Integer_Variable_1 < #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % 0
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 > #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0 or Boolean_Variable_1) or (Integer_Variable_0 != 0)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(RingBuffer.data)
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1)
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 >= #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0 implies Boolean_Variable_1) or (Integer_Variable_0 <= 0)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 <= 1)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 > #(RingBuffer.data)) or (Integer_Variable_1 <= 0)
Fuzzed spec: (Integer_Variable_0 >= -1) implies (Integer_Variable_1 = #(RingBuffer.data))
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) xor (Integer_Variable_0 != #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1)
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 >= 1) xor (Integer_Variable_1 != 1)
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) xor (Integer_Variable_0 != Integer_Variable_1)
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) or (Integer_Variable_0 < Integer_Variable_1)
Fuzzed spec: (Integer_Variable_0 >= 1) or (Integer_Variable_1 != #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 <= #(RingBuffer.data)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 != #(RingBuffer.data)) implies (Integer_Variable_1 < #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 >= 0)
Fuzzed spec: (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 = 1)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 > -1)
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1)
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 != 0)
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 < 0)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(RingBuffer.data)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n != null
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) or (Integer_Variable_0 = #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 <= -1)
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) xor (Integer_Variable_0 < #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 > -1)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 = 0) iff (Integer_Variable_1 < #(RingBuffer.data))
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) or (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 < 0
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) xor (Integer_Variable_0 = #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - -1
Fuzzed spec: (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 != 0)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 = #(RingBuffer.data))
Fuzzed spec: (Integer_Variable_0 >= #(RingBuffer.data)) or (Integer_Variable_1 != #(RingBuffer.data))
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(RingBuffer.data)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(RingBuffer.data)
Fuzzed spec: (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 != 1)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 > -1)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 >= -1)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) implies (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 != Integer_Variable_1)
Fuzzed spec: (Integer_Variable_0 = 0) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 = -1) implies (Integer_Variable_1 > #(RingBuffer.data))
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 = 0)
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) or (Integer_Variable_0 != Integer_Variable_1)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - -1
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > #(RingBuffer.data))
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0 or Boolean_Variable_1) or (Integer_Variable_0 <= 0)
Fuzzed spec: (Boolean_Variable_0 implies Boolean_Variable_1) iff (Integer_Variable_0 >= 0)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % 0
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 < #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0 xor Boolean_Variable_1) implies (Integer_Variable_0 <= -1)
Fuzzed spec: Integer_Variable_0 != #(RingBuffer.data)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 <= #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 <= -1)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) or (Integer_Variable_0 >= #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(RingBuffer.data)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - 0
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 != -1)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Discarded due to arity: 4 - (Integer_Variable_0 < #(RingBuffer.data)) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 != 1)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 <= Integer_Variable_1)
Fuzzed spec: some n : RingBuffer.data : n != null
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) iff (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: (Integer_Variable_0 >= #(RingBuffer.data)) implies (Integer_Variable_1 = #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 < #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0 xor Boolean_Variable_1) or (Integer_Variable_0 = 1)
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 > #(RingBuffer.data)) implies (Integer_Variable_1 > #(RingBuffer.data))
Fuzzed spec: (Integer_Variable_0 < #(RingBuffer.data)) implies (Integer_Variable_1 >= #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 >= -1)
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 != 1) iff (Integer_Variable_1 != #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0 iff Boolean_Variable_1) xor (Integer_Variable_0 < 1)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 < #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 = -1)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) or (Integer_Variable_0 > #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) implies (Integer_Variable_0 <= Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Integer_Variable_0 > #(RingBuffer.data)) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 < #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 > Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 <= #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(RingBuffer.data)
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 = #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(RingBuffer.data)
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 < Integer_Variable_1)
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) or (Integer_Variable_0 != #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = #(RingBuffer.data)) xor (Integer_Variable_1 >= #(RingBuffer.data))
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) implies (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 < #(RingBuffer.data))
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) iff (Integer_Variable_0 < #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(RingBuffer.data)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 0
Fuzzed spec: Integer_Variable_0 != #(RingBuffer.data)
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) iff (Integer_Variable_0 < #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % 1
Discarded due to arity: 4 - (Integer_Variable_0 != #(RingBuffer.data)) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0)
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) xor (Integer_Variable_0 != Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: all n : RingBuffer.data : n != null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(RingBuffer.data)) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(RingBuffer.data)
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) or (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(RingBuffer.data)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 <= 0)
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) implies (Integer_Variable_0 <= Integer_Variable_1)
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) xor (Integer_Variable_0 > #(RingBuffer.data))
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) or (Integer_Variable_0 != #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0 xor Boolean_Variable_1) xor (Integer_Variable_0 <= -1)
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 > 0)
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < #(RingBuffer.data)) iff (Integer_Variable_1 <= #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 >= #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) or (Integer_Variable_0 > #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / 1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(RingBuffer.data)
Fuzzed spec: (Integer_Variable_0 >= #(RingBuffer.data)) implies (Integer_Variable_1 < #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 = #(RingBuffer.data)
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 >= #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % 1
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0 xor Boolean_Variable_1) xor (Integer_Variable_0 <= 0)
Fuzzed spec: Integer_Variable_0 != #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 <= #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(RingBuffer.data)
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) or (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 != 1)
Fuzzed spec: (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 >= 0)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 = 1)
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: (Integer_Variable_0 >= #(RingBuffer.data)) or (Integer_Variable_1 = #(RingBuffer.data))
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 >= #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 = 0)
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 > Integer_Variable_1)
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 <= Integer_Variable_1)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1)
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 <= 1)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 > #(RingBuffer.data)) iff (Integer_Variable_1 < -1)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0 or Boolean_Variable_1) xor (Integer_Variable_0 >= -1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / -1
Fuzzed spec: (Boolean_Variable_0 implies Boolean_Variable_1) iff (Integer_Variable_0 > -1)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(RingBuffer.data)
Fuzzed spec: (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0 or Boolean_Variable_1) xor (Integer_Variable_0 != -1)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 != Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 < 1)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 > Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(RingBuffer.data)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = #(RingBuffer.data))
Discarded due to arity: 4 - (Integer_Variable_0 = #(RingBuffer.data)) xor (Integer_Variable_1 < Integer_Variable_2)
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) implies (Integer_Variable_0 != #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 = -1)
Fuzzed spec: some n : RingBuffer.data : n != null
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) xor (Integer_Variable_0 > #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) implies (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % #(RingBuffer.data)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 > #(RingBuffer.data)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + #(RingBuffer.data)
Fuzzed spec: (Boolean_Variable_0 implies Boolean_Variable_1) iff (Integer_Variable_0 > -1)
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) xor (Integer_Variable_0 >= Integer_Variable_1)
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 < Integer_Variable_1)
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(RingBuffer.data)
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) implies (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) iff (Integer_Variable_0 < Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(RingBuffer.data)
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 <= Integer_Variable_1)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 < Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 > #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 < #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) xor (Integer_Variable_0 != #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) iff (Integer_Variable_0 > #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0 or Boolean_Variable_1) or (Integer_Variable_0 <= 1)
Fuzzed spec: Integer_Variable_0 < #(RingBuffer.data)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 < Integer_Variable_1)
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: (Integer_Variable_0 = 0) iff (Integer_Variable_1 > #(RingBuffer.data))
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) implies (Integer_Variable_0 > Integer_Variable_1)
Fuzzed spec: some n : RingBuffer.data : n != null
Discarded due to arity: 4 - (Integer_Variable_0 = #(RingBuffer.data)) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 != Integer_Variable_1)
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) iff (Integer_Variable_0 > #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + 0
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 = #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 != -1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % #(RingBuffer.data)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 != 0) xor (Integer_Variable_1 <= #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 > #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 < Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(RingBuffer.data)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 > 1) or (Integer_Variable_1 <= 1)
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 1
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0)
Fuzzed spec: (Integer_Variable_0 >= #(RingBuffer.data)) or (Integer_Variable_1 <= -1)
Fuzzed spec: (Boolean_Variable_0 xor Boolean_Variable_1) xor (Integer_Variable_0 > 0)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(RingBuffer.data)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 >= 0) iff (Integer_Variable_1 < #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 = -1)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 > #(RingBuffer.data)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + #(RingBuffer.data)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 <= #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0 iff Boolean_Variable_1) implies (Integer_Variable_0 = 0)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / 0
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 = #(RingBuffer.data)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 != Integer_Variable_1)
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: some n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Integer_Variable_0 = #(RingBuffer.data)) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(RingBuffer.data)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n != null
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) iff (Integer_Variable_0 >= Integer_Variable_1)
Discarded due to arity: 4 - (Integer_Variable_0 < #(RingBuffer.data)) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= #(RingBuffer.data)
Fuzzed spec: (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 = #(RingBuffer.data))
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) xor (Integer_Variable_0 = Integer_Variable_1)
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) iff (Integer_Variable_0 >= #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) or (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % #(RingBuffer.data)
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 >= -1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = 1
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 = #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 < Integer_Variable_1)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0 xor Boolean_Variable_1) or (Integer_Variable_0 > 1)
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 < Integer_Variable_1)
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 <= 0)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 <= #(RingBuffer.data)
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 >= #(RingBuffer.data))
Fuzzed spec: (Integer_Variable_0 > 0) xor (Integer_Variable_1 <= #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 = #(RingBuffer.data)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: all n : RingBuffer.data : n != null
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) or (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % #(RingBuffer.data)
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: (Integer_Variable_0 > #(RingBuffer.data)) xor (Integer_Variable_1 <= #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(RingBuffer.data)
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 <= Integer_Variable_1)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(RingBuffer.data)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(RingBuffer.data)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0)
Fuzzed spec: (Integer_Variable_0 != -1) xor (Integer_Variable_1 = #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(RingBuffer.data)
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 != #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(RingBuffer.data)
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 > #(RingBuffer.data)) or (Integer_Variable_1 > #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 <= 0)
Fuzzed spec: some n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) or (Integer_Variable_0 != #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) iff (Integer_Variable_0 != #(RingBuffer.data))
Fuzzed spec: (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2)
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) or (Integer_Variable_0 = #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(RingBuffer.data)
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) iff (Integer_Variable_0 = #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * 0
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 <= #(RingBuffer.data)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0)
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) implies (Integer_Variable_0 >= #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) xor (Integer_Variable_0 < #(RingBuffer.data))
Fuzzed spec: (Integer_Variable_0 > #(RingBuffer.data)) iff (Integer_Variable_1 < #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 > Integer_Variable_1)
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Boolean_Variable_0 implies Boolean_Variable_1) or (Integer_Variable_0 <= 1)
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0 iff Boolean_Variable_1) or (Integer_Variable_0 > -1)
Fuzzed spec: some n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) or (Integer_Variable_0 < Integer_Variable_1)
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = #(RingBuffer.data)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 <= 1)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 = -1)
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 <= 1)
Fuzzed spec: (Integer_Variable_0 != #(RingBuffer.data)) implies (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 = #(RingBuffer.data)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 >= -1)
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: Integer_Variable_0 < #(RingBuffer.data)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > 0)
Fuzzed spec: (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1)
Fuzzed spec: Integer_Variable_0 >= #(RingBuffer.data)
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0 or Boolean_Variable_1) xor (Integer_Variable_0 <= 0)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + -1
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: all n : RingBuffer.data : n != null
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) implies (Integer_Variable_0 = #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 != 1)
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + 0
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 != #(RingBuffer.data))
Discarded due to arity: 4 - (Integer_Variable_0 <= #(RingBuffer.data)) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 != #(RingBuffer.data)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 <= #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) implies (Integer_Variable_0 != Integer_Variable_1)
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 <= #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 < Integer_Variable_1)
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 <= #(RingBuffer.data))
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 != #(RingBuffer.data)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 > -1)
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: (Integer_Variable_0 <= #(RingBuffer.data)) implies (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Boolean_Variable_0 iff Boolean_Variable_1) or (Integer_Variable_0 <= 0)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) iff (Integer_Variable_0 = Integer_Variable_1)
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) iff (Integer_Variable_0 > Integer_Variable_1)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 < #(RingBuffer.data))
Fuzzed spec: (Integer_Variable_0 = 0) or (Integer_Variable_1 = #(RingBuffer.data))
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 <= #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 >= #(RingBuffer.data)
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: no n : RingBuffer.data : n != null
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) xor (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 != Integer_Variable_1)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) or (Integer_Variable_0 != #(RingBuffer.data))
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) or (Integer_Variable_0 <= #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 <= Integer_Variable_1)
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: no n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) xor (Integer_Variable_0 != Integer_Variable_1)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > #(RingBuffer.data)) implies (Integer_Variable_1 <= -1)
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 > #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 = Integer_Variable_1)
Discarded due to arity: 4 - (Integer_Variable_0 > #(RingBuffer.data)) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 > #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 < #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / 0
Fuzzed spec: (Boolean_Variable_0 xor Boolean_Variable_1) iff (Integer_Variable_0 != 1)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(RingBuffer.data)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 <= #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: (Integer_Variable_0 = #(RingBuffer.data)) implies (Integer_Variable_1 = #(RingBuffer.data))
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + 1
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 < #(RingBuffer.data))
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 = #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: (Integer_Variable_0 > #(RingBuffer.data)) xor (Integer_Variable_1 = #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 = #(RingBuffer.data)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 > 1)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n != null
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) or (Integer_Variable_0 >= #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 <= #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 != -1)
Fuzzed spec: Integer_Variable_0 <= #(RingBuffer.data)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / 1
Fuzzed spec: (Boolean_Variable_0 implies Boolean_Variable_1) xor (Integer_Variable_0 > 0)
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 != 0)
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 <= 0)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(RingBuffer.data)
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 >= -1)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(RingBuffer.data)
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 != Integer_Variable_1)
Fuzzed spec: (Boolean_Variable_0 implies Boolean_Variable_1) implies (Integer_Variable_0 < 1)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: (Boolean_Variable_0 iff Boolean_Variable_1) xor (Integer_Variable_0 < 1)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = #(RingBuffer.data))
Fuzzed spec: (Integer_Variable_0 >= #(RingBuffer.data)) or (Integer_Variable_1 < #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 != Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 < 1)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 >= #(RingBuffer.data)
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 > 0)
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / 1
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 >= #(RingBuffer.data)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 <= #(RingBuffer.data)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 < 1)
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) xor (Integer_Variable_0 = #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: (Integer_Variable_0 != 1) iff (Integer_Variable_1 < 0)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 < #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0 iff Boolean_Variable_1) implies (Integer_Variable_0 >= 0)
Fuzzed spec: Integer_Variable_0 >= 0
Discarded due to arity: 4 - (Integer_Variable_0 = #(RingBuffer.data)) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 != #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 != #(RingBuffer.data)) or (Integer_Variable_1 <= 0)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 <= 0)
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) or (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: (Boolean_Variable_0 implies Boolean_Variable_1) implies (Integer_Variable_0 > 0)
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) or (Integer_Variable_0 < Integer_Variable_1)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 > Integer_Variable_1)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 != Integer_Variable_1)
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / -1
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 < Integer_Variable_1)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 < #(RingBuffer.data)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) or (Integer_Variable_0 > #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 <= #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 = Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 >= #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) xor (Integer_Variable_0 != Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 <= #(RingBuffer.data)
Fuzzed spec: (Integer_Variable_0 >= #(RingBuffer.data)) xor (Integer_Variable_1 = #(RingBuffer.data))
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 != #(RingBuffer.data)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Integer_Variable_0 >= #(RingBuffer.data)
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 <= #(RingBuffer.data)
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) xor (Integer_Variable_0 = #(RingBuffer.data))
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 >= -1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 = -1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Boolean_Variable_0) or (Integer_Variable_0 >= #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + 0
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % 0
Fuzzed spec: (Boolean_Variable_0 implies Boolean_Variable_1) or (Integer_Variable_0 < -1)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 > #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - 1
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: (Boolean_Variable_0) iff (Integer_Variable_0 > Integer_Variable_1)
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 > -1) iff (Integer_Variable_1 < #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n != null
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) xor (Integer_Variable_0 != #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) implies (Integer_Variable_0 > Integer_Variable_1)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(RingBuffer.data)
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: Boolean_Variable_0 or Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 <= #(RingBuffer.data)
Fuzzed spec: (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % 0
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 = #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1)
Fuzzed spec: Integer_Variable_0 > #(RingBuffer.data)
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(RingBuffer.data)
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 <= 0)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(RingBuffer.data)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 >= 1) iff (Integer_Variable_1 = #(RingBuffer.data))
Fuzzed spec: (Integer_Variable_0 <= #(RingBuffer.data)) implies (Integer_Variable_1 > #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: (Integer_Variable_0 != 1) xor (Integer_Variable_1 > #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0 iff Boolean_Variable_1) or (Integer_Variable_0 >= -1)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) xor (Integer_Variable_0 >= Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 = #(RingBuffer.data)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: no n : RingBuffer.data : n = null
Fuzzed spec: no n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Integer_Variable_0 = #(RingBuffer.data)) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0 xor Boolean_Variable_1) xor (Integer_Variable_0 <= 1)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Integer_Variable_0 >= #(RingBuffer.data)) or (Integer_Variable_1 = #(RingBuffer.data))
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) or (Integer_Variable_0 > #(RingBuffer.data))
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Fuzzed spec: some n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0 xor Boolean_Variable_1) xor (Integer_Variable_0 != 1)
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(RingBuffer.data)
Fuzzed spec: no n : RingBuffer.data : n != null
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 > Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(RingBuffer.data)
Discarded due to arity: 4 - (Boolean_Variable_0 xor Boolean_Variable_1) implies (Integer_Variable_0 != #(RingBuffer.data))
Fuzzed spec: some n : RingBuffer.data : n = null
Discarded due to arity: 4 - (Boolean_Variable_0 iff Boolean_Variable_1) iff (Integer_Variable_0 <= #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 0
Fuzzed spec: (Boolean_Variable_0) implies (Integer_Variable_0 < #(RingBuffer.data))
Fuzzed spec: all n : RingBuffer.data : n = null
Fuzzed spec: (Boolean_Variable_0 implies Boolean_Variable_1) or (Integer_Variable_0 <= -1)
Fuzzed spec: (Integer_Variable_0 >= #(RingBuffer.data)) xor (Integer_Variable_1 < #(RingBuffer.data))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 <= #(RingBuffer.data)
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: some n : RingBuffer.data : n = null
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: (Boolean_Variable_0) xor (Integer_Variable_0 >= -1)
Fuzzed spec: all n : RingBuffer.data : n != null
Fuzzed spec: Boolean_Variable_0 xor Boolean_Variable_1
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(RingBuffer.data)
Fuzzed spec: (Integer_Variable_0 <= #(RingBuffer.data)) or (Integer_Variable_1 = 1)
Fuzzed spec: Boolean_Variable_0 iff Boolean_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) or (Integer_Variable_0 > Integer_Variable_1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) or (Integer_Variable_0 >= #(RingBuffer.data))
Fuzzed spec: (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 != -1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Boolean_Variable_0 implies Boolean_Variable_1
Discarded due to arity: 4 - (Boolean_Variable_0 implies Boolean_Variable_1) implies (Integer_Variable_0 > #(RingBuffer.data))
Discarded due to arity: 4 - (Boolean_Variable_0 or Boolean_Variable_1) iff (Integer_Variable_0 < #(RingBuffer.data))
Unique fuzzed invariants: 501 (2000)
Unary: 24 - Binary: 166 - Ternary: 311 - Discarded: 182
Reading declaration files Processing trace data; reading 1 dtrace file:
Loaded objects from file: /specfuzzer/experiments/ringbuffer_item/setup-files/RingBufferTesterDriver-objects.xml
Total loaded objects: 2529

No return from procedure observed 87 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.RingBuffer.RingBuffer(int) : 14 invocations
  examples.RingBuffer.item() : 33 invocations
  examples.RingBuffer.remove() : 40 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
examples.RingBuffer:::OBJECT
FuzzedInvariant ( some n : RingBuffer.data : n = null ) holds for: this
this.data != null
this.start one of { 1, 2, 3 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.start
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.start
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.start
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.start
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.start
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.start
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.start
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.free
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.free
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.free
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.free
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.free
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.free
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.free
this.free >= 1
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.capacity_
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.capacity_
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.capacity_
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.capacity_
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.capacity_
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.capacity_
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.capacity_
size(this.data[]) >= 1
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <this, this.capacity_>
this.start <= this.free
this.start <= this.capacity_
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.free, this.capacity_>
this.free <= this.capacity_
===========================================================================
examples.RingBuffer.RingBuffer(int):::ENTER
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: n
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: n
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: n
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: n
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: n
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: n
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: n
===========================================================================
examples.RingBuffer.RingBuffer(int):::EXIT
this.start == this.free
this.capacity_ == orig(n)
this.data[] == [null]
this.data[] elements == null
this.data[].getClass().getName() == [null]
this.data[].getClass().getName() elements == null
this.start == 1
size(this.data[]) == 1
FuzzedInvariant ( (Integer_Variable_0 != 1) iff (Integer_Variable_1 < 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
===========================================================================
examples.RingBuffer.capacity():::ENTER
this.free one of { 1, 2, 3 }
this.capacity_ one of { 1, 8, 10 }
size(this.data[]) one of { 1, 2, 3 }
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <this, this.start>
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <this, this.free>
FuzzedInvariant ( Integer_Variable_0 = #(RingBuffer.data) ) holds for: <this, this.free>
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <this, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
===========================================================================
examples.RingBuffer.capacity():::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.start == orig(this.start)
this.free == orig(this.free)
this.capacity_ == return
return == orig(this.capacity_)
this.free one of { 1, 2, 3 }
return one of { 1, 8, 10 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: return
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: return
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: return
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: return
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: return
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: return
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: return
size(this.data[]) one of { 1, 2, 3 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.data[])-1
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, return>
this.start <= return
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <orig(this), this.start>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.free, return>
this.free <= return
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <orig(this), this.free>
FuzzedInvariant ( Integer_Variable_0 = #(RingBuffer.data) ) holds for: <orig(this), this.free>
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <orig(this), this.free>
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <orig(this), return>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , return>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , return>
===========================================================================
examples.RingBuffer.count():::ENTER
this.start one of { 1, 2 }
this.free one of { 1, 2, 3 }
this.capacity_ one of { 1, 8, 10 }
size(this.data[]) one of { 1, 2, 3 }
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <this, this.start>
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <this, this.free>
FuzzedInvariant ( Integer_Variable_0 = #(RingBuffer.data) ) holds for: <this, this.free>
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <this, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
this.free % this.start == 0
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
this.capacity_ % this.start == 0
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
===========================================================================
examples.RingBuffer.count():::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.start == orig(this.start)
this.free == orig(this.free)
this.capacity_ == orig(this.capacity_)
this.start one of { 1, 2 }
this.free one of { 1, 2, 3 }
this.capacity_ one of { 1, 8, 10 }
return one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: return
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: return
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: return
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: return
size(this.data[]) one of { 1, 2, 3 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.data[])-1
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
this.free % this.start == 0
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
this.capacity_ % this.start == 0
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <orig(this), this.start>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 0 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / 1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - -1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.free, return>
this.free > return
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <orig(this), this.free>
FuzzedInvariant ( Integer_Variable_0 = #(RingBuffer.data) ) holds for: <orig(this), this.free>
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <orig(this), this.free>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 0 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / 1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - -1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.capacity_, return>
this.capacity_ > return
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <orig(this), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != #(RingBuffer.data) ) holds for: <orig(this), return>
FuzzedInvariant ( Integer_Variable_0 < #(RingBuffer.data) ) holds for: <orig(this), return>
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <orig(this), return>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.free , this.capacity_ , return>
===========================================================================
examples.RingBuffer.dataCount():::ENTER
this.free one of { 1, 2, 3 }
this.capacity_ one of { 1, 8, 10 }
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <this, this.start>
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <this, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
===========================================================================
examples.RingBuffer.dataCount():::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.start == orig(this.start)
this.free == orig(this.free)
this.capacity_ == orig(this.capacity_)
this.free one of { 1, 2, 3 }
this.capacity_ one of { 1, 8, 10 }
return one of { 2, 9, 11 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: return
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: return
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: return
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: return
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: return
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: return
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: return
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: return
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: return
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.data[])-1
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, return>
this.start < return
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <orig(this), this.start>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.free, return>
this.free < return
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <orig(this), this.free>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.capacity_, return>
this.capacity_ < return
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <orig(this), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != #(RingBuffer.data) ) holds for: <orig(this), return>
FuzzedInvariant ( Integer_Variable_0 > #(RingBuffer.data) ) holds for: <orig(this), return>
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <orig(this), return>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , return>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , return>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.free , this.capacity_ , return>
===========================================================================
examples.RingBuffer.extend(java.lang.Object):::ENTER
this.start one of { 1, 2 }
this.free one of { 1, 2, 3 }
this.capacity_ one of { 8, 10 }
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.capacity_
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: this.capacity_
a_value.getClass().getName() == java.lang.String.class
size(this.data[]) one of { 1, 2, 3 }
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <this, this.start>
FuzzedInvariant ( Integer_Variable_0 != #(RingBuffer.data) ) holds for: <this, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > #(RingBuffer.data) ) holds for: <this, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
this.free % this.start == 0
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
this.start < this.capacity_
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.free, this.capacity_>
this.free < this.capacity_
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
===========================================================================
examples.RingBuffer.extend(java.lang.Object):::EXIT
this.data == orig(this.data)
this.start == orig(this.start)
this.capacity_ == orig(this.capacity_)
size(this.data[])-1 == orig(size(this.data[]))
this.start one of { 1, 2 }
this.free one of { 2, 3, 4 }
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.free
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: this.free
this.capacity_ one of { 8, 10 }
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.capacity_
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: this.capacity_
size(this.data[]) one of { 2, 3, 4 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: orig(size(this.data[]))-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: orig(size(this.data[]))-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: orig(size(this.data[]))-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: orig(size(this.data[]))-1
orig(a_value.getClass().getName()) in this.data[].getClass().getName()
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
this.start < this.free
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
this.start < this.capacity_
FuzzedInvariant ( Integer_Variable_0 != #(RingBuffer.data) ) holds for: <orig(this), this.start>
FuzzedInvariant ( Integer_Variable_0 < #(RingBuffer.data) ) holds for: <orig(this), this.start>
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <orig(this), this.start>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, orig(this.free)>
orig(this.free) % this.start == 0
this.start <= orig(this.free)
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.free, this.capacity_>
this.free < this.capacity_
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <orig(this), this.free>
FuzzedInvariant ( Integer_Variable_0 = #(RingBuffer.data) ) holds for: <orig(this), this.free>
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <orig(this), this.free>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= 1) ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 1 ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 0 ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 1 ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / 1 ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 1 ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - -1 ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.free, orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.free, orig(this.free)>
this.free > orig(this.free)
FuzzedInvariant ( Integer_Variable_0 != #(RingBuffer.data) ) holds for: <orig(this), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > #(RingBuffer.data) ) holds for: <orig(this), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <orig(this), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.free), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.free), this.capacity_>
this.capacity_ > orig(this.free)
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , orig(this.free)>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , orig(this.free) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.free) , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <orig(this.free) , this.free , this.capacity_>
===========================================================================
examples.RingBuffer.isEmpty():::ENTER
this.free one of { 1, 2, 3 }
size(this.data[]) one of { 1, 2, 3 }
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <this, this.start>
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <this, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
===========================================================================
examples.RingBuffer.isEmpty():::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.start == orig(this.start)
this.free == orig(this.free)
this.capacity_ == orig(this.capacity_)
(return == false)  <==>  (this.start < this.free)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != 1) ) holds for: <this.capacity_, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != 1) ) holds for: <this.free, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != 1) ) holds for: <this.start, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != Integer_Variable_1) ) holds for: <this.start , this.free , return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= -1) ) holds for: <return, size(this.data[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= -1) ) holds for: <return, size(this.data[])>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= 0) ) holds for: <return, size(this.data[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= 0) ) holds for: <return, size(this.data[])>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= 0) ) holds for: <this.capacity_, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= 0) ) holds for: <this.free, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= 0) ) holds for: <this.start, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= 1) ) holds for: <return, size(this.data[])>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = -1) ) holds for: <return, size(this.data[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = -1) ) holds for: <return, size(this.data[])>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = 0) ) holds for: <return, size(this.data[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = 0) ) holds for: <return, size(this.data[])>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = 0) ) holds for: <this.capacity_, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = 0) ) holds for: <this.free, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = 0) ) holds for: <this.start, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = 1) ) holds for: <return, size(this.data[])>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 > Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 > Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 > Integer_Variable_1) ) holds for: <this.start , this.free , return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 0) ) holds for: <return, size(this.data[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 1) ) holds for: <return, size(this.data[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 1) ) holds for: <return, size(this.data[])>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 1) ) holds for: <this.capacity_, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 1) ) holds for: <this.free, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 1) ) holds for: <this.start, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != Integer_Variable_1) ) holds for: <this.start , this.free , return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 < -1) ) holds for: <return, size(this.data[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 < -1) ) holds for: <return, size(this.data[])>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 < 1) ) holds for: <return, size(this.data[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 < 1) ) holds for: <return, size(this.data[])>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 < 1) ) holds for: <this.capacity_, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 < 1) ) holds for: <this.free, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 < 1) ) holds for: <this.start, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= -1) ) holds for: <return, size(this.data[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= -1) ) holds for: <return, size(this.data[])>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 0) ) holds for: <return, size(this.data[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 0) ) holds for: <return, size(this.data[])>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 0) ) holds for: <this.capacity_, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 0) ) holds for: <this.free, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 0) ) holds for: <this.start, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 1) ) holds for: <return, size(this.data[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 1) ) holds for: <return, size(this.data[])>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 = 0) ) holds for: <return, size(this.data[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 = 0) ) holds for: <return, size(this.data[])>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 = 0) ) holds for: <this.capacity_, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 = 0) ) holds for: <this.free, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 = 0) ) holds for: <this.start, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 > Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 > Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 > Integer_Variable_1) ) holds for: <this.start , this.free , return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 >= 1) ) holds for: <return, size(this.data[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 != 0) ) holds for: <return, size(this.data[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 != 0) ) holds for: <return, size(this.data[])>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 != 0) ) holds for: <this.capacity_, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 != 0) ) holds for: <this.free, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 != 0) ) holds for: <this.start, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 != 1) ) holds for: <return, size(this.data[])>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 <= Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 <= Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 <= Integer_Variable_1) ) holds for: <this.start , this.free , return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = 1) ) holds for: <this.capacity_, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = 1) ) holds for: <this.free, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = 1) ) holds for: <this.start, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = Integer_Variable_1) ) holds for: <this.start , this.free , return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 > -1) ) holds for: <return, size(this.data[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 > -1) ) holds for: <return, size(this.data[])>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 > 0) ) holds for: <return, size(this.data[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 > 0) ) holds for: <return, size(this.data[])>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 > 0) ) holds for: <this.capacity_, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 > 0) ) holds for: <this.free, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 > 0) ) holds for: <this.start, return>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 >= -1) ) holds for: <return, size(this.data[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 >= -1) ) holds for: <return, size(this.data[])>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 >= 0) ) holds for: <return, size(this.data[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 >= 0) ) holds for: <return, size(this.data[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.free, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.free, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.start, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.free, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.free, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.start, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= 1) ) holds for: <this.free, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.free, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.free, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != #(RingBuffer.data) ) holds for: <orig(this), this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.data[])-1)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.data[]))
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.capacity_)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.free)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.free, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.start, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.free, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.free, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.free, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.start, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.free, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.start, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.free, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.start, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.free, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.free, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 = #(RingBuffer.data) ) holds for: <orig(this), this.free>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 > #(RingBuffer.data) ) holds for: <orig(this), this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.data[])-1)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.data[]))
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: this.capacity_)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: this.free)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <orig(this), this.free>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.data[])-1)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.free>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.free>)
(return == false)  ==>  (size(this.data[]) one of { 2, 3 })
(return == false)  ==>  (this.capacity_ one of { 8, 10 })
(return == false)  ==>  (this.free < this.capacity_)
(return == false)  ==>  (this.free one of { 2, 3 })
(return == false)  ==>  (this.start < this.capacity_)
(return == false)  ==>  (this.start one of { 1, 2 })
(return == true)  <==>  (this.start == this.free)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != 0) ) holds for: <return, size(this.data[])>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != 0) ) holds for: <this.capacity_, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != 0) ) holds for: <this.free, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != 0) ) holds for: <this.start, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = 1) ) holds for: <this.capacity_, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = 1) ) holds for: <this.free, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = 1) ) holds for: <this.start, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 > -1) ) holds for: <return, size(this.data[])-1>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 > -1) ) holds for: <return, size(this.data[])>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 > 0) ) holds for: <return, size(this.data[])>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 > 0) ) holds for: <this.capacity_, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 > 0) ) holds for: <this.free, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 > 0) ) holds for: <this.start, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= -1) ) holds for: <return, size(this.data[])-1>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= -1) ) holds for: <return, size(this.data[])>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= 0) ) holds for: <return, size(this.data[])-1>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= 0) ) holds for: <return, size(this.data[])>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= 1) ) holds for: <return, size(this.data[])>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= 1) ) holds for: <this.capacity_, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= 1) ) holds for: <this.free, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= 1) ) holds for: <this.start, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 0) ) holds for: <this.capacity_, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 0) ) holds for: <this.free, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 0) ) holds for: <this.start, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 >= 1) ) holds for: <this.capacity_, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 >= 1) ) holds for: <this.free, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 >= 1) ) holds for: <this.start, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != 1) ) holds for: <return, size(this.data[])-1>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < -1) ) holds for: <return, size(this.data[])-1>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < -1) ) holds for: <return, size(this.data[])>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < 0) ) holds for: <return, size(this.data[])-1>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < 0) ) holds for: <return, size(this.data[])>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < 1) ) holds for: <return, size(this.data[])-1>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < 1) ) holds for: <return, size(this.data[])>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 <= 0) ) holds for: <return, size(this.data[])-1>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 <= 0) ) holds for: <return, size(this.data[])>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 = -1) ) holds for: <return, size(this.data[])-1>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 = -1) ) holds for: <return, size(this.data[])>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 > 1) ) holds for: <return, size(this.data[])-1>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 != 1) ) holds for: <this.capacity_, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 != 1) ) holds for: <this.free, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 != 1) ) holds for: <this.start, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 < 0) ) holds for: <return, size(this.data[])-1>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 < 0) ) holds for: <return, size(this.data[])>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 < 1) ) holds for: <return, size(this.data[])>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 < 1) ) holds for: <this.capacity_, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 < 1) ) holds for: <this.free, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 < 1) ) holds for: <this.start, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 <= -1) ) holds for: <return, size(this.data[])-1>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 <= -1) ) holds for: <return, size(this.data[])>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 <= 0) ) holds for: <return, size(this.data[])>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 <= 0) ) holds for: <this.capacity_, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 <= 0) ) holds for: <this.free, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 <= 0) ) holds for: <this.start, return>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = -1) ) holds for: <return, size(this.data[])-1>)
(return == true)  ==>  (FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = -1) ) holds for: <return, size(this.data[])>)
(return == true)  ==>  (size(this.data[]) one of { 1, 2, 3 })
(return == true)  ==>  (this.free one of { 1, 2, 3 })
(return == true)  ==>  (this.start one of { 1, 2, 3 })
this.free one of { 1, 2, 3 }
size(this.data[]) one of { 1, 2, 3 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.data[])-1
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 > -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 > -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 >= -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 <= 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 = -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 > 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 > 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 < 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 <= -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = -1) ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <orig(this), this.start>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 > -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 > -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 >= -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 <= 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 = -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 > 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 > 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 < 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 <= -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = -1) ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <orig(this), this.free>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 > -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 > -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 >= -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 <= 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 = -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 > 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 > 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 < 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 <= -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <orig(this), this.capacity_>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != -1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 > -1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 >= -1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 >= 1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != 1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 > 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 > 1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= -1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= 1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != -1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 > -1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 >= -1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != 0) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 > 0) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= -1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= 0) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= 1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 >= Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 <= Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 = Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 > Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 < Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 >= Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 <= Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 = Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 > Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 < Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 >= Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 <= Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 = Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 > Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 < Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
===========================================================================
examples.RingBuffer.isEmpty():::EXIT;condition="return == true"
this.start == this.free
this.start == orig(this.free)
return == true
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 > 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 >= 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 != 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 < 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 <= 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 > 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 >= 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 != 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 < 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 <= 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 > -1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 > 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= -1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= 1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < -1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < 1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 <= 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 = -1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 < 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 < 1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 <= -1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 <= 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = -1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 > -1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= -1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= 0) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != 1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < -1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < 0) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < 1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 <= 0) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 = -1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 > 1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 < 0) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 <= -1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = -1) ) holds for: <return, size(this.data[])-1>
===========================================================================
examples.RingBuffer.isEmpty():::EXIT;condition="not(return == true)"
this.start one of { 1, 2 }
this.free one of { 2, 3 }
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.free
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: this.free
this.capacity_ one of { 8, 10 }
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.capacity_
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: this.capacity_
return == false
size(this.data[]) one of { 2, 3 }
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.data[])-1
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
this.start < this.free
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
this.start < this.capacity_
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 < 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 = 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 != 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 > 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.free, this.capacity_>
this.free < this.capacity_
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 < 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 = 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 != 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 > 0) ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 = #(RingBuffer.data) ) holds for: <orig(this), this.free>
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <orig(this), this.free>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 < 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 = 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 != 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 > 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 != #(RingBuffer.data) ) holds for: <orig(this), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > #(RingBuffer.data) ) holds for: <orig(this), this.capacity_>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= -1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= 1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = -1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = 1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 < -1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 < 1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= -1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 = 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 != 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 != 1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 > -1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 > 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 >= -1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 >= 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= -1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= 0) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = -1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = 0) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 0) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 < -1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 < 1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= -1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 0) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 = 0) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 >= 1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 != 0) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 > -1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 > 0) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 >= -1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 >= 0) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 > Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 > Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 <= Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 > Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 > Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 <= Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 > Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 > Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 <= Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
===========================================================================
examples.RingBuffer.isFull():::ENTER
this.free one of { 1, 2, 3 }
this.capacity_ one of { 8, 10 }
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.capacity_
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: this.capacity_
size(this.data[]) one of { 1, 2, 3 }
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <this, this.start>
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <this, this.free>
FuzzedInvariant ( Integer_Variable_0 != #(RingBuffer.data) ) holds for: <this, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > #(RingBuffer.data) ) holds for: <this, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
this.free % this.start == 0
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
this.start < this.capacity_
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.free, this.capacity_>
this.free < this.capacity_
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
===========================================================================
examples.RingBuffer.isFull():::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.start == orig(this.start)
this.free == orig(this.free)
this.capacity_ == orig(this.capacity_)
this.free one of { 1, 2, 3 }
this.capacity_ one of { 8, 10 }
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.capacity_
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: this.capacity_
return == false
size(this.data[]) one of { 1, 2, 3 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.data[])-1
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
this.free % this.start == 0
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
this.start < this.capacity_
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 > -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 < 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 = 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 > -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 >= -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 <= 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 = -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 > 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 > 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 != 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 < 0) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 <= -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = -1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = 1) ) holds for: <this.start, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 > 0) ) holds for: <this.start, return>
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <orig(this), this.start>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.free, this.capacity_>
this.free < this.capacity_
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 > -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 < 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 = 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 > -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 >= -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 <= 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 = -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 > 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 > 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 != 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 < 0) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 <= -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = -1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = 1) ) holds for: <this.free, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 > 0) ) holds for: <this.free, return>
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <orig(this), this.free>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 > -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 < 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 = 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 > -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 >= -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 <= 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 = -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 > 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 > 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 != 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 < 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 <= -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = -1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = 1) ) holds for: <this.capacity_, return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 > 0) ) holds for: <this.capacity_, return>
FuzzedInvariant ( Integer_Variable_0 != #(RingBuffer.data) ) holds for: <orig(this), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > #(RingBuffer.data) ) holds for: <orig(this), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <orig(this), this.capacity_>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= -1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = -1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != -1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 < -1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 < 1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= -1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 = 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 > -1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 >= -1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 >= 1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 > 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= -1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= 1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 != 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 > -1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 > 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 >= -1) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 >= 0) ) holds for: <return, size(this.data[])>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 <= -1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 = -1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != -1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 0) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != 1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 < -1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 < 1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= -1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 0) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 <= 1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 = 0) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 > -1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 >= -1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 >= 1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= -1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= 0) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 > -1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 >= -1) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 >= 0) ) holds for: <return, size(this.data[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 > Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 > Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 >= Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 <= Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 = Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 > Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 < Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 <= Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = Integer_Variable_1) ) holds for: <this.start , this.free , return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 > Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 > Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 >= Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 <= Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 = Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 > Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 < Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 <= Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = Integer_Variable_1) ) holds for: <this.start , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 != Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 > Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) iff (Integer_Variable_0 >= Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 != Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 > Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) implies (Integer_Variable_0 >= Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 != Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 < Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 <= Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 = Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 > Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) or (Integer_Variable_0 >= Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 < Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 <= Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
FuzzedInvariant ( (Boolean_Variable_0) xor (Integer_Variable_0 = Integer_Variable_1) ) holds for: <this.free , this.capacity_ , return>
===========================================================================
examples.RingBuffer.isFull():::EXIT;condition="not(return == true)"
===========================================================================
examples.RingBuffer.item():::ENTER
this.start one of { 1, 2 }
this.free one of { 2, 3 }
this.capacity_ == 8
size(this.data[]) one of { 2, 3 }
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <this, this.start>
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <this, this.free>
FuzzedInvariant ( Integer_Variable_0 = #(RingBuffer.data) ) holds for: <this, this.free>
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <this, this.free>
FuzzedInvariant ( Integer_Variable_0 != #(RingBuffer.data) ) holds for: <this, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > #(RingBuffer.data) ) holds for: <this, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
this.start < this.free
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
this.start < this.capacity_
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.free, this.capacity_>
this.free < this.capacity_
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
===========================================================================
examples.RingBuffer.item():::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.start == orig(this.start)
this.free == orig(this.free)
this.capacity_ == orig(this.capacity_)
this.start one of { 1, 2 }
this.free one of { 2, 3 }
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.free
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: this.free
this.capacity_ == 8
return.getClass().getName() == java.lang.String.class
size(this.data[]) one of { 2, 3 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.data[])-1
return.getClass().getName() in this.data[].getClass().getName()
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
this.start < this.free
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
this.start < this.capacity_
FuzzedInvariant ( Integer_Variable_0 != #(RingBuffer.data) ) holds for: <orig(this), this.start>
FuzzedInvariant ( Integer_Variable_0 < #(RingBuffer.data) ) holds for: <orig(this), this.start>
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <orig(this), this.start>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.free, this.capacity_>
this.free < this.capacity_
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <orig(this), this.free>
FuzzedInvariant ( Integer_Variable_0 = #(RingBuffer.data) ) holds for: <orig(this), this.free>
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <orig(this), this.free>
FuzzedInvariant ( Integer_Variable_0 != #(RingBuffer.data) ) holds for: <orig(this), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > #(RingBuffer.data) ) holds for: <orig(this), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <orig(this), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
===========================================================================
examples.RingBuffer.remove():::ENTER
this.start one of { 1, 2 }
this.free one of { 2, 3 }
this.capacity_ == 8
size(this.data[]) one of { 2, 3 }
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <this, this.free>
FuzzedInvariant ( Integer_Variable_0 = #(RingBuffer.data) ) holds for: <this, this.free>
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <this, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= 1) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 1 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.free, this.start>
this.start < this.free
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= 1) ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 1 ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.capacity_, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.capacity_, this.start>
this.start < this.capacity_
this.free < this.capacity_
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , this.start>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.free , this.capacity_ , this.start>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.free , this.capacity_ , this.start>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , this.start>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , this.start>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.free , this.capacity_ , this.start>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , this.start>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.free , this.capacity_ , this.start>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , this.start>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.free , this.capacity_ , this.start>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , this.start>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.free , this.capacity_ , this.start>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.free , this.capacity_ , this.start>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , this.start>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , this.start>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , this.start>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.free , this.capacity_ , this.start>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.free , this.capacity_ , this.start>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.free , this.capacity_ , this.start>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.free , this.capacity_ , this.start>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.free , this.capacity_ , this.start>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.free , this.capacity_ , this.start>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.free , this.capacity_ , this.start>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.free , this.capacity_ , this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.free , this.capacity_ , this.start>
===========================================================================
examples.RingBuffer.remove():::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.free == orig(this.free)
this.capacity_ == orig(this.capacity_)
this.start one of { 2, 3 }
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.start
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: this.start
this.free one of { 2, 3 }
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.free
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: this.free
this.capacity_ == 8
size(this.data[]) one of { 2, 3 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.data[])-1
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.start, this.free>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.free>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
this.start < this.capacity_
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <orig(this), this.start>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= 1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 0 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / 1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - -1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.start, orig(this.start)>
this.start > orig(this.start)
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.free, this.capacity_>
this.free < this.capacity_
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <orig(this), this.free>
FuzzedInvariant ( Integer_Variable_0 = #(RingBuffer.data) ) holds for: <orig(this), this.free>
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <orig(this), this.free>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= 1) ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 1 ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 0 ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 1 ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / 1 ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 1 ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - -1 ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.free, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.free, orig(this.start)>
this.free > orig(this.start)
FuzzedInvariant ( Integer_Variable_0 != #(RingBuffer.data) ) holds for: <orig(this), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > #(RingBuffer.data) ) holds for: <orig(this), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <orig(this), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= 1) ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 1 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + 1 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 0 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 1 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / 1 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 1 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - -1 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.capacity_, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.capacity_, orig(this.start)>
this.capacity_ > orig(this.start)
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.free , this.capacity_ , orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.free , this.capacity_ , orig(this.start)>
===========================================================================
examples.RingBuffer.wipeOut():::ENTER
this.free one of { 1, 2, 3 }
this.capacity_ one of { 8, 10 }
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.capacity_
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: this.capacity_
size(this.data[]) one of { 1, 2, 3 }
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <this, this.free>
FuzzedInvariant ( Integer_Variable_0 = #(RingBuffer.data) ) holds for: <this, this.free>
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <this, this.free>
FuzzedInvariant ( Integer_Variable_0 != #(RingBuffer.data) ) holds for: <this, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > #(RingBuffer.data) ) holds for: <this, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= 1) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 1 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.free, this.start>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.free, this.start>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
this.start < this.capacity_
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.free, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.free, this.capacity_>
this.free < this.capacity_
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.free , this.start , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.free , this.start , this.capacity_>
===========================================================================
examples.RingBuffer.wipeOut():::EXIT
this.data == orig(this.data)
this.data[] == orig(this.data[])
this.start == this.free
this.start == orig(this.free)
this.capacity_ == orig(this.capacity_)
this.capacity_ one of { 8, 10 }
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.capacity_
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: this.capacity_
size(this.data[]) one of { 1, 2, 3 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.data[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.data[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.data[])-1
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>
this.start < this.capacity_
FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <orig(this), this.start>
FuzzedInvariant ( Integer_Variable_0 = #(RingBuffer.data) ) holds for: <orig(this), this.start>
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <orig(this), this.start>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= 1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, orig(this.start)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.start, orig(this.start)>
this.start >= orig(this.start)
FuzzedInvariant ( Integer_Variable_0 != #(RingBuffer.data) ) holds for: <orig(this), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > #(RingBuffer.data) ) holds for: <orig(this), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <orig(this), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 <= 1) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < -1) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= -1) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.start), this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.start), this.capacity_>
this.capacity_ > orig(this.start)
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , orig(this.start) , this.capacity_>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , orig(this.start) , this.capacity_>
Exiting Daikon.

# Filtering step

- Mutation is: 1:LVR:0:POS:examples.RingBuffer@<init>(int):47:0 |==> 1
Checking invs on mutant: experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m1.dtrace.gz
Loaded invs from previous step: 0
                                                                               [3:04:50 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m1-objects.xml
Total loaded objects: 2500
[3:04:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:04:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:04:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:04:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:04:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:04:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:04:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:04:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:05:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:06:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe
No return from procedure observed 94 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.RingBuffer.RingBuffer(int) : 24 invocations
  examples.RingBuffer.item() : 33 invocations
  examples.RingBuffer.remove() : 37 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

RingBufferTesterDriver.inv.gz: 0 errors found in 4,232,257 samples (0.00%)
RingBufferTesterDriver.inv.gz: 0 false positives, out of 17094, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 0
Saving - Total: 0
Saving mutants results file

- Mutation is: 10:AOR:+(int,int):-(int,int):examples.RingBuffer@<init>(int):49:n + 1 |==> n - 1
Checking invs on mutant: experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m10.dtrace.gz
Loaded invs from previous step: 0
                                                                               [3:07:17 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m10-objects.xml
Total loaded objects: 2529
[3:07:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:07:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:08:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe
No return from procedure observed 87 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.RingBuffer.RingBuffer(int) : 14 invocations
  examples.RingBuffer.item() : 33 invocations
  examples.RingBuffer.remove() : 40 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

RingBufferTesterDriver.inv.gz: 0 errors found in 4,250,407 samples (0.00%)
RingBufferTesterDriver.inv.gz: 0 false positives, out of 17094, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 0
Saving - Total: 0
Saving mutants results file

- Mutation is: 11:AOR:+(int,int):/(int,int):examples.RingBuffer@<init>(int):49:n + 1 |==> n / 1
Checking invs on mutant: experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m11.dtrace.gz
Loaded invs from previous step: 0
                                                                               [3:09:52 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m11-objects.xml
Total loaded objects: 2529
[3:09:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:09:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:10:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:11:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe
No return from procedure observed 87 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.RingBuffer.RingBuffer(int) : 14 invocations
  examples.RingBuffer.item() : 33 invocations
  examples.RingBuffer.remove() : 40 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

RingBufferTesterDriver.inv.gz: 0 errors found in 4,250,407 samples (0.00%)
RingBufferTesterDriver.inv.gz: 0 false positives, out of 17094, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 0
Saving - Total: 0
Saving mutants results file

- Mutation is: 12:STD:<ASSIGN>:<NO-OP>:examples.RingBuffer@<init>(int):49:data = new ArrayList<G>(n + 1) |==> <NO-OP>
Checking invs on mutant: experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m12.dtrace.gz
Loaded invs from previous step: 0
                                                                               [3:12:19 PM]:                                                                  
No return from procedure observed 286 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.RingBuffer.RingBuffer(int) : 286 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

RingBufferTesterDriver.inv.gz: 0 errors found in 0 samples (NaN%)
RingBufferTesterDriver.inv.gz: 0 false positives, out of 0, which is NaN%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 0
Saving - Total: 0
Saving mutants results file

- Mutation is: 13:STD:<CALL>:<NO-OP>:examples.RingBuffer@<init>(int):50:data.add(null) |==> <NO-OP>
Checking invs on mutant: experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m13.dtrace.gz
Loaded invs from previous step: 0
                                                                               [3:12:20 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m13-objects.xml
Total loaded objects: 2500
[3:12:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:12:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:13:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe
No return from procedure observed 97 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.RingBuffer.RingBuffer(int) : 14 invocations
  examples.RingBuffer.item() : 44 invocations
  examples.RingBuffer.remove() : 39 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

RingBufferTesterDriver.inv.gz: 109,534 errors found in 4,171,800 samples (2.63%)
RingBufferTesterDriver.inv.gz: 477 false positives, out of 17094, which is 2.79%.
Preserving 104 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 0
Saving - Total: 104
Saving mutants results file

- Mutation is: 14:LVR:POS:0:examples.RingBuffer@<init>(int):51:1 |==> 0
Checking invs on mutant: experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m14.dtrace.gz
Loaded invs from previous step: 104
                                                                               [3:14:52 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m14-objects.xml
Total loaded objects: 2572
[3:14:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:14:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:15:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:16:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe
No return from procedure observed 28 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.RingBuffer.RingBuffer(int) : 14 invocations
  examples.RingBuffer.remove() : 8 invocations
  examples.RingBuffer.item() : 6 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

RingBufferTesterDriver.inv.gz: 425,763 errors found in 3,768,580 samples (11.30%)
RingBufferTesterDriver.inv.gz: 2568 false positives, out of 17094, which is 15.02%.
Preserving 620 new invariants to file /specfuzzer/invs_file.xml
                                                                               Already preserved invariants: 104
Saving - Total: 702
Saving mutants results file

- Mutation is: 15:LVR:POS:NEG:examples.RingBuffer@<init>(int):51:1 |==> -1
Checking invs on mutant: experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m15.dtrace.gz
Loaded invs from previous step: 702
                                                                               [3:17:11 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m15-objects.xml
Total loaded objects: 2497
[3:17:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:17:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:18:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe
No return from procedure observed 73 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.RingBuffer.RingBuffer(int) : 14 invocations
  examples.RingBuffer.item() : 52 invocations
  examples.RingBuffer.remove() : 7 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

RingBufferTesterDriver.inv.gz: 424,811 errors found in 3,583,933 samples (11.85%)
RingBufferTesterDriver.inv.gz: 3599 false positives, out of 17094, which is 21.05%.
Preserving 778 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 702
Saving - Total: 933
Saving mutants results file

- Mutation is: 16:STD:<ASSIGN>:<NO-OP>:examples.RingBuffer@<init>(int):51:start = 1 |==> <NO-OP>
Checking invs on mutant: experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m16.dtrace.gz
Loaded invs from previous step: 933
                                                                               [3:19:28 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m16-objects.xml
Total loaded objects: 2572
[3:19:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:19:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:20:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe
No return from procedure observed 28 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.RingBuffer.RingBuffer(int) : 14 invocations
  examples.RingBuffer.remove() : 8 invocations
  examples.RingBuffer.item() : 6 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

RingBufferTesterDriver.inv.gz: 425,763 errors found in 3,768,580 samples (11.30%)
RingBufferTesterDriver.inv.gz: 2568 false positives, out of 17094, which is 15.02%.
Preserving 620 new invariants to file /specfuzzer/invs_file.xml
                                                                               Already preserved invariants: 933
Saving - Total: 933
Saving mutants results file

- Mutation is: 17:LVR:POS:0:examples.RingBuffer@<init>(int):52:1 |==> 0
Checking invs on mutant: experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m17.dtrace.gz
Loaded invs from previous step: 933
                                                                               [3:21:51 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m17-objects.xml
Total loaded objects: 2528
[3:21:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:21:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:22:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:23:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe
No return from procedure observed 74 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.RingBuffer.RingBuffer(int) : 14 invocations
  examples.RingBuffer.item() : 43 invocations
  examples.RingBuffer.remove() : 17 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

RingBufferTesterDriver.inv.gz: 541,577 errors found in 4,195,199 samples (12.91%)
RingBufferTesterDriver.inv.gz: 4725 false positives, out of 17094, which is 27.64%.
Preserving 1120 new invariants to file /specfuzzer/invs_file.xml
                                                                               Already preserved invariants: 933
Saving - Total: 1475
Saving mutants results file

- Mutation is: 18:LVR:POS:NEG:examples.RingBuffer@<init>(int):52:1 |==> -1
Checking invs on mutant: experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m18.dtrace.gz
Loaded invs from previous step: 1475
                                                                               [3:24:33 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m18-objects.xml
Total loaded objects: 2547
[3:24:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:24:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:25:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:26:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe
No return from procedure observed 66 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.RingBuffer.RingBuffer(int) : 14 invocations
  examples.RingBuffer.item() : 43 invocations
  examples.RingBuffer.remove() : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

RingBufferTesterDriver.inv.gz: 585,843 errors found in 4,277,628 samples (13.70%)
RingBufferTesterDriver.inv.gz: 6054 false positives, out of 17094, which is 35.42%.
Preserving 1307 new invariants to file /specfuzzer/invs_file.xml
                                                                               Already preserved invariants: 1475
Saving - Total: 1655
Saving mutants results file

- Mutation is: 19:STD:<ASSIGN>:<NO-OP>:examples.RingBuffer@<init>(int):52:free = 1 |==> <NO-OP>
Checking invs on mutant: experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m19.dtrace.gz
Loaded invs from previous step: 1655
                                                                               [3:27:25 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m19-objects.xml
Total loaded objects: 2528
[3:27:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:27:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:28:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:29:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe
No return from procedure observed 74 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.RingBuffer.RingBuffer(int) : 14 invocations
  examples.RingBuffer.item() : 43 invocations
  examples.RingBuffer.remove() : 17 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

RingBufferTesterDriver.inv.gz: 541,583 errors found in 4,195,199 samples (12.91%)
RingBufferTesterDriver.inv.gz: 4725 false positives, out of 17094, which is 27.64%.
Preserving 1120 new invariants to file /specfuzzer/invs_file.xml
                                                                               Already preserved invariants: 1655
Saving - Total: 1655
Saving mutants results file

- Mutation is: 2:LVR:0:NEG:examples.RingBuffer@<init>(int):47:0 |==> -1
Checking invs on mutant: experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m2.dtrace.gz
Loaded invs from previous step: 1655
                                                                               [3:30:17 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m2-objects.xml
Total loaded objects: 2533
[3:30:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:30:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:30:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:30:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:30:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:30:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:30:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:30:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:30:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:30:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:30:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:30:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:30:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:30:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:30:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:30:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:30:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:30:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:30:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:30:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:30:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:30:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:30:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:30:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:30:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:30:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:30:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:31:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:32:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe
No return from procedure observed 83 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.RingBuffer.RingBuffer(int) : 10 invocations
  examples.RingBuffer.item() : 33 invocations
  examples.RingBuffer.remove() : 40 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

RingBufferTesterDriver.inv.gz: 544 errors found in 4,252,327 samples (0.01%)
RingBufferTesterDriver.inv.gz: 136 false positives, out of 17094, which is 0.80%.
Preserving 76 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 1655
Saving - Total: 1699
Saving mutants results file

- Mutation is: 20:STD:<ASSIGN>:<NO-OP>:examples.RingBuffer@<init>(int):53:capacity_ = n |==> <NO-OP>
Checking invs on mutant: experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m20.dtrace.gz
Loaded invs from previous step: 1699
                                                                               [3:33:13 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m20-objects.xml
Total loaded objects: 2278
[3:33:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:33:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:34:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:35:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:35:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:35:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:35:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:35:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:35:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:35:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe
No return from procedure observed 158 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.RingBuffer.RingBuffer(int) : 14 invocations
  examples.RingBuffer.item() : 32 invocations
  examples.RingBuffer.remove() : 38 invocations
  examples.RingBuffer.extend(java.lang.Object) : 74 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

RingBufferTesterDriver.inv.gz: 859,197 errors found in 3,216,810 samples (26.71%)
RingBufferTesterDriver.inv.gz: 2931 false positives, out of 10845, which is 27.03%.
Preserving 695 new invariants to file /specfuzzer/invs_file.xml
                                                                               Already preserved invariants: 1699
Saving - Total: 2031
Saving mutants results file

- Mutation is: 21:COR:isEmpty():TRUE:examples.RingBuffer@item():69:isEmpty() |==> false
Checking invs on mutant: experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m21.dtrace.gz
Loaded invs from previous step: 2031
                                                                               [3:35:42 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m21-objects.xml
Total loaded objects: 2519
[3:35:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:35:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:35:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:35:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:35:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:35:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:35:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:35:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:35:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:35:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:35:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:35:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:35:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:35:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:35:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:35:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:36:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:37:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:38:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:38:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:38:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:38:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:38:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:38:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:38:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:38:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:38:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:38:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe
No return from procedure observed 87 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.RingBuffer.RingBuffer(int) : 14 invocations
  examples.RingBuffer.item() : 33 invocations
  examples.RingBuffer.remove() : 40 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

RingBufferTesterDriver.inv.gz: 0 errors found in 4,160,391 samples (0.00%)
RingBufferTesterDriver.inv.gz: 0 false positives, out of 17094, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 2031
Saving - Total: 2031
Saving mutants results file

- Mutation is: 22:COR:isEmpty():FALSE:examples.RingBuffer@item():69:isEmpty() |==> true
Checking invs on mutant: experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m22.dtrace.gz
Loaded invs from previous step: 2031
                                                                               [3:38:43 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m22-objects.xml
Total loaded objects: 2466
[3:38:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:38:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:38:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:38:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:38:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:38:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:38:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:38:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:38:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:38:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:38:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:38:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:38:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:38:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:38:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:38:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:39:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:40:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:41:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:41:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe
No return from procedure observed 107 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.RingBuffer.RingBuffer(int) : 14 invocations
  examples.RingBuffer.item() : 54 invocations
  examples.RingBuffer.remove() : 39 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

RingBufferTesterDriver.inv.gz: 0 errors found in 4,010,779 samples (0.00%)
RingBufferTesterDriver.inv.gz: 0 false positives, out of 15619, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 2031
Saving - Total: 2031
Saving mutants results file

- Mutation is: 23:EVR:<METHOD_INVOCATION(G)>:<DEFAULT>:examples.RingBuffer@item():71:data.get(start) |==> null
Checking invs on mutant: experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m23.dtrace.gz
Loaded invs from previous step: 2031
                                                                               [3:41:35 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m23-objects.xml
Total loaded objects: 2529
[3:41:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:41:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:41:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:41:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:41:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:41:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:41:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:41:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:41:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:41:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:41:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:41:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:41:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:41:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:41:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:41:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:41:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:41:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:41:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:41:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:41:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:41:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:41:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:41:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:42:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:43:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:44:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:44:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:44:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:44:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:44:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:44:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:44:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe
No return from procedure observed 87 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.RingBuffer.RingBuffer(int) : 14 invocations
  examples.RingBuffer.item() : 33 invocations
  examples.RingBuffer.remove() : 40 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

RingBufferTesterDriver.inv.gz: 0 errors found in 4,250,305 samples (0.00%)
RingBufferTesterDriver.inv.gz: 0 false positives, out of 17088, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 2031
Saving - Total: 2031
Saving mutants results file

- Mutation is: 24:LVR:TRUE:FALSE:examples.RingBuffer@item():76:true |==> false
Checking invs on mutant: experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m24.dtrace.gz
Loaded invs from previous step: 2031
                                                                               [3:44:36 PM]:                                                                  Saving mutants results file

- Mutation is: 25:EVR:<IDENTIFIER(java.lang.Object)>:<DEFAULT>:examples.RingBuffer@item():77:result |==> null
Checking invs on mutant: experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m25.dtrace.gz
Loaded invs from previous step: 2031
                                                                               [3:45:09 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m25-objects.xml
Total loaded objects: 2529
[3:45:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:45:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:46:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:47:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe
No return from procedure observed 87 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.RingBuffer.RingBuffer(int) : 14 invocations
  examples.RingBuffer.item() : 33 invocations
  examples.RingBuffer.remove() : 40 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

RingBufferTesterDriver.inv.gz: 0 errors found in 4,250,305 samples (0.00%)
RingBufferTesterDriver.inv.gz: 0 false positives, out of 17088, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 2031
Saving - Total: 2031
Saving mutants results file

- Mutation is: 3:ROR:>(int,int):!=(int,int):examples.RingBuffer@<init>(int):47:n > 0 |==> n != 0
Checking invs on mutant: experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m3.dtrace.gz
Loaded invs from previous step: 2031
                                                                               [3:48:11 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m3-objects.xml
Total loaded objects: 2532
[3:48:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:48:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:49:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:50:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe
No return from procedure observed 84 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.RingBuffer.RingBuffer(int) : 11 invocations
  examples.RingBuffer.item() : 33 invocations
  examples.RingBuffer.remove() : 40 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

RingBufferTesterDriver.inv.gz: 354 errors found in 4,251,847 samples (0.01%)
RingBufferTesterDriver.inv.gz: 118 false positives, out of 17094, which is 0.69%.
Preserving 65 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 2031
Saving - Total: 2047
Saving mutants results file

- Mutation is: 4:ROR:>(int,int):>=(int,int):examples.RingBuffer@<init>(int):47:n > 0 |==> n >= 0
Checking invs on mutant: experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m4.dtrace.gz
Loaded invs from previous step: 2047
                                                                               [3:51:10 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m4-objects.xml
Total loaded objects: 2533
[3:51:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:51:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:52:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:53:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe
No return from procedure observed 83 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.RingBuffer.RingBuffer(int) : 10 invocations
  examples.RingBuffer.item() : 33 invocations
  examples.RingBuffer.remove() : 40 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

RingBufferTesterDriver.inv.gz: 544 errors found in 4,252,327 samples (0.01%)
RingBufferTesterDriver.inv.gz: 136 false positives, out of 17094, which is 0.80%.
Preserving 76 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 2047
Saving - Total: 2047
Saving mutants results file

- Mutation is: 5:ROR:>(int,int):FALSE(int,int):examples.RingBuffer@<init>(int):47:n > 0 |==> false
Checking invs on mutant: experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m5.dtrace.gz
Loaded invs from previous step: 2047
                                                                               [3:54:08 PM]:                                                                  
No return from procedure observed 286 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.RingBuffer.RingBuffer(int) : 286 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

RingBufferTesterDriver.inv.gz: 0 errors found in 0 samples (NaN%)
RingBufferTesterDriver.inv.gz: 0 false positives, out of 0, which is NaN%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 2047
Saving - Total: 2047
Saving mutants results file

- Mutation is: 6:LVR:POS:0:examples.RingBuffer@<init>(int):49:1 |==> 0
Checking invs on mutant: experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m6.dtrace.gz
Loaded invs from previous step: 2047
                                                                               [3:54:42 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m6-objects.xml
Total loaded objects: 2529
[3:54:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:54:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:54:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:54:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:54:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:54:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:54:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:54:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:54:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:54:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:54:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:54:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:54:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:54:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:54:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:54:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:54:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:55:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:56:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe
No return from procedure observed 87 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.RingBuffer.RingBuffer(int) : 14 invocations
  examples.RingBuffer.item() : 33 invocations
  examples.RingBuffer.remove() : 40 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

RingBufferTesterDriver.inv.gz: 0 errors found in 4,250,407 samples (0.00%)
RingBufferTesterDriver.inv.gz: 0 false positives, out of 17094, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 2047
Saving - Total: 2047
Saving mutants results file

- Mutation is: 7:LVR:POS:NEG:examples.RingBuffer@<init>(int):49:1 |==> -1
Checking invs on mutant: experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m7.dtrace.gz
Loaded invs from previous step: 2047
                                                                               [3:57:42 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m7-objects.xml
Total loaded objects: 2529
[3:57:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:57:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:58:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[3:59:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe
No return from procedure observed 87 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.RingBuffer.RingBuffer(int) : 14 invocations
  examples.RingBuffer.item() : 33 invocations
  examples.RingBuffer.remove() : 40 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

RingBufferTesterDriver.inv.gz: 0 errors found in 4,250,407 samples (0.00%)
RingBufferTesterDriver.inv.gz: 0 false positives, out of 17094, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 2047
Saving - Total: 2047
Saving mutants results file

- Mutation is: 8:AOR:+(int,int):%(int,int):examples.RingBuffer@<init>(int):49:n + 1 |==> n % 1
Checking invs on mutant: experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m8.dtrace.gz
Loaded invs from previous step: 2047
                                                                               [4:00:41 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m8-objects.xml
Total loaded objects: 2529
[4:00:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:00:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:01:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:02:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:03:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:03:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:03:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:03:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:03:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:03:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:03:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:03:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:03:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:03:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe
No return from procedure observed 87 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.RingBuffer.RingBuffer(int) : 14 invocations
  examples.RingBuffer.item() : 33 invocations
  examples.RingBuffer.remove() : 40 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

RingBufferTesterDriver.inv.gz: 0 errors found in 4,250,407 samples (0.00%)
RingBufferTesterDriver.inv.gz: 0 false positives, out of 17094, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 2047
Saving - Total: 2047
Saving mutants results file

- Mutation is: 9:AOR:+(int,int):*(int,int):examples.RingBuffer@<init>(int):49:n + 1 |==> n RingBufferTesterDriver.inv.gz base-invs-by-mutants.csv base_invs_file.xml experiments hs_err_pid1983241.log hs_err_pid51463.log hs_err_pid53479.log invs-by-mutants.csv invs.csv invs_file.xml lib literals mutants scripts testers 1
Checking invs on mutant: experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m9.dtrace.gz
Loaded invs from previous step: 2047
                                                                               [4:03:42 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m9-objects.xml
Total loaded objects: 2529
[4:03:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:03:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:03:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:03:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:03:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:03:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:03:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:03:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:03:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:03:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:03:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:03:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:03:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:03:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:03:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:03:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:03:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:04:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:04 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:09 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:10 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:11 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:12 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:13 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:14 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:15 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:16 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:17 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:18 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:19 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:20 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:21 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:22 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:23 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:24 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:25 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:26 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:27 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:28 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:29 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:30 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:31 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:32 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:33 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:34 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:35 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:36 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:37 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:38 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:39 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:40 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:41 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:42 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:43 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:44 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:45 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:46 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:47 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:48 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:49 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:50 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:51 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:52 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:53 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:54 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:55 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:56 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:57 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:58 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:05:59 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:06:00 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:06:01 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:06:02 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:06:03 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:06:05 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:06:06 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:06:07 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe[4:06:08 PM]: Reading experiments/ringbuffer_item/setup-files/mutants/RingBuffe
No return from procedure observed 87 times.  Unmatched entries are ignored!
Unterminated calls:
  examples.RingBuffer.RingBuffer(int) : 14 invocations
  examples.RingBuffer.item() : 33 invocations
  examples.RingBuffer.remove() : 40 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

RingBufferTesterDriver.inv.gz: 0 errors found in 4,250,407 samples (0.00%)
RingBufferTesterDriver.inv.gz: 0 false positives, out of 17094, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 2047
Saving - Total: 2047
Saving mutants results file

# Filtering step took minutes: 61
# Mutation killing ability results saved in: experiments/ringbuffer_item/output/RingBuffer-item-specfuzzer-1-invs-by-mutants.csv

# Writing assertions to file: experiments/ringbuffer_item/output/RingBuffer-item-specfuzzer-1.assertions

# Filtering specs with buckets
> Mutant filter from file: experiments/ringbuffer_item/output/RingBuffer-item-specfuzzer-1-invs-by-mutants.csv
Unique mutants: 11
Loading assertions from: experiments/ringbuffer_item/output/RingBuffer-item-specfuzzer-1.assertions
Specs killing mutants: 206

> Minimizing by exploring the bit vector of each spec
Building bit vectors of size: 11
Building buckets
=====================================
Buckets: 33
Vector: [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m13.dtrace.gz
Specs:
	FuzzedInvariant ( some n : RingBuffer.data : n = null ) holds for: this l:  71  - Fails:  2386 Quality:  2386
	FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <orig(this), this.free> l:  95  - Fails:  2047 Quality:  2048
	FuzzedInvariant ( Integer_Variable_0 != #(RingBuffer.data) ) holds for: <orig(this), this.start> l:  96  - Fails:  101 Quality:  102
	FuzzedInvariant ( Integer_Variable_0 < #(RingBuffer.data) ) holds for: <orig(this), this.start> l:  95  - Fails:  101 Quality:  102
Picked:
	FuzzedInvariant ( some n : RingBuffer.data : n = null ) holds for: this

Vector: [1. 0. 0. 0. 1. 1. 1. 0. 0. 0. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m13.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m17.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m18.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m19.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <orig(this), this.start> l:  96  - Fails:  2081 Quality:  2082
	FuzzedInvariant ( Integer_Variable_0 = #(RingBuffer.data) ) holds for: <orig(this), this.free> l:  94  - Fails:  2064 Quality:  2065
Picked:
	FuzzedInvariant ( Integer_Variable_0 <= #(RingBuffer.data) ) holds for: <orig(this), this.start>

Vector: [0. 1. 1. 1. 1. 1. 1. 0. 0. 1. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m14.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m15.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m16.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m17.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m18.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m19.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m3.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_> l:  114  - Fails:  16956 Quality:  16958
Picked:
	FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_>

Vector: [0. 1. 1. 1. 1. 1. 1. 0. 0. 0. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m14.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m15.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m16.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m17.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m18.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m19.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.free> l:  108  - Fails:  23578 Quality:  23580
	FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.start l:  64  - Fails:  18151 Quality:  18152
	FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.start l:  65  - Fails:  18151 Quality:  18152
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_> l:  103  - Fails:  16950 Quality:  16952
	FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_> l:  119  - Fails:  16950 Quality:  16952
	FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.capacity_> l:  113  - Fails:  16791 Quality:  16793
	FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free> l:  109  - Fails:  15507 Quality:  15509
	this.start == 1 || this.start == 2 || this.start == 3 l:  53  - Fails:  13287 Quality:  13287
	FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.start l:  65  - Fails:  12356 Quality:  12357
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.start, this.free> l:  98  - Fails:  11807 Quality:  11809
	FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.start, this.free> l:  114  - Fails:  11624 Quality:  11626
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.capacity_> l:  104  - Fails:  11542 Quality:  11544
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_> l:  104  - Fails:  11542 Quality:  11544
	FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.free> l:  114  - Fails:  9240 Quality:  9242
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.start, this.free> l:  99  - Fails:  8072 Quality:  8074
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.start, this.free> l:  99  - Fails:  8072 Quality:  8074
	FuzzedInvariant ( (Integer_Variable_0 = 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_> l:  143  - Fails:  3041 Quality:  3044
	FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.start, this.free> l:  108  - Fails:  2567 Quality:  2569
	FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.start, this.free> l:  111  - Fails:  1200 Quality:  1202
	FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: this.free l:  63  - Fails:  1034 Quality:  1035
	FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 <= 1) ) holds for: <this.free, this.capacity_> l:  112  - Fails:  998 Quality:  1000
	FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.free l:  64  - Fails:  648 Quality:  649
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.start, this.free> l:  125  - Fails:  638 Quality:  640
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.free, this.capacity_> l:  129  - Fails:  36 Quality:  38
	FuzzedInvariant ( Integer_Variable_0 != #(RingBuffer.data) ) holds for: <orig(this), this.capacity_> l:  100  - Fails:  17 Quality:  18
Picked:
	FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.free>

Vector: [0. 1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m14.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m15.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m16.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m17.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m18.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m19.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m2.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m20.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m3.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m4.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_> l:  113  - Fails:  22193 Quality:  22195
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.capacity_> l:  130  - Fails:  5420 Quality:  5422
Picked:
	FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>

Vector: [0. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m14.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m15.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m16.dtrace.gz
Specs:
	this.start == 1 l:  15  - Fails:  1632 Quality:  1632
	FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_> l:  119  - Fails:  159 Quality:  161
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_> l:  104  - Fails:  108 Quality:  110
	FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_> l:  148  - Fails:  99 Quality:  102
	FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_> l:  144  - Fails:  68 Quality:  71
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_> l:  160  - Fails:  18 Quality:  21
	FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_> l:  143  - Fails:  18 Quality:  21
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_> l:  131  - Fails:  18 Quality:  20
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.free, this.capacity_> l:  99  - Fails:  18 Quality:  20
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.free, this.capacity_> l:  103  - Fails:  18 Quality:  20
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.free, this.capacity_> l:  130  - Fails:  18 Quality:  20
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.free, this.capacity_> l:  103  - Fails:  18 Quality:  20
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.free, this.capacity_> l:  103  - Fails:  18 Quality:  20
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.free, this.capacity_> l:  130  - Fails:  18 Quality:  20
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.free, this.capacity_> l:  130  - Fails:  18 Quality:  20
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 != 1) ) holds for: <this.start, this.capacity_> l:  130  - Fails:  18 Quality:  20
Picked:
	this.start == 1

Vector: [0. 1. 1. 1. 1. 1. 1. 0. 1. 0. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m14.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m15.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m16.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m17.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m18.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m19.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m20.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_> l:  145  - Fails:  19080 Quality:  19083
	FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_> l:  143  - Fails:  19080 Quality:  19083
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_> l:  133  - Fails:  5222 Quality:  5225
	FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_> l:  145  - Fails:  5216 Quality:  5219
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_> l:  134  - Fails:  3920 Quality:  3923
	FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.start, this.capacity_> l:  116  - Fails:  2643 Quality:  2645
	FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 <= 1) ) holds for: <this.free, this.capacity_> l:  115  - Fails:  2058 Quality:  2060
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.start, this.capacity_> l:  104  - Fails:  1125 Quality:  1127
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.start, this.capacity_> l:  103  - Fails:  1125 Quality:  1127
	FuzzedInvariant ( Integer_Variable_0 > #(RingBuffer.data) ) holds for: <orig(this), this.capacity_> l:  99  - Fails:  380 Quality:  381
Picked:
	FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>

Vector: [0. 1. 0. 1. 1. 1. 1. 0. 0. 0. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m14.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m16.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m17.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m18.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m19.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.free> l:  125  - Fails:  310 Quality:  312
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_> l:  134  - Fails:  122 Quality:  125
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_> l:  131  - Fails:  30 Quality:  32
Picked:
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.start, this.free>

Vector: [0. 1. 1. 1. 0. 0. 0. 0. 1. 0. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m14.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m15.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m16.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m20.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_> l:  133  - Fails:  4566 Quality:  4569
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_> l:  134  - Fails:  4535 Quality:  4538
	this.free < this.capacity_ l:  26  - Fails:  976 Quality:  976
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_> l:  131  - Fails:  967 Quality:  969
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.free, this.capacity_> l:  102  - Fails:  967 Quality:  969
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.free, this.capacity_> l:  131  - Fails:  967 Quality:  969
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.free, this.capacity_> l:  98  - Fails:  967 Quality:  969
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_> l:  130  - Fails:  967 Quality:  969
Picked:
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>

Vector: [0. 1. 1. 1. 0. 1. 0. 0. 1. 0. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m14.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m15.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m16.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m18.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m20.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_> l:  134  - Fails:  9177 Quality:  9180
Picked:
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>

Vector: [0. 1. 1. 1. 1. 0. 1. 0. 1. 0. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m14.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m15.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m16.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m17.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m19.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m20.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.free, this.capacity_> l:  102  - Fails:  979 Quality:  981
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + -1 ) holds for: <this.free, this.capacity_> l:  103  - Fails:  979 Quality:  981
Picked:
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.free, this.capacity_>

Vector: [0. 1. 0. 1. 0. 0. 0. 0. 0. 0. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m14.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m16.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_> l:  143  - Fails:  12 Quality:  15
	FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_> l:  148  - Fails:  12 Quality:  15
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_> l:  132  - Fails:  12 Quality:  14
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_> l:  104  - Fails:  12 Quality:  14
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.start, this.capacity_> l:  131  - Fails:  12 Quality:  14
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.start, this.capacity_> l:  100  - Fails:  12 Quality:  14
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.start, this.capacity_> l:  131  - Fails:  12 Quality:  14
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.start, this.capacity_> l:  104  - Fails:  12 Quality:  14
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_> l:  104  - Fails:  12 Quality:  14
Picked:
	FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>

Vector: [0. 1. 0. 1. 1. 1. 1. 0. 1. 0. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m14.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m16.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m17.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m18.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m19.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m20.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_> l:  133  - Fails:  4300 Quality:  4303
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_> l:  134  - Fails:  4147 Quality:  4150
	this.start < this.capacity_ l:  27  - Fails:  1128 Quality:  1128
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_> l:  131  - Fails:  1119 Quality:  1121
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.start, this.capacity_> l:  132  - Fails:  1119 Quality:  1121
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_> l:  103  - Fails:  1119 Quality:  1121
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.start, this.capacity_> l:  99  - Fails:  1119 Quality:  1121
Picked:
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>

Vector: [0. 1. 0. 1. 0. 0. 0. 0. 1. 0. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m14.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m16.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m20.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.start, this.capacity_> l:  132  - Fails:  1101 Quality:  1103
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_> l:  165  - Fails:  891 Quality:  894
Picked:
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.start, this.capacity_>

Vector: [0. 0. 1. 0. 0. 1. 0. 0. 0. 1. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m15.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m18.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m3.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_> l:  117  - Fails:  5414 Quality:  5416
Picked:
	FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_>

Vector: [0. 0. 1. 0. 0. 1. 0. 0. 0. 0. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m15.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m18.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free> l:  112  - Fails:  7435 Quality:  7437
	FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.start l:  66  - Fails:  5795 Quality:  5796
	FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.start l:  65  - Fails:  5795 Quality:  5796
	FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.start l:  65  - Fails:  5795 Quality:  5796
	FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.capacity_> l:  120  - Fails:  5408 Quality:  5410
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.capacity_> l:  104  - Fails:  5408 Quality:  5410
	FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_> l:  148  - Fails:  4611 Quality:  4614
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.start, this.free> l:  99  - Fails:  3735 Quality:  3737
	FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.start, this.free> l:  115  - Fails:  3552 Quality:  3554
Picked:
	FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free>

Vector: [0. 0. 1. 0. 0. 1. 0. 1. 1. 1. 1.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m15.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m18.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m2.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m20.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m3.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m4.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_> l:  115  - Fails:  10651 Quality:  10653
	FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_> l:  113  - Fails:  10651 Quality:  10653
Picked:
	FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.capacity_>

Vector: [0. 0. 1. 0. 0. 1. 0. 0. 1. 0. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m15.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m18.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m20.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_> l:  144  - Fails:  9109 Quality:  9112
Picked:
	FuzzedInvariant ( (Integer_Variable_0 > -1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_>

Vector: [0. 0. 1. 0. 0. 0. 0. 0. 0. 1. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m15.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m3.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_> l:  105  - Fails:  57 Quality:  59
Picked:
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.capacity_>

Vector: [0. 0. 1. 0. 1. 1. 1. 0. 0. 0. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m15.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m17.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m18.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m19.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.free> l:  108  - Fails:  16248 Quality:  16250
	FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.start, this.free> l:  110  - Fails:  16248 Quality:  16250
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.start, this.free> l:  100  - Fails:  7184 Quality:  7186
Picked:
	FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.free>

Vector: [0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m15.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_> l:  134  - Fails:  31 Quality:  34
Picked:
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>

Vector: [0. 0. 0. 0. 1. 1. 1. 0. 0. 0. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m17.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m18.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m19.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.free l:  64  - Fails:  16758 Quality:  16759
	FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.free l:  63  - Fails:  16758 Quality:  16759
	FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_> l:  113  - Fails:  15760 Quality:  15762
	FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.free, this.capacity_> l:  102  - Fails:  15760 Quality:  15762
	FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = -1) ) holds for: <this.free, this.capacity_> l:  118  - Fails:  15760 Quality:  15762
	FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 = 1) ) holds for: <this.free, this.capacity_> l:  112  - Fails:  15640 Quality:  15642
	this.start <= this.free l:  23  - Fails:  15593 Quality:  15593
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.free> l:  99  - Fails:  12370 Quality:  12372
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.free> l:  98  - Fails:  12370 Quality:  12372
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.free> l:  99  - Fails:  12370 Quality:  12372
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.free> l:  99  - Fails:  12370 Quality:  12372
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.free> l:  95  - Fails:  12370 Quality:  12372
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.free> l:  125  - Fails:  12350 Quality:  12352
	FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.free l:  64  - Fails:  11463 Quality:  11464
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.free, this.capacity_> l:  103  - Fails:  10789 Quality:  10791
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.free, this.capacity_> l:  103  - Fails:  10789 Quality:  10791
	FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.free> l:  109  - Fails:  8863 Quality:  8865
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.free> l:  126  - Fails:  8670 Quality:  8672
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.free> l:  127  - Fails:  8670 Quality:  8672
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.free> l:  100  - Fails:  8305 Quality:  8307
	FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <orig(this), this.free> l:  95  - Fails:  1556 Quality:  1557
	this.start < this.free l:  22  - Fails:  606 Quality:  606
	FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > 0) ) holds for: <this.start, this.free> l:  112  - Fails:  579 Quality:  581
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.start, this.free> l:  127  - Fails:  490 Quality:  492
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_> l:  159  - Fails:  486 Quality:  489
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_> l:  133  - Fails:  486 Quality:  489
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.start, this.free> l:  94  - Fails:  486 Quality:  488
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free> l:  126  - Fails:  486 Quality:  488
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = -1) ) holds for: <this.start, this.free> l:  127  - Fails:  486 Quality:  488
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.start, this.free> l:  98  - Fails:  486 Quality:  488
	FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 != 0) ) holds for: <this.start, this.free> l:  108  - Fails:  396 Quality:  398
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 0) ) holds for: <this.start, this.free> l:  130  - Fails:  371 Quality:  373
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 > 0) ) holds for: <this.start, this.free> l:  126  - Fails:  338 Quality:  340
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_> l:  162  - Fails:  318 Quality:  321
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_> l:  134  - Fails:  318 Quality:  321
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_> l:  161  - Fails:  318 Quality:  321
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.start, this.free> l:  95  - Fails:  318 Quality:  320
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.start, this.free> l:  126  - Fails:  318 Quality:  320
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.start, this.free> l:  126  - Fails:  318 Quality:  320
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.start, this.free> l:  99  - Fails:  318 Quality:  320
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.start, this.free> l:  99  - Fails:  318 Quality:  320
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.start, this.free> l:  127  - Fails:  318 Quality:  320
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.start, this.free> l:  99  - Fails:  318 Quality:  320
	FuzzedInvariant ( (Integer_Variable_0 <= 0) implies (Integer_Variable_1 != 1) ) holds for: <this.free, this.capacity_> l:  118  - Fails:  120 Quality:  122
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_> l:  134  - Fails:  49 Quality:  52
Picked:
	FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.free

Vector: [0. 0. 0. 0. 1. 1. 1. 0. 1. 0. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m17.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m18.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m19.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m20.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.free, this.capacity_> l:  112  - Fails:  20297 Quality:  20299
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_> l:  134  - Fails:  19362 Quality:  19365
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_> l:  160  - Fails:  19140 Quality:  19143
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > 1) ) holds for: <this.free, this.capacity_> l:  129  - Fails:  4657 Quality:  4659
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_> l:  133  - Fails:  4578 Quality:  4581
Picked:
	FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 < 1) ) holds for: <this.free, this.capacity_>

Vector: [0. 0. 0. 0. 1. 0. 1. 0. 0. 0. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m17.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m19.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.free, this.capacity_> l:  103  - Fails:  80 Quality:  82
Picked:
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.free, this.capacity_>

Vector: [0. 0. 0. 0. 1. 0. 1. 0. 1. 0. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m17.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m19.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m20.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_> l:  134  - Fails:  4529 Quality:  4532
Picked:
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.start , this.free , this.capacity_>

Vector: [0. 0. 0. 0. 1. 1. 1. 1. 1. 1. 1.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m17.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m18.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m19.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m2.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m20.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m3.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m4.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_> l:  104  - Fails:  5261 Quality:  5263
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.start, this.capacity_> l:  103  - Fails:  5261 Quality:  5263
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.start, this.capacity_> l:  104  - Fails:  5261 Quality:  5263
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.start, this.capacity_> l:  100  - Fails:  5261 Quality:  5263
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.start, this.capacity_> l:  104  - Fails:  5261 Quality:  5263
Picked:
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.start, this.capacity_>

Vector: [0. 0. 0. 0. 1. 1. 1. 1. 1. 0. 1.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m17.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m18.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m19.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m2.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m20.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m4.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.capacity_> l:  105  - Fails:  5255 Quality:  5257
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.start, this.capacity_> l:  131  - Fails:  5255 Quality:  5257
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.start, this.capacity_> l:  132  - Fails:  5255 Quality:  5257
Picked:
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.start, this.capacity_>

Vector: [0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m18.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.free l:  64  - Fails:  5295 Quality:  5296
	FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.free l:  65  - Fails:  5295 Quality:  5296
	FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.free l:  64  - Fails:  5295 Quality:  5296
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.free, this.capacity_> l:  103  - Fails:  4971 Quality:  4973
	FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 <= -1) ) holds for: <this.free, this.capacity_> l:  119  - Fails:  4971 Quality:  4973
	FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.free, this.capacity_> l:  116  - Fails:  4971 Quality:  4973
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.start, this.free> l:  100  - Fails:  208 Quality:  210
	FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.start, this.free> l:  100  - Fails:  208 Quality:  210
	FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.start, this.free> l:  108  - Fails:  183 Quality:  185
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.free, this.capacity_> l:  104  - Fails:  40 Quality:  42
Picked:
	FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.free

Vector: [0. 0. 0. 0. 0. 1. 0. 0. 1. 0. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m18.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m20.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.free, this.capacity_> l:  114  - Fails:  9508 Quality:  9510
	FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 > 0) ) holds for: <this.free, this.capacity_> l:  112  - Fails:  9508 Quality:  9510
Picked:
	FuzzedInvariant ( (Integer_Variable_0 <= -1) iff (Integer_Variable_1 < 1) ) holds for: <this.free, this.capacity_>

Vector: [0. 0. 0. 0. 0. 0. 0. 1. 1. 1. 1.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m2.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m20.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m3.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m4.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_> l:  130  - Fails:  5243 Quality:  5245
	FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.capacity_ l:  68  - Fails:  5243 Quality:  5244
	FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.capacity_ l:  69  - Fails:  5243 Quality:  5244
	this.start <= this.capacity_ l:  28  - Fails:  4154 Quality:  4154
	FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <this, this.capacity_> l:  94  - Fails:  1946 Quality:  1947
Picked:
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.start, this.capacity_>

Vector: [0. 0. 0. 0. 0. 0. 0. 1. 1. 0. 1.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m2.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m20.dtrace.gz
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m4.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.capacity_> l:  114  - Fails:  5237 Quality:  5239
	FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.capacity_ l:  69  - Fails:  5237 Quality:  5238
Picked:
	FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.start, this.capacity_>

Vector: [0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m20.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.free, this.capacity_> l:  103  - Fails:  4537 Quality:  4539
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.free, this.capacity_> l:  103  - Fails:  4537 Quality:  4539
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.free, this.capacity_> l:  99  - Fails:  4537 Quality:  4539
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - -1 ) holds for: <this.free, this.capacity_> l:  104  - Fails:  4537 Quality:  4539
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 1 ) holds for: <this.free, this.capacity_> l:  103  - Fails:  4537 Quality:  4539
	FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 = 0) ) holds for: <this.free, this.capacity_> l:  113  - Fails:  4537 Quality:  4539
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.free, this.capacity_> l:  130  - Fails:  4537 Quality:  4539
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.free, this.capacity_> l:  102  - Fails:  4537 Quality:  4539
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != -1) ) holds for: <this.free, this.capacity_> l:  131  - Fails:  4537 Quality:  4539
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.free, this.capacity_> l:  129  - Fails:  4537 Quality:  4539
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_> l:  166  - Fails:  4467 Quality:  4470
	FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.start , this.free , this.capacity_> l:  144  - Fails:  4467 Quality:  4470
	this.free <= this.capacity_ l:  27  - Fails:  3588 Quality:  3588
	FuzzedInvariant ( Integer_Variable_0 >= #(RingBuffer.data) ) holds for: <orig(this), this.capacity_> l:  100  - Fails:  1498 Quality:  1499
Picked:
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.free, this.capacity_>

Vector: [0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0.]
Mutants:
	experiments/ringbuffer_item/setup-files/mutants/RingBufferTesterDriver-m3.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.capacity_ l:  69  - Fails:  6 Quality:  7
	FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.capacity_ l:  69  - Fails:  6 Quality:  7
	FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.capacity_ l:  70  - Fails:  6 Quality:  7
Picked:
	FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.capacity_

Buckets: 33
Specs: 33
Saved in file: experiments/ringbuffer_item/output/RingBuffer-item-specfuzzer-1-buckets.assertions

