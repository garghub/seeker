<object-stream>
  <set>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.currentSize, orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.front) , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.front , this.front , this.currentSize&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % -1 ) holds for: &lt;this.currentSize, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.back) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.currentSize, orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.front , this.back , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.currentSize , this.front , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.front) , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: &lt;this.currentSize, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: &lt;this.currentSize, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.back , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.back) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.front) , orig(this.front) , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;this.currentSize, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.back) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.back , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.front , this.back , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.currentSize, this.front&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.front , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , orig(this.front) , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt; 1) ) holds for: &lt;this.currentSize, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - 1 ) holds for: &lt;this.front, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.front) , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * 0 ) holds for: &lt;this.currentSize, orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.front , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , orig(this.front) , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt; 1) ) holds for: &lt;this.currentSize, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.currentSize, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.back , orig(this.front) , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.back , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) iff (Integer_Variable_1 != 0) ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.front , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.currentSize), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.currentSize), size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / 1 ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.back , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.front), orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , orig(this.currentSize) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.front) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + 0 ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.front , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: &lt;this.front, this.currentSize&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , orig(this.back) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= #(QueueAr.theArray) ) holds for: &lt;orig(this), this.currentSize&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / 1 ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.currentSize, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.back , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.back) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % -1 ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.front , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; 1) ) holds for: &lt;this.currentSize, this.front&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.front) , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.back , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.front), orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , orig(this.currentSize) , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;this.back, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.currentSize , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: &lt;this.currentSize, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.currentSize), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.currentSize), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.front) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;orig(this.back), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.currentSize, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: &lt;this.currentSize, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: &lt;this.currentSize, this.front&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , orig(this.back) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.back , size(this.theArray[..])-1 , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.back , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.front , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.front) , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * 0 ) holds for: &lt;this.currentSize, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - 0 ) holds for: &lt;this.back, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.front , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.currentSize , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + 1 ) holds for: &lt;this.currentSize, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.front) , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + 1 ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , size(this.theArray[..])-1 , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.front) , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; 1 ) holds for: this.currentSize</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.back), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.currentSize , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.back , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: &lt;this.currentSize, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.back) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( all n : QueueAr.theArray : n = null ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.front) , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.front , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;orig(this.back), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: &lt;this.currentSize, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.front , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.front , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.back , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.front , orig(this.currentSize) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.front , this.back , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.front , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % -1 ) holds for: &lt;this.currentSize, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.front , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.front , this.back , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.front) , orig(this.front) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.front , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;orig(this.front), size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;orig(this.back), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.front) , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: &lt;orig(this.currentSize), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - -1 ) holds for: &lt;this.front, orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.front) , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.front , this.front , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % 1 ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.front , orig(this.currentSize) , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - -1 ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.currentSize) , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.back) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;orig(this.currentSize), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.front) , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.front , this.front , this.currentSize&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.front , this.back , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: &lt;orig(this.back), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.front , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.currentSize, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.back , orig(this.currentSize) , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.front , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.currentSize, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , orig(this.currentSize) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: &lt;this.currentSize, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.back , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;orig(this.back), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: &lt;this.currentSize, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - 1 ) holds for: &lt;orig(this.currentSize), orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % 1 ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.back) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;this.currentSize, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.front) , orig(this.currentSize) , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.back), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.front) , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.front) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.currentSize, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.currentSize, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;this.currentSize, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.back) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , orig(this.front) , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.front) , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt; 1) ) holds for: &lt;this.currentSize, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.front , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= #(QueueAr.theArray) ) holds for: &lt;this, this.currentSize&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , size(this.theArray[..])-1 , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.front) , orig(this.front) , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.front , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , orig(this.currentSize) , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;this.currentSize, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.front) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.currentSize) , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.back, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.back) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.back , orig(this.front) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % 1 ) holds for: &lt;this.currentSize, orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.currentSize , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * 1 ) holds for: &lt;this.back, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: &lt;this.currentSize, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.front) , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.currentSize, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.back , orig(this.currentSize) , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + 1 ) holds for: &lt;this.currentSize, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.front , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.front, this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;orig(this.currentSize), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 ) holds for: &lt;this.back, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.front) , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.front , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.front , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.currentSize, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + 0 ) holds for: &lt;orig(this.back), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.front) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.front) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.back , orig(this.back) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.back) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.back, orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.back , orig(this.front) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.front, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.back , orig(this.currentSize) , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.back , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;orig(this.back), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: &lt;this.front, this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.currentSize , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.back , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: &lt;this.front, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.front , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.front , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % -1 ) holds for: &lt;this.currentSize, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.front) , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;this.front, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.currentSize , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , orig(this.currentSize) , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.currentSize, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.front) , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;orig(this.back), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.currentSize) , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.back) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: &lt;this.front, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.front) , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.currentSize, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: &lt;this.currentSize, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.front , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: &lt;this.currentSize, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.front , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - -1 ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.front , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.currentSize, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;this.front, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.front, this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.back, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , orig(this.currentSize) , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.back , orig(this.currentSize) , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.currentSize , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.currentSize) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.front , this.front , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: &lt;this.currentSize, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.front , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.front , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.currentSize, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.currentSize, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.back , orig(this.currentSize) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.currentSize) , orig(this.currentSize) , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.currentSize , this.front , this.front&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.currentSize), orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.front) , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.front , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * 1 ) holds for: &lt;orig(this.back), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.currentSize, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + 1 ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: &lt;this.currentSize, orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.back , size(this.theArray[..])-1 , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: &lt;this.currentSize, orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: &lt;this.front, this.currentSize&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.currentSize, orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , size(this.theArray[..])-1 , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , orig(this.currentSize) , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.front , orig(this.currentSize) , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.front , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.front , this.front , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.currentSize , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.front , this.front , this.currentSize&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , size(this.theArray[..])-1 , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.front , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.front , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;orig(this.currentSize), this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - -1 ) holds for: &lt;this.currentSize, this.front&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , orig(this.currentSize) , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) iff (Integer_Variable_1 != 0) ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.back , orig(this.currentSize) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: &lt;this.front, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.currentSize , this.front , this.front&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.front , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.front) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.back , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: &lt;this.front, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.front) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + 0 ) holds for: &lt;this.back, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.front , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.currentSize, orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.currentSize, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; 1) ) holds for: &lt;orig(this.currentSize), size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: &lt;this.currentSize, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.currentSize , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.currentSize , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.back , size(this.theArray[..])-1 , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.front) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.currentSize) , orig(this.front) , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - 1 ) holds for: &lt;this.currentSize, this.front&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.front) , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.back), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.front, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: &lt;this.front, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.back , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , orig(this.front) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;this.currentSize, this.front&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - 1 ) holds for: &lt;this.back, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.front , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.front, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.front , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;orig(this.currentSize), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.back , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + 1 ) holds for: &lt;this.currentSize, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , orig(this.front) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.front) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.back) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: &lt;orig(this.back), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.front) , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.currentSize) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.front , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: &lt;this.currentSize, orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.currentSize, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.currentSize), size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;this.currentSize, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= 0 ) holds for: this.currentSize</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;this.currentSize, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.front , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - 1 ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.front , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.back) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / 1 ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , orig(this.currentSize) , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.front , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - -1 ) holds for: &lt;this.front, this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 1) xor (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.currentSize, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: &lt;this.currentSize, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.front , orig(this.currentSize) , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , orig(this.front) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - 0 ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.front) , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + 1 ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.front , this.back , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 &gt;= 1) ) holds for: &lt;orig(this.back), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - -1 ) holds for: &lt;orig(this.currentSize), this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.currentSize) , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.front) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.back, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.currentSize, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.currentSize), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % 1 ) holds for: &lt;this.currentSize, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - 1 ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.front) , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.front , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.back) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.currentSize) , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: &lt;this.currentSize, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.back , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.front) , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.front) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.front) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.back) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.back , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + 0 ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: &lt;this.currentSize, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.front) , orig(this.front) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - -1 ) holds for: &lt;this.back, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.front) , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.currentSize , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + 1 ) holds for: &lt;this.currentSize, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.currentSize, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.currentSize) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.front) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: &lt;orig(this.front), orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.currentSize , this.front , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - -1 ) holds for: &lt;this.currentSize, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.back , size(this.theArray[..])-1 , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = 0 ) holds for: this.currentSize</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.currentSize) , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.front) , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.front , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.back , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: &lt;orig(this.currentSize), orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: &lt;orig(this.back), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.currentSize, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.back , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.back) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % 1 ) holds for: &lt;this.currentSize, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.currentSize, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.front , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.front , orig(this.currentSize) , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: &lt;orig(this.back), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , size(this.theArray[..])-1 , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , orig(this.back) , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: &lt;orig(this.currentSize), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.front) , this.front , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.back , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;orig(this.front), this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.back , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: &lt;this.currentSize, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: &lt;this.currentSize, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , orig(this.currentSize) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , orig(this.front) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.currentSize , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.front , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;orig(this.back), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.front) , orig(this.front) , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.currentSize, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.currentSize) , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;this.front, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.currentSize , this.front , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.front) , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.back , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.currentSize , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.currentSize , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.currentSize , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.back , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: &lt;this.currentSize, orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.front) , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * 1 ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.currentSize, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + 0 ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; 0) ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.front) , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: &lt;orig(this.currentSize), orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;orig(this.currentSize), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 0) or (Integer_Variable_1 != -1) ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.currentSize) , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * 1 ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;orig(this.currentSize), orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 &gt;= 1) ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.back) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;this.currentSize, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.currentSize) , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.currentSize) , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.front) , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.front) , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - -1 ) holds for: &lt;orig(this.front), orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * 0 ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;orig(this.back), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.front) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.currentSize , this.front , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.front , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , orig(this.front) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.front) , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.back) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.front) , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , orig(this.front) , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.back) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;this.currentSize, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; 1) ) holds for: &lt;this.currentSize, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.front, this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.back , size(this.theArray[..])-1 , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % 1 ) holds for: &lt;this.currentSize, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= -1) xor (Integer_Variable_1 != -1) ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.front , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.back , size(this.theArray[..])-1 , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , orig(this.currentSize) , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.front) , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.front , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.currentSize) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.front , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.front) , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.currentSize) , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + 1 ) holds for: &lt;orig(this.back), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.back , orig(this.front) , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - -1 ) holds for: &lt;orig(this.front), this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.front , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.currentSize, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.back, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.back) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.currentSize) , this.back , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.back , size(this.theArray[..])-1 , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.front , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % -1 ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % Integer_Variable_2 ) holds for: &lt;this.front , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.front) , orig(this.currentSize) , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + 1 ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: &lt;this.currentSize, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.currentSize), this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.front) , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.back , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.back) , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.front , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.currentSize) , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.currentSize , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: &lt;this.currentSize, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.currentSize) , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.front), orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , size(this.theArray[..])-1 , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.front, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.front , orig(this.currentSize) , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , orig(this.currentSize) , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.back , orig(this.currentSize) , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * 1 ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.front , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.front, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.back , orig(this.front) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.front) , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.currentSize), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 % -1 ) holds for: &lt;this.currentSize, orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.back), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.front, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.back , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.front, this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;orig(this.currentSize), orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.currentSize, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.currentSize, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * 0 ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * 0 ) holds for: &lt;this.currentSize, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.currentSize) , orig(this.currentSize) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;this.front, orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.currentSize) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.back , orig(this.currentSize) , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.front) , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) or (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.currentSize, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: &lt;orig(this.back), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.currentSize, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.currentSize , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= #(QueueAr.theArray) ) holds for: &lt;orig(this), this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: &lt;this.front , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + 1 ) holds for: &lt;orig(this.currentSize), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.front , this.back , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.back , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.front, this.currentSize&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.back , orig(this.currentSize) , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.front , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt; 1) ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;orig(this.currentSize) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - -1 ) holds for: &lt;orig(this.currentSize), orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: &lt;orig(this.currentSize), size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.currentSize , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.currentSize, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , this.front , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; -1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: &lt;this.currentSize, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.front) , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.front, this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , orig(this.currentSize) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + 1 ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.back , orig(this.currentSize) , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 + -1 ) holds for: &lt;this.currentSize, this.front&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.currentSize, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;orig(this.back), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.front) , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , orig(this.currentSize) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;orig(this.front) , orig(this.front) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.front) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.front , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.back) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , orig(this.currentSize) , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.back , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.front) , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.front , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * 1 ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.back , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: &lt;this.currentSize, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.front , orig(this.currentSize) , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.front) , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.front , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.back, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;this.currentSize, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;orig(this.currentSize), this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.front) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.front) , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.front , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;orig(this.back), size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.front , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= 1) ) holds for: &lt;this.front, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , orig(this.currentSize) , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: &lt;orig(this.currentSize), this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.front) , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * 0 ) holds for: &lt;this.currentSize, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt; 1) ) holds for: &lt;orig(this.currentSize), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + 0 ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 + -1 ) holds for: &lt;this.back, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.back , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.currentSize , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;orig(this.back) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.back, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.front) , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.front , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + 1 ) holds for: &lt;this.front, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: &lt;orig(this.currentSize), this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.front , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.back) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.currentSize</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.front , orig(this.currentSize) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / 1 ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.currentSize) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.front) , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.currentSize), size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.front , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.back , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= 0) iff (Integer_Variable_1 != 0) ) holds for: &lt;orig(this.back), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.back) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.back) , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;this.currentSize, orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt; 1) ) holds for: &lt;this.currentSize, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;this.currentSize, orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.front) , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt; 1) ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: &lt;this.front, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: &lt;this.currentSize, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: &lt;this.currentSize, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt; 1) ) holds for: &lt;orig(this.currentSize), size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.back) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.front , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.back) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.back) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.front , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) or (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.front) , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.front , this.back , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.back , orig(this.currentSize) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;orig(this.front) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.front) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;orig(this.front), orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.currentSize) , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.front) , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;orig(this.back) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;this.currentSize , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= -1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &gt; 0) ) holds for: &lt;this.front, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.front , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + 1 ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: &lt;this.currentSize, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.currentSize , this.front , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - -1 ) holds for: &lt;this.currentSize, orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.front) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( no n : QueueAr.theArray : n != null ) holds for: orig(this)</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt; 1) ) holds for: &lt;this.front, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 / 1 ) holds for: &lt;this.back, orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 &gt; 0) ) holds for: &lt;orig(this.currentSize), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.front, this.currentSize&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.front) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt; Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.front) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.currentSize), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 &lt;= 1) ) holds for: &lt;orig(this.currentSize), size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.front , this.front , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 - -1 ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.front) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.front , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 / 1 ) holds for: &lt;orig(this.back), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt; Integer_Variable_1 * 1 ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - 1 ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &gt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.front) , orig(this.currentSize) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - 0 ) holds for: &lt;this.currentSize, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.currentSize , this.front , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 &gt; -1) ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: &lt;this.front, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) implies (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.front , orig(this.back) , size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 &gt; 1) ) holds for: &lt;this.back, size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;orig(this.front) , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.front , this.back , orig(this.currentSize)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 ) holds for: &lt;orig(this.back), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) iff (Integer_Variable_1 &gt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: &lt;this.back, size(this.theArray[..])-1&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.front) , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;this.back , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , orig(this.currentSize) , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.back , orig(capacity) , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: &lt;orig(this.front) , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: &lt;this.currentSize, orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &lt; -1) ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 + Integer_Variable_2 ) holds for: &lt;this.currentSize , this.back , this.back&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 - Integer_Variable_2 ) holds for: &lt;orig(this.front) , this.back , orig(this.back)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: &lt;orig(this.currentSize), size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; 1) or (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= Integer_Variable_1) xor (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , orig(this.currentSize) , orig(this.front)&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) xor (Integer_Variable_1 &lt;= Integer_Variable_2) ) holds for: &lt;this.currentSize , this.currentSize , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt; 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.currentSize , orig(this.back) , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt; Integer_Variable_1) iff (Integer_Variable_1 &lt;= -1) ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &gt;= Integer_Variable_1) xor (Integer_Variable_1 &gt;= Integer_Variable_2) ) holds for: &lt;this.back , this.back , size(this.theArray[..])&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: &lt;this.currentSize, this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 &lt;= 0) or (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;orig(this.currentSize) , orig(this.currentSize) , this.back&gt;</string>
    <string>FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 &lt; Integer_Variable_2) ) holds for: &lt;this.back , this.back , orig(capacity)&gt;</string>
    <string>FuzzedInvariant ( Integer_Variable_0 &lt;= Integer_Variable_1 * Integer_Variable_2 ) holds for: &lt;this.currentSize , orig(this.front) , orig(this.front)&gt;</string>
  </set>
</object-stream>