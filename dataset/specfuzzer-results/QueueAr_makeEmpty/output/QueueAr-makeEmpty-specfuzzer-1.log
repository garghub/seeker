> SpecFuzzer
# Inference step (Daikon + Fuzzed Specs)
Daikon version 5.8.2, released May 4, 2020; http://plse.cs.washington.edu/daikon.

Loading invariants from file: invs_file.xml
Loaded: 0

Fuzzing specs:
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) iff (Integer_Variable_1 < 0)
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) implies (Integer_Variable_1 >= 1)
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) iff (Integer_Variable_1 < -1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) xor (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) implies (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - 0
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) implies (Integer_Variable_1 > 0)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * 1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1)
Discarded due to arity: 4 - (Integer_Variable_0 >= #(QueueAr.theArray)) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != 0) xor (Integer_Variable_1 != 0)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 0) iff (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 != #(QueueAr.theArray)) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) xor (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % -1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(QueueAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 != #(QueueAr.theArray)) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) iff (Integer_Variable_1 >= 1)
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) xor (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > 1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) implies (Integer_Variable_1 != 0)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % 1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / -1
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != 0) xor (Integer_Variable_1 > 1)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 = -1) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 < #(QueueAr.theArray)) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) or (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % -1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= -1) or (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / -1
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) xor (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) iff (Integer_Variable_1 > 0)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) or (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) xor (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = 0) iff (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) xor (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 < #(QueueAr.theArray)) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 >= #(QueueAr.theArray)) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) or (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + 1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < -1)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 = -1)
Discarded due to arity: 4 - (Integer_Variable_0 <= #(QueueAr.theArray)) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 <= #(QueueAr.theArray)) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) or (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0)
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) xor (Integer_Variable_1 < 0)
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + 1
Fuzzed spec: (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 1
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) iff (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - -1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) xor (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / -1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > -1) xor (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / -1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != 1) implies (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > 1) xor (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % 1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) implies (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) iff (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1)
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 > 1)
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) iff (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / 0
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < 0) or (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= 0)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1)
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0)
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 < #(QueueAr.theArray)) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) or (Integer_Variable_1 < #(QueueAr.theArray))
Discarded due to arity: 4 - (Integer_Variable_0 <= #(QueueAr.theArray)) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = -1) implies (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(QueueAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= -1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % -1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) xor (Integer_Variable_1 = 0)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) iff (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / 0
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 1) implies (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != -1) or (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) implies (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = -1) implies (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) xor (Integer_Variable_1 <= 0)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Discarded due to arity: 4 - (Integer_Variable_0 >= #(QueueAr.theArray)) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * 1
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 0
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) or (Integer_Variable_1 < -1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) iff (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) iff (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / 1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * 0
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) or (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) iff (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 1) xor (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * 1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = 0) iff (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= 0) or (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 0
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) iff (Integer_Variable_1 = 0)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > 1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * 0
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) iff (Integer_Variable_1 >= 1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 != #(QueueAr.theArray)) or (Integer_Variable_1 > Integer_Variable_2)
Discarded due to arity: 4 - (Integer_Variable_0 != #(QueueAr.theArray)) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) iff (Integer_Variable_1 = 0)
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + 1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) iff (Integer_Variable_1 <= 0)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= 0) implies (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) iff (Integer_Variable_1 != 1)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - -1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 1
Discarded due to arity: 4 - (Integer_Variable_0 != #(QueueAr.theArray)) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % -1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) or (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) xor (Integer_Variable_1 < 1)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) xor (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) or (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) implies (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: (Integer_Variable_0 != -1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - 1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= #(QueueAr.theArray))
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % 0
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) implies (Integer_Variable_1 >= 1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(QueueAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 >= #(QueueAr.theArray)) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) xor (Integer_Variable_1 <= -1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) or (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) implies (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) implies (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + -1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > 0) xor (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 > 1) xor (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / -1
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - 1
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % -1
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 > 0)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - 0
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) iff (Integer_Variable_1 < -1)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: (Integer_Variable_0 <= 1) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 < 0) or (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < 0)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % 0
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != 1) iff (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != -1) iff (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - -1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) or (Integer_Variable_1 <= 0)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / -1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) implies (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) implies (Integer_Variable_1 >= -1)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) iff (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > -1) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != 0) iff (Integer_Variable_1 = 1)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: (Integer_Variable_0 < 0) implies (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - 0
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) or (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - -1
Fuzzed spec: (Integer_Variable_0 < 1) iff (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + 1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % -1
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) xor (Integer_Variable_1 >= 1)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) iff (Integer_Variable_1 >= 0)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 0) implies (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= -1) xor (Integer_Variable_1 > #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1)
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 = 1)
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = 1) xor (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - 0
Fuzzed spec: (Integer_Variable_0 != -1) implies (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != -1) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < #(QueueAr.theArray)) implies (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * 0
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) iff (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > -1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 >= 1) xor (Integer_Variable_1 >= 1)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) implies (Integer_Variable_1 != 0)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > #(QueueAr.theArray)) implies (Integer_Variable_1 != -1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) or (Integer_Variable_1 < 0)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % 0
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(QueueAr.theArray)) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 != -1) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 != 0)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - 0
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != -1) or (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + 0
Fuzzed spec: (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1)
Fuzzed spec: (Integer_Variable_0 >= #(QueueAr.theArray)) or (Integer_Variable_1 != 0)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % -1
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % 1
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) iff (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= 0) iff (Integer_Variable_1 = 1)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 <= #(QueueAr.theArray)) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * 1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % 1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * -1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % 0
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / -1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - 0
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - -1
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - 1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= -1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 0) iff (Integer_Variable_1 != #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) xor (Integer_Variable_1 >= 0)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / -1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) or (Integer_Variable_1 != #(QueueAr.theArray))
Discarded due to arity: 4 - (Integer_Variable_0 >= #(QueueAr.theArray)) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 <= 1)
Fuzzed spec: (Integer_Variable_0 = 1) or (Integer_Variable_1 <= -1)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > -1) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != #(QueueAr.theArray)) or (Integer_Variable_1 = 1)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 > #(QueueAr.theArray)) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(QueueAr.theArray)) xor (Integer_Variable_1 >= 1)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > 1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + 1
Fuzzed spec: (Integer_Variable_0 >= -1) xor (Integer_Variable_1 >= 1)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 < #(QueueAr.theArray)) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(QueueAr.theArray)) or (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 <= #(QueueAr.theArray)) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - 0
Fuzzed spec: some n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 <= #(QueueAr.theArray)) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(QueueAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 != #(QueueAr.theArray)) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 < #(QueueAr.theArray)) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < 0) xor (Integer_Variable_1 = #(QueueAr.theArray))
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= 0) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * -1
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= #(QueueAr.theArray))
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 < 1)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 = #(QueueAr.theArray)) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(QueueAr.theArray)) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * -1
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + 1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = 1
Discarded due to arity: 4 - (Integer_Variable_0 != #(QueueAr.theArray)) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: all n : QueueAr.theArray : n = null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: all n : QueueAr.theArray : n != null
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(QueueAr.theArray)
Fuzzed spec: no n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 0
Fuzzed spec: no n : QueueAr.theArray : n = null
Fuzzed spec: some n : QueueAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % 0
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 >= 0) or (Integer_Variable_1 < #(QueueAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + -1
Fuzzed spec: some n : QueueAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(QueueAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(QueueAr.theArray)
Unique fuzzed invariants: 426 (2000)
Unary: 24 - Binary: 131 - Ternary: 271 - Discarded: 40
Reading declaration files Processing trace data; reading 1 dtrace file:
Loaded objects from file: /specfuzzer/experiments/QueueAr_makeEmpty/setup-files/QueueArTesterDriver-objects.xml
Total loaded objects: 2860

No return from procedure observed 12 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 4 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
DataStructures.Overflow:::OBJECT
===========================================================================
DataStructures.Overflow.Overflow():::EXIT
===========================================================================
DataStructures.QueueAr:::OBJECT
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.currentSize
this.currentSize >= 0
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.front
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.front
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.front
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.front
this.front >= 0
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.back
this.back >= -1
this.currentSize <= size(this.theArray[])
this.front <= size(this.theArray[])
this.back <= size(this.theArray[])-1
===========================================================================
DataStructures.QueueAr.QueueAr(int):::ENTER
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: capacity
capacity >= 0
===========================================================================
DataStructures.QueueAr.QueueAr(int):::EXIT
this.currentSize == this.front
this.back == size(this.theArray[])-1
orig(capacity) == size(this.theArray[])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(capacity)>
this.currentSize <= orig(capacity)
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.back, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(capacity)>
===========================================================================
DataStructures.QueueAr.dequeue():::ENTER
this.front one of { 0, 1, 2 }
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT88
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
this.front one of { 0, 1, 2 }
return == null
FuzzedInvariant ( all n : QueueAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : QueueAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
this.currentSize <= this.front
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT95
this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1]
orig(this.theArray[post(this.currentSize)]) == orig(this.theArray[this.currentSize-1])
this.back one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back
FuzzedInvariant ( some n : QueueAr.theArray : n = null ) holds for: orig(this)
orig(this.currentSize) one of { 1, 2, 3 }
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: orig(this.currentSize)
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: orig(this.currentSize)
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: orig(this.currentSize)
size(this.theArray[]) one of { 1, 4, 35 }
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
this.theArray[orig(this.front)] == null
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
this.currentSize <= this.back
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, orig(this.currentSize)>
this.currentSize < orig(this.currentSize)
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
this.currentSize <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.front, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>
this.front <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.back, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.back, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.back, orig(this.front)>
this.back >= orig(this.front)
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <orig(this.currentSize), orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.front), size(this.theArray[])-1>
orig(this.front) <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.front)>
this.currentSize - this.back + orig(this.front) == 0
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>
this.back - orig(this.currentSize) - orig(this.front) + 1 == 0
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.back == orig(this.back)
size(this.theArray[]) == orig(size(this.theArray[]))
(orig(this.currentSize) == 0)  <==>  (this.currentSize == orig(this.currentSize))
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: orig(this.currentSize))
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.currentSize)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: orig(this.currentSize))
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.currentSize)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), orig(this.currentSize)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: orig(this.currentSize))
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.currentSize)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: orig(this.currentSize))
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.currentSize)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.front , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = 0 ) holds for: orig(this.currentSize))
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = 0 ) holds for: this.currentSize)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.front)>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.front), this.back>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), this.front>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.front , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( all n : QueueAr.theArray : n = null ) holds for: orig(this))
(orig(this.currentSize) == 0)  ==>  (FuzzedInvariant ( no n : QueueAr.theArray : n != null ) holds for: orig(this))
(orig(this.currentSize) == 0)  ==>  (orig(this.currentSize) <= orig(this.front))
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[]) elements == null)
(orig(this.currentSize) == 0)  ==>  (orig(this.theArray[].getClass().getName()) elements == null)
(orig(this.currentSize) == 0)  ==>  (return == null)
(orig(this.currentSize) == 0)  ==>  (this.currentSize <= orig(this.front))
(orig(this.currentSize) == 0)  ==>  (this.currentSize <= this.front)
(orig(this.currentSize) == 0)  ==>  (this.currentSize == 0)
(orig(this.currentSize) == 0)  ==>  (this.front == orig(this.front))
(orig(this.currentSize) == 0)  ==>  (this.front >= orig(this.currentSize))
(orig(this.currentSize) == 0)  ==>  (this.front one of { 0, 1, 2 })
(orig(this.currentSize) == 0)  ==>  (this.theArray[] == orig(this.theArray[]))
(orig(this.currentSize) == 0)  ==>  (this.theArray[] elements == null)
(orig(this.currentSize) == 0)  ==>  (this.theArray[].getClass().getName() elements == null)
(orig(this.currentSize) one of { 1, 2, 3 })  <==>  (this.currentSize < orig(this.currentSize))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: orig(this.currentSize))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: orig(this.currentSize))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.front), size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: orig(this.currentSize))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.front), size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <orig(this.currentSize), orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.back, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.back, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.front, orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.front, this.back>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.front)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.back , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( some n : QueueAr.theArray : n = null ) holds for: orig(this))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (orig(this.front) <= size(this.theArray[])-1)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (orig(this.theArray[post(this.currentSize)]) == orig(this.theArray[this.currentSize-1]))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (return.getClass().getName() in orig(this.theArray[].getClass().getName()))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (size(this.theArray[]) one of { 1, 4, 35 })
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.back - orig(this.currentSize) - orig(this.front) + 1 == 0)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.back >= orig(this.front))
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.back one of { 0, 1, 2 })
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.currentSize - this.back + orig(this.front) == 0)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.currentSize <= size(this.theArray[])-1)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.currentSize <= this.back)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.currentSize one of { 0, 1, 2 })
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.front <= size(this.theArray[])-1)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.theArray.getClass().getName() != return.getClass().getName())
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.theArray[orig(this.front)] == null)
(orig(this.currentSize) one of { 1, 2, 3 })  ==>  (this.theArray[this.currentSize] == this.theArray[orig(this.currentSize)-1])
this.currentSize one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
this.theArray.getClass().getName() != return.getClass().getName()
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
this.currentSize <= orig(this.currentSize)
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, this.back>
this.front >= orig(this.front)
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
return.getClass().getName() in orig(this.theArray[].getClass().getName())
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
orig(this.currentSize) <= size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.front), size(this.theArray[])>
orig(this.front) <= size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.front) , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.dequeueAll():::ENTER
this.front one of { 0, 1, 2 }
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
===========================================================================
DataStructures.QueueAr.dequeueAll():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.back == orig(this.back)
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
FuzzedInvariant ( all n : QueueAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : QueueAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
this.currentSize <= this.front
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>
this.currentSize <= orig(this.currentSize)
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.front)>
this.currentSize <= orig(this.front)
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.front), this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.front), this.front>
this.front >= orig(this.front)
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
orig(this.currentSize) <= size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.front), size(this.theArray[])>
orig(this.front) <= size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.front), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.front>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.front) , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::ENTER
this.currentSize one of { 0, 1, 2 }
this.front one of { 0, 1, 2 }
this.back >= 0
this.theArray[this.currentSize] == null
this.theArray.getClass().getName() != x.getClass().getName()
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
this.currentSize <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, this.back>
this.front <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.front == orig(this.front)
orig(x) == this.theArray[this.back]
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[this.currentSize-1] == this.theArray[orig(this.currentSize)]
orig(this.theArray[post(this.currentSize)-1]) == orig(this.theArray[this.currentSize])
orig(this.theArray[post(this.back)]) == orig(this.theArray[this.currentSize])
this.currentSize one of { 1, 2, 3 }
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.currentSize
this.front one of { 0, 1, 2 }
this.back one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: orig(this.back)
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: orig(this.back)
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: orig(this.back)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.front>
this.front % this.currentSize == 0
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, orig(this.currentSize)>
this.currentSize > orig(this.currentSize)
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.back>
this.front <= this.back
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>
this.front <= size(this.theArray[])-1
this.back >= orig(this.currentSize)
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])-1>
orig(this.currentSize) <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.back), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.back), size(this.theArray[])-1>
orig(this.back) <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
this.currentSize + this.front - this.back - 1 == 0
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.currentSize)>
this.front - this.back + orig(this.currentSize) == 0
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.currentSize) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.getFront():::ENTER
this.front one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <this, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
===========================================================================
DataStructures.QueueAr.getFront():::EXIT77
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
return == null
FuzzedInvariant ( all n : QueueAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : QueueAr.theArray : n != null ) holds for: orig(this)
this.theArray[] elements == return
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
this.currentSize <= this.front
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
===========================================================================
DataStructures.QueueAr.getFront():::EXIT78
return == this.theArray[this.front]
return == this.theArray[orig(this.front)]
return == orig(this.theArray[post(this.front)])
return == orig(this.theArray[this.front])
this.theArray[this.currentSize-1] == this.theArray[this.back]
this.theArray[this.back] == this.theArray[orig(this.currentSize)-1]
this.theArray[this.back] == orig(this.theArray[post(this.currentSize)-1])
this.theArray[this.back] == orig(this.theArray[this.currentSize-1])
this.currentSize one of { 1, 2, 3 }
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.currentSize
this.front one of { 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.front
this.back one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back
FuzzedInvariant ( some n : QueueAr.theArray : n = null ) holds for: orig(this)
size(this.theArray[]) one of { 4, 35, 100 }
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1
this.theArray[this.currentSize] == null
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.front>
this.currentSize >= this.front
this.front % this.currentSize == 0
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.back>
this.currentSize >= this.back
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
this.currentSize <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.back>
this.front <= this.back
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.front>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>
this.front < size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])-1>
this.back < size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.getFront():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.front, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = 0 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( all n : QueueAr.theArray : n = null ) holds for: orig(this))
(this.currentSize == 0)  ==>  (FuzzedInvariant ( no n : QueueAr.theArray : n != null ) holds for: orig(this))
(this.currentSize == 0)  ==>  (return == null)
(this.currentSize == 0)  ==>  (this.currentSize <= this.front)
(this.currentSize == 0)  ==>  (this.front one of { 0, 1, 2 })
(this.currentSize == 0)  ==>  (this.theArray[] elements == null)
(this.currentSize == 0)  ==>  (this.theArray[] elements == return)
(this.currentSize == 0)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.currentSize)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[]))
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.front)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.currentSize)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[]))
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.currentSize)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( some n : QueueAr.theArray : n = null ) holds for: orig(this))
(this.currentSize one of { 1, 2, 3 })  ==>  (orig(this.theArray[post(this.currentSize)]) == null)
(this.currentSize one of { 1, 2, 3 })  ==>  (orig(this.theArray[this.currentSize]) == null)
(this.currentSize one of { 1, 2, 3 })  ==>  (return == orig(this.theArray[post(this.front)]))
(this.currentSize one of { 1, 2, 3 })  ==>  (return == orig(this.theArray[this.front]))
(this.currentSize one of { 1, 2, 3 })  ==>  (return == this.theArray[orig(this.front)])
(this.currentSize one of { 1, 2, 3 })  ==>  (return == this.theArray[this.front])
(this.currentSize one of { 1, 2, 3 })  ==>  (return.getClass().getName() in this.theArray[].getClass().getName())
(this.currentSize one of { 1, 2, 3 })  ==>  (size(this.theArray[]) one of { 4, 35, 100 })
(this.currentSize one of { 1, 2, 3 })  ==>  (this.back < size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.back one of { 0, 1, 2 })
(this.currentSize one of { 1, 2, 3 })  ==>  (this.currentSize <= size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.currentSize >= this.back)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.currentSize >= this.front)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.front % this.currentSize == 0)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.front < size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.front <= this.back)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.front one of { 0, 1 })
(this.currentSize one of { 1, 2, 3 })  ==>  (this.theArray.getClass().getName() != return.getClass().getName())
(this.currentSize one of { 1, 2, 3 })  ==>  (this.theArray[orig(this.currentSize)] == null)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.theArray[this.back] == orig(this.theArray[post(this.currentSize)-1]))
(this.currentSize one of { 1, 2, 3 })  ==>  (this.theArray[this.back] == orig(this.theArray[this.currentSize-1]))
(this.currentSize one of { 1, 2, 3 })  ==>  (this.theArray[this.back] == this.theArray[orig(this.currentSize)-1])
(this.currentSize one of { 1, 2, 3 })  ==>  (this.theArray[this.currentSize-1] == this.theArray[this.back])
(this.currentSize one of { 1, 2, 3 })  ==>  (this.theArray[this.currentSize] == null)
this.front one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
this.theArray.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.theArray[].getClass().getName()
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.isEmpty():::ENTER
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <this, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
(this.currentSize == 0)  <==>  (return == true)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = 0 ) holds for: this.currentSize)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.currentSize == 0)  ==>  (this.back >= -1)
(this.currentSize == 0)  ==>  (this.currentSize <= this.front)
(this.currentSize == 0)  ==>  (this.theArray[] elements == null)
(this.currentSize == 0)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.currentSize one of { 1, 2, 3 })  <==>  (return == false)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.currentSize)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.currentSize)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.currentSize)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.front>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.back one of { 0, 1, 2 })
(this.currentSize one of { 1, 2, 3 })  ==>  (this.currentSize + this.front - this.back - 1 == 0)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.front <= size(this.theArray[])-1)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.front <= this.back)
(this.currentSize one of { 1, 2, 3 })  ==>  (this.front one of { 0, 1, 2 })
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT;condition="return == true"
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
return == true
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
this.currentSize <= this.front
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT;condition="not(return == true)"
this.currentSize one of { 1, 2, 3 }
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: this.currentSize
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: this.currentSize
this.front one of { 0, 1, 2 }
this.back one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back
return == false
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.back>
this.front <= this.back
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>
this.front <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , this.back>
this.currentSize + this.front - this.back - 1 == 0
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.isFull():::ENTER
this.currentSize one of { 0, 1, 2 }
this.front one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <this, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
===========================================================================
DataStructures.QueueAr.isFull():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.currentSize == orig(this.currentSize)
this.front == orig(this.front)
this.back == orig(this.back)
(return == true)  <==>  (this.currentSize == size(this.theArray[]))
(return == true)  ==>  (this.back == size(this.theArray[])-1)
(return == true)  ==>  (this.currentSize == this.front)
(return == true)  ==>  (this.theArray[] == [])
(return == true)  ==>  (this.theArray[].getClass().getName() == [])
(this.back >= 0)  <==>  (return == false)
(this.back >= 0)  <==>  (this.currentSize <= size(this.theArray[])-1)
(this.back >= 0)  <==>  (this.front <= size(this.theArray[])-1)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.back>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>)
(this.back >= 0)  ==>  (FuzzedInvariant ( some n : QueueAr.theArray : n = null ) holds for: orig(this))
(this.back >= 0)  ==>  (this.currentSize one of { 0, 1, 2 })
(this.back >= 0)  ==>  (this.front one of { 0, 1, 2 })
this.currentSize one of { 0, 1, 2 }
this.front one of { 0, 1, 2 }
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
===========================================================================
DataStructures.QueueAr.isFull():::EXIT;condition="return == true"
this.currentSize == this.front
this.currentSize == orig(this.front)
this.currentSize == size(this.theArray[])
this.currentSize == orig(size(this.theArray[]))
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
this.theArray[] == []
this.theArray[].getClass().getName() == []
return == true
===========================================================================
DataStructures.QueueAr.isFull():::EXIT;condition="not(return == true)"
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.back
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.back
this.back >= 0
return == false
FuzzedInvariant ( some n : QueueAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.front>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])-1>
this.currentSize <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.front, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, size(this.theArray[])-1>
this.front <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.front , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.currentSize , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , this.back , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.front , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.back , size(this.theArray[])-1 , size(this.theArray[])>
===========================================================================
DataStructures.QueueAr.makeEmpty():::ENTER
this.front one of { 0, 1, 2 }
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.front, this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.front, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.front, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.front , this.currentSize , this.back>
===========================================================================
DataStructures.QueueAr.makeEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.currentSize == this.front
this.back == size(this.theArray[])-1
this.back == orig(size(this.theArray[]))-1
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.currentSize == 0
FuzzedInvariant ( all n : QueueAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : QueueAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.currentSize)>
this.currentSize <= orig(this.currentSize)
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, orig(this.front)>
this.currentSize <= orig(this.front)
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.currentSize, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), this.back>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.front), this.back>
this.back >= orig(this.back)
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.back, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.currentSize), size(this.theArray[])>
orig(this.currentSize) <= size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % 1 ) holds for: <orig(this.front), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.front), size(this.theArray[])>
orig(this.front) <= size(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 != 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) or (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != 0) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.back), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , orig(this.back)>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.back , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.currentSize) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , orig(this.back) , size(this.theArray[])>
Exiting Daikon.

# Filtering step

- Mutation is: 1:STD:<ASSIGN>:<NO-OP>:DataStructures.QueueAr@<init>(int):32:theArray = new Object[capacity] |==> <NO-OP>
Checking invs on mutant: experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m1.dtrace.gz
Loaded invs from previous step: 0
                                                                               [11:06:41 AM]:                                                                 
No return from procedure observed 241 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 241 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 0 errors found in 0 samples (NaN%)
QueueArTesterDriver.inv.gz: 0 false positives, out of 0, which is NaN%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 0
Saving - Total: 0
Saving mutants results file

- Mutation is: 10:AOR:-(int,int):%(int,int):DataStructures.QueueAr@<init>(int):35:theArray.length - 1 |==> theArray.length % 1
Checking invs on mutant: experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m10.dtrace.gz
Loaded invs from previous step: 0
                                                                               [11:06:42 AM]:                                                                 Loaded objects from file: /specfuzzer/experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m10-objects.xml
Total loaded objects: 2860
[11:06:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:06:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:06:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:06:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:06:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:06:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:06:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:06:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:06:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:06:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:06:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:06:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:06:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:06:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:07:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:08:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:09:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA
No return from procedure observed 12 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 4 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 10,960 errors found in 5,129,831 samples (0.21%)
QueueArTesterDriver.inv.gz: 1164 false positives, out of 21362, which is 5.45%.
Preserving 373 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 0
Saving - Total: 373
Saving mutants results file

- Mutation is: 11:AOR:-(int,int):*(int,int):DataStructures.QueueAr@<init>(int):35:theArray.length - 1 |==> theArray.length QueueArTesterDriver.inv.gz base-invs-by-mutants.csv base_invs_file.xml experiments hs_err_pid1983241.log hs_err_pid51463.log invs-by-mutants.csv invs.csv invs_file.xml lib literals mutants scripts testers 1
Checking invs on mutant: experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m11.dtrace.gz
Loaded invs from previous step: 373
                                                                               [11:10:18 AM]:                                                                 Loaded objects from file: /specfuzzer/experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m11-objects.xml
Total loaded objects: 2012
[11:10:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:10:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:11:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA
No return from procedure observed 107 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 99 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 87,126 errors found in 2,995,859 samples (2.91%)
QueueArTesterDriver.inv.gz: 1057 false positives, out of 21362, which is 4.95%.
Preserving 289 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 373
Saving - Total: 407
Saving mutants results file

- Mutation is: 12:AOR:-(int,int):+(int,int):DataStructures.QueueAr@<init>(int):35:theArray.length - 1 |==> theArray.length + 1
Checking invs on mutant: experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m12.dtrace.gz
Loaded invs from previous step: 407
                                                                               [11:12:22 AM]: Checking size of experiments/QueueAr_makeEmpty/setup-files/mutanLoaded objects from file: /specfuzzer/experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m12-objects.xml
Total loaded objects: 2012
[11:12:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:12:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:13:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA
No return from procedure observed 107 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 99 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 89,733 errors found in 2,995,859 samples (3.00%)
QueueArTesterDriver.inv.gz: 1034 false positives, out of 21362, which is 4.84%.
Preserving 286 new invariants to file /specfuzzer/invs_file.xml
                                                                               Already preserved invariants: 407
Saving - Total: 501
Saving mutants results file

- Mutation is: 13:AOR:-(int,int):/(int,int):DataStructures.QueueAr@<init>(int):35:theArray.length - 1 |==> theArray.length / 1
Checking invs on mutant: experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m13.dtrace.gz
Loaded invs from previous step: 501
                                                                               [11:14:31 AM]:                                                                 Loaded objects from file: /specfuzzer/experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m13-objects.xml
Total loaded objects: 2012
[11:14:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:14:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:15:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA
No return from procedure observed 107 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 99 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 87,126 errors found in 2,995,859 samples (2.91%)
QueueArTesterDriver.inv.gz: 1057 false positives, out of 21362, which is 4.95%.
Preserving 289 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 501
Saving - Total: 501
                                                                               Saving mutants results file

- Mutation is: 14:STD:<ASSIGN>:<NO-OP>:DataStructures.QueueAr@<init>(int):35:back = theArray.length - 1 |==> <NO-OP>
Checking invs on mutant: experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m14.dtrace.gz
Loaded invs from previous step: 501
                                                                               [11:16:44 AM]:                                                                 Loaded objects from file: /specfuzzer/experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m14-objects.xml
Total loaded objects: 2860
[11:16:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:16:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:17:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:18:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:19:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA
No return from procedure observed 12 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 4 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 10,960 errors found in 5,129,831 samples (0.21%)
QueueArTesterDriver.inv.gz: 1164 false positives, out of 21362, which is 5.45%.
Preserving 373 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 501
Saving - Total: 501
Saving mutants results file

- Mutation is: 2:LVR:0:POS:DataStructures.QueueAr@<init>(int):33:0 |==> 1
Checking invs on mutant: experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m2.dtrace.gz
Loaded invs from previous step: 501
                                                                               [11:20:12 AM]:                                                                 Loaded objects from file: /specfuzzer/experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m2-objects.xml
Total loaded objects: 2873
[11:20:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:20:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:21:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:22:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:23:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA
No return from procedure observed 21 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 9 invocations
  DataStructures.QueueAr.getFront() : 1 invocation
  DataStructures.QueueAr.dequeue() : 2 invocations
  DataStructures.QueueAr.dequeueAll() : 1 invocation
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 48,441 errors found in 5,305,966 samples (0.91%)
QueueArTesterDriver.inv.gz: 1243 false positives, out of 21362, which is 5.82%.
Preserving 592 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 501
Saving - Total: 990
Saving mutants results file

- Mutation is: 23:LVR:0:POS:DataStructures.QueueAr@makeEmpty():61:0 |==> 1
Checking invs on mutant: experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m23.dtrace.gz
Loaded invs from previous step: 990
                                                                               [11:23:58 AM]:                                                                 Loaded objects from file: /specfuzzer/experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m23-objects.xml
Total loaded objects: 2937
[11:23:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:24:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:25:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:26:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:27:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA
No return from procedure observed 13 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.QueueAr.QueueAr(int) : 8 invocations
  DataStructures.QueueAr.enqueue(java.lang.Object) : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

QueueArTesterDriver.inv.gz: 104,388 errors found in 5,645,097 samples (1.85%)
QueueArTesterDriver.inv.gz: 1330 false positives, out of 21362, which is 6.23%.
Preserving 649 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 990
Saving - Total: 1193
Saving mutants results file

- Mutation is: 24:LVR:0:NEG:DataStructures.QueueAr@makeEmpty():61:0 |==> -1
Checking invs on mutant: experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m24.dtrace.gz
Loaded invs from previous step: 1193
                                                                               [11:28:08 AM]:                                                                 [11:28:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueALoaded objects from file: /specfuzzer/experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m24-objects.xml
Total loaded objects: 140
[11:28:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:28:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:29:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:30:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:31:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:32:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:33:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:34:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:35:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:36:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:37:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:38:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:39:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:32 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:33 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:34 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:35 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:36 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:37 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:38 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:39 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:40 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:41 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:42 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:43 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:44 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:45 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:46 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:47 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:48 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:49 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:50 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:51 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:52 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:53 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:54 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:55 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:56 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:57 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:58 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:40:59 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:00 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:01 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:02 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:03 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:04 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:05 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:06 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:07 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:08 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:09 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:10 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:11 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:12 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:13 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:14 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:15 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:16 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:17 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:18 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:19 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:20 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:21 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:22 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:23 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:24 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:25 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:26 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:27 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:28 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:29 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:30 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[11:41:31 AM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:00:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:01:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:02:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:03:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:04:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:05:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:06:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:07:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:08:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:09:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:10:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:11:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:12:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:13:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:14:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:15:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:16:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:17:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:18:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:19:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:20:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:21:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:22:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:23:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:24:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:25:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:26:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:27:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:28:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:29:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:30:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:31:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:32:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:33:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:34:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:35:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:36:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:37:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:38:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:39:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:40:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:41:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:42:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:43:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:44:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:45:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:46:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:47:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:48:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:49:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:50:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:51:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:52:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:53:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:54:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:55:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:56:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:57:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:58:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[12:59:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueA[1:00:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:00:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:01:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:02:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:03:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:04:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:05:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:06:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:07:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:08:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:09:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:10:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:10:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:10:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:10:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:10:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:10:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:10:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:10:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:10:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:10:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:10:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:10:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:10:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:10:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:10:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:10:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:10:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:10:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:10:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:10:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:10:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:10:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:10:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:10:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:10:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:10:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:11:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:11:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:11:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:11:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:11:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:11:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:11:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:11:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:11:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:11:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:11:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:11:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:11:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:11:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:12:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:13:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:14:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:15:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:16:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:21 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:17:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:18:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:18:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:18:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:18:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:18:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:18:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:18:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:18:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:18:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:18:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:19:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:19:11 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:19:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:19:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:19:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:19:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:19:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:19:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:19:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:19:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:19:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:19:48 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:19:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:19:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:20:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:20:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:20:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:20:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:20:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:20:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:20:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:20:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:20:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:20:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:20:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:20:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:20:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:21:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:21:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:21:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:21:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:21:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:21:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:21:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:21:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:21:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:21:33 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:21:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:21:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:21:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:21:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:21:42 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:21:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:21:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:21:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:21:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:21:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:21:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:21:55 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:21:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:21:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:21:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:05 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:17 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:32 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:37 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:46 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:53 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:22:59 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:23:02 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:23:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:23:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:23:08 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:23:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:23:12 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:23:15 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:23:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:23:18 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:23:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:23:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:23:25 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:23:28 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:23:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:23:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:23:34 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:23:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:23:40 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:23:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:23:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:23:47 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:23:51 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:23:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:23:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:24:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:24:04 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:24:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:24:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:24:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:24:16 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:24:19 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:24:22 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:24:26 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:24:29 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:24:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:24:35 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:24:38 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:24:41 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:24:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:24:45 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:24:50 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:24:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:24:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:24:58 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:25:00 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:25:01 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:25:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:25:09 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:25:10 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:25:13 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:25:14 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:25:20 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:25:23 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:25:24 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:25:27 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:25:30 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:25:31 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:25:36 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:25:39 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:25:43 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:25:44 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:25:49 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:25:52 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:25:54 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:25:56 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:25:57 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:26:03 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:26:06 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr[1:26:07 PM]: Reading experiments/QueueAr_makeEmpty/setup-files/mutants/QueueAr#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fb75a624d50, pid=53479, tid=0x00007fb74314f700
#
# JRE version: OpenJDK Runtime Environment (8.0_312-b07) (build 1.8.0_312-8u312-b07-0ubuntu1~18.04-b07)
# Java VM: OpenJDK 64-Bit Server VM (25.312-b07 mixed mode linux-amd64 compressed oops)
# Problematic frame:
# V  [libjvm.so+0x669d50]
#
# Core dump written. Default location: /specfuzzer/core or core.53479
#
# An error report file with more information is saved as:
# /specfuzzer/hs_err_pid53479.log
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
#
Saving mutants results file

Filtering step finished due to timeout: 8372
# Filtering step took minutes: 139
# Mutation killing ability results saved in: experiments/QueueAr_makeEmpty/output/QueueAr-makeEmpty-specfuzzer-1-invs-by-mutants.csv

# Writing assertions to file: experiments/QueueAr_makeEmpty/output/QueueAr-makeEmpty-specfuzzer-1.assertions

# Filtering specs with buckets
> Mutant filter from file: experiments/QueueAr_makeEmpty/output/QueueAr-makeEmpty-specfuzzer-1-invs-by-mutants.csv
Unique mutants: 8
Loading assertions from: experiments/QueueAr_makeEmpty/output/QueueAr-makeEmpty-specfuzzer-1.assertions
Specs killing mutants: 142

> Minimizing by exploring the bit vector of each spec
Building bit vectors of size: 8
Building buckets
=====================================
Buckets: 9
Vector: [1. 1. 1. 1. 1. 0. 0. 0.]
Mutants:
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m10.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m11.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m12.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m13.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m14.dtrace.gz
Specs:
	this.back <= daikon.Quant.size(this.theArray)-1 l:  47  - Fails:  3835 Quality:  3835
	this.back == daikon.Quant.size(this.theArray)-1 l:  47  - Fails:  2942 Quality:  2942
	FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)> l:  158  - Fails:  788 Quality:  791
	FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)> l:  162  - Fails:  788 Quality:  791
	FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)> l:  152  - Fails:  788 Quality:  791
	FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)> l:  152  - Fails:  788 Quality:  791
	FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)> l:  152  - Fails:  788 Quality:  791
	FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)> l:  158  - Fails:  788 Quality:  791
	FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)> l:  156  - Fails:  788 Quality:  791
	FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)> l:  152  - Fails:  788 Quality:  791
	this.back >= \old(this.back) l:  28  - Fails:  788 Quality:  788
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)> l:  166  - Fails:  62 Quality:  65
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)> l:  166  - Fails:  62 Quality:  65
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)> l:  172  - Fails:  62 Quality:  65
Picked:
	this.back <= daikon.Quant.size(this.theArray)-1
	this.back == daikon.Quant.size(this.theArray)-1

Vector: [1. 0. 0. 0. 1. 1. 1. 1.]
Mutants:
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m10.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m14.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m2.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m23.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m24.dtrace.gz
Specs:
	daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null) l:  67  - Fails:  107 Quality:  107
	FuzzedInvariant ( no n : QueueAr.theArray : n != null ) holds for: orig(this) l:  77  - Fails:  77 Quality:  77
	FuzzedInvariant ( all n : QueueAr.theArray : n = null ) holds for: orig(this) l:  77  - Fails:  77 Quality:  77
Picked:
	daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null)

Vector: [1. 1. 1. 1. 1. 0. 1. 1.]
Mutants:
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m10.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m11.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m12.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m13.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m14.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m23.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m24.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.back)> l:  141  - Fails:  1552 Quality:  1555
Picked:
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.back)>

Vector: [1. 1. 1. 1. 1. 1. 1. 1.]
Mutants:
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m10.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m11.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m12.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m13.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m14.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m2.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m23.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m24.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)> l:  156  - Fails:  1320 Quality:  1323
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.currentSize) , this.back , orig(this.back)> l:  147  - Fails:  1218 Quality:  1221
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <orig(this.front) , this.back , orig(this.back)> l:  141  - Fails:  810 Quality:  813
Picked:
	FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>

Vector: [0. 1. 1. 1. 0. 0. 0. 0.]
Mutants:
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m11.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m12.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m13.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)> l:  167  - Fails:  768 Quality:  771
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)> l:  167  - Fails:  768 Quality:  771
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)> l:  173  - Fails:  768 Quality:  771
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)> l:  172  - Fails:  42 Quality:  45
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.front) , this.back , orig(this.back)> l:  172  - Fails:  42 Quality:  45
	FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <orig(this.currentSize) , this.back , orig(this.back)> l:  178  - Fails:  42 Quality:  45
Picked:
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>

Vector: [0. 0. 1. 0. 0. 0. 1. 1.]
Mutants:
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m12.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m23.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m24.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.back)> l:  141  - Fails:  280 Quality:  283
Picked:
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.back)>

Vector: [0. 0. 0. 0. 0. 1. 1. 1.]
Mutants:
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m2.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m23.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m24.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back> l:  106  - Fails:  2918 Quality:  2920
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, this.back> l:  105  - Fails:  2918 Quality:  2920
	FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back> l:  104  - Fails:  1694 Quality:  1696
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, this.back> l:  106  - Fails:  1694 Quality:  1696
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, this.back> l:  105  - Fails:  1694 Quality:  1696
	FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back> l:  104  - Fails:  1694 Quality:  1696
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, this.back> l:  105  - Fails:  1694 Quality:  1696
	this.currentSize == 0 l:  21  - Fails:  1694 Quality:  1694
	this.currentSize == this.front l:  30  - Fails:  1694 Quality:  1694
	FuzzedInvariant ( Integer_Variable_0 <= #(QueueAr.theArray) ) holds for: <orig(this), this.currentSize> l:  103  - Fails:  925 Quality:  926
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)> l:  154  - Fails:  892 Quality:  895
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.currentSize) , this.back> l:  148  - Fails:  672 Quality:  675
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.currentSize), this.back> l:  111  - Fails:  136 Quality:  138
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.currentSize), this.back> l:  112  - Fails:  136 Quality:  138
	FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back> l:  120  - Fails:  82 Quality:  84
	FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, this.back> l:  121  - Fails:  82 Quality:  84
	this.currentSize <= daikon.Quant.size(this.theArray) l:  52  - Fails:  52 Quality:  52
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <orig(this.front), this.back> l:  106  - Fails:  26 Quality:  28
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.front), this.back> l:  105  - Fails:  26 Quality:  28
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back> l:  180  - Fails:  20 Quality:  23
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, this.back> l:  137  - Fails:  12 Quality:  14
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, this.back> l:  131  - Fails:  12 Quality:  14
Picked:
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>
	this.currentSize <= daikon.Quant.size(this.theArray)

Vector: [0. 0. 0. 0. 0. 1. 0. 0.]
Mutants:
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m2.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back> l:  174  - Fails:  14 Quality:  17
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back> l:  174  - Fails:  14 Quality:  17
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <orig(this.front) , orig(this.currentSize) , this.back> l:  180  - Fails:  12 Quality:  15
	FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.back> l:  127  - Fails:  4 Quality:  6
	FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.currentSize), this.back> l:  126  - Fails:  4 Quality:  6
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.currentSize), this.back> l:  143  - Fails:  2 Quality:  4
	\old(this.currentSize) <= daikon.Quant.size(this.theArray) l:  58  - Fails:  4 Quality:  4
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <orig(this.currentSize), this.back> l:  137  - Fails:  2 Quality:  4
Picked:
	\old(this.currentSize) <= daikon.Quant.size(this.theArray)
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>

Vector: [0. 0. 0. 0. 0. 0. 1. 1.]
Mutants:
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m23.dtrace.gz
	experiments/QueueAr_makeEmpty/setup-files/mutants/QueueArTesterDriver-m24.dtrace.gz
Specs:
	FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)> l:  150  - Fails:  1048 Quality:  1051
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)> l:  118  - Fails:  1048 Quality:  1050
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.back)> l:  111  - Fails:  1048 Quality:  1050
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.back)> l:  112  - Fails:  1048 Quality:  1050
	FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)> l:  117  - Fails:  1048 Quality:  1050
	FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.currentSize)> l:  129  - Fails:  1048 Quality:  1050
	FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.currentSize)> l:  117  - Fails:  1048 Quality:  1050
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.front)> l:  112  - Fails:  1048 Quality:  1050
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.back)> l:  111  - Fails:  1048 Quality:  1050
	FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.currentSize)> l:  129  - Fails:  1048 Quality:  1050
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.currentSize)> l:  118  - Fails:  1048 Quality:  1050
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.front)> l:  113  - Fails:  1048 Quality:  1050
	FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.front)> l:  111  - Fails:  1048 Quality:  1050
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.currentSize, orig(this.currentSize)> l:  119  - Fails:  1048 Quality:  1050
	FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)> l:  111  - Fails:  1048 Quality:  1050
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.front)> l:  112  - Fails:  1048 Quality:  1050
	FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 * 0 ) holds for: <this.currentSize, orig(this.back)> l:  110  - Fails:  1048 Quality:  1050
	FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = -1) ) holds for: <this.currentSize, orig(this.front)> l:  123  - Fails:  1048 Quality:  1050
	FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > -1) ) holds for: <this.currentSize, orig(this.front)> l:  123  - Fails:  1048 Quality:  1050
	FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 % 1 ) holds for: <this.currentSize, orig(this.back)> l:  110  - Fails:  1048 Quality:  1050
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.front)> l:  139  - Fails:  1028 Quality:  1030
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.currentSize, orig(this.currentSize)> l:  145  - Fails:  1016 Quality:  1018
	FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back> l:  157  - Fails:  1012 Quality:  1015
	FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back> l:  163  - Fails:  1012 Quality:  1015
	FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back> l:  151  - Fails:  1012 Quality:  1015
	FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back> l:  157  - Fails:  1012 Quality:  1015
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , orig(this.back)> l:  148  - Fails:  1008 Quality:  1011
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)> l:  155  - Fails:  952 Quality:  955
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)> l:  185  - Fails:  896 Quality:  899
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , this.back> l:  142  - Fails:  896 Quality:  899
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.front)> l:  143  - Fails:  896 Quality:  898
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.front)> l:  108  - Fails:  896 Quality:  898
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.front)> l:  139  - Fails:  896 Quality:  898
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.front)> l:  112  - Fails:  896 Quality:  898
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)> l:  112  - Fails:  896 Quality:  898
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.front)> l:  142  - Fails:  896 Quality:  898
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.front)> l:  112  - Fails:  896 Quality:  898
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.front)> l:  112  - Fails:  896 Quality:  898
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.front)> l:  111  - Fails:  896 Quality:  898
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)> l:  142  - Fails:  896 Quality:  898
	this.currentSize <= \old(this.front) l:  36  - Fails:  896 Quality:  896
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back> l:  172  - Fails:  888 Quality:  891
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)> l:  178  - Fails:  888 Quality:  891
	FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)> l:  164  - Fails:  760 Quality:  763
	FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)> l:  169  - Fails:  748 Quality:  751
	FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)> l:  163  - Fails:  748 Quality:  751
	FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)> l:  163  - Fails:  732 Quality:  735
	FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)> l:  157  - Fails:  732 Quality:  735
	FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)> l:  145  - Fails:  668 Quality:  670
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)> l:  148  - Fails:  668 Quality:  670
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)> l:  117  - Fails:  668 Quality:  670
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 = 1) ) holds for: <this.currentSize, orig(this.currentSize)> l:  148  - Fails:  668 Quality:  670
	FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.currentSize)> l:  118  - Fails:  668 Quality:  670
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.currentSize, orig(this.currentSize)> l:  118  - Fails:  668 Quality:  670
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.currentSize, orig(this.currentSize)> l:  149  - Fails:  668 Quality:  670
	FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.currentSize)> l:  118  - Fails:  668 Quality:  670
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.currentSize, orig(this.currentSize)> l:  114  - Fails:  668 Quality:  670
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.currentSize, orig(this.currentSize)> l:  118  - Fails:  668 Quality:  670
	this.currentSize <= \old(this.currentSize) l:  42  - Fails:  668 Quality:  668
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)> l:  184  - Fails:  660 Quality:  663
	FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back> l:  178  - Fails:  660 Quality:  663
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)> l:  155  - Fails:  612 Quality:  615
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.currentSize)> l:  150  - Fails:  348 Quality:  350
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.currentSize)> l:  144  - Fails:  348 Quality:  350
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.currentSize)> l:  145  - Fails:  348 Quality:  350
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.currentSize)> l:  146  - Fails:  348 Quality:  350
	FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.back)> l:  157  - Fails:  316 Quality:  319
	FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , orig(this.back)> l:  163  - Fails:  300 Quality:  303
	FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)> l:  164  - Fails:  288 Quality:  291
	FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)> l:  170  - Fails:  288 Quality:  291
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.currentSize, orig(this.front)> l:  140  - Fails:  132 Quality:  134
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.front)> l:  144  - Fails:  132 Quality:  134
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.front)> l:  138  - Fails:  132 Quality:  134
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.currentSize, orig(this.front)> l:  139  - Fails:  132 Quality:  134
	FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back> l:  151  - Fails:  36 Quality:  39
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , orig(this.currentSize)> l:  181  - Fails:  36 Quality:  39
	FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back> l:  157  - Fails:  36 Quality:  39
	FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 > 0) ) holds for: <this.currentSize, orig(this.back)> l:  137  - Fails:  36 Quality:  38
	FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.currentSize, orig(this.back)> l:  143  - Fails:  36 Quality:  38
	FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.currentSize , orig(this.front) , this.back> l:  174  - Fails:  8 Quality:  11
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, orig(this.back)> l:  112  - Fails:  8 Quality:  10
	FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.back)> l:  126  - Fails:  8 Quality:  10
	FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.currentSize, orig(this.back)> l:  111  - Fails:  8 Quality:  10
	FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 != -1) ) holds for: <this.currentSize, orig(this.back)> l:  127  - Fails:  8 Quality:  10
Picked:
	FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>

Buckets: 9
Specs: 12
Saved in file: experiments/QueueAr_makeEmpty/output/QueueAr-makeEmpty-specfuzzer-1-buckets.assertions

