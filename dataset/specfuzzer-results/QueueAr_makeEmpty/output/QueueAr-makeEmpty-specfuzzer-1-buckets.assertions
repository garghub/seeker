buckets=9
specs=12
=====================================
:::OBJECT
this.back <= daikon.Quant.size(this.theArray)-1
this.currentSize <= daikon.Quant.size(this.theArray)
=====================================
:::POSTCONDITION
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.back)>
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null)
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , orig(this.currentSize) , this.back>
this.back == daikon.Quant.size(this.theArray)-1
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
\old(this.currentSize) <= daikon.Quant.size(this.theArray)
FuzzedInvariant ( (Integer_Variable_0 <= 0) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.currentSize , this.back , orig(this.back)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - -1 ) holds for: <this.currentSize, this.back>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.currentSize , this.back , orig(this.back)>
