<object-stream>
  <set>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.minx , orig(x1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) xor (Double_Variable_1 &lt; 1.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &lt;= -1.0) ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 / 1.0 ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 1.0) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) iff (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) iff (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.maxy , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) xor (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 - 0.0 ) holds for: &lt;this.miny, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) iff (Double_Variable_1 = 0.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) xor (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) or (Double_Variable_1 != 0.0) ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxy , orig(x1) , orig(this.maxx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.maxx , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.maxx , return , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= 1.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) iff (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxy , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; -1.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxy , orig(x2) , orig(this.maxy)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) or (Double_Variable_1 != 0.0) ) holds for: &lt;orig(x1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) iff (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 1.0) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxy , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) iff (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= -1.0) implies (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxy , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;this.minx, this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.maxx , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) xor (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , this.minx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) implies (Double_Variable_1 &gt; 0.0) ) holds for: &lt;orig(y1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;x1 , y2 , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) xor (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 / Double_Variable_2 ) holds for: &lt;this.miny , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) iff (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) xor (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= 0.0) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;x1 , y2 , this.minx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= -1.0) ) holds for: &lt;this.minx, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , return , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(y1) , orig(y2) , orig(this.maxy)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.minx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) xor (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(y2) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) xor (Double_Variable_1 &lt;= 0.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 = 1.0) ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) implies (Double_Variable_1 &gt; 0.0) ) holds for: &lt;orig(y1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; -1.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= 0.0) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;orig(y1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= -1.0) implies (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) or (Double_Variable_1 != 0.0) ) holds for: &lt;this.maxy, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;x1 , y2 , this.minx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - Double_Variable_2 ) holds for: &lt;this.maxy , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) iff (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 0.0) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt; Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 + 1.0 ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) xor (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.miny , return , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.minx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) implies (Double_Variable_1 &gt; 0.0) ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) xor (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) xor (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 != -1.0) ) holds for: &lt;this.miny, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , return , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxy , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) xor (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.maxx, this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(y2) , orig(this.maxx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) or (Double_Variable_1 != 0.0) ) holds for: &lt;orig(y1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxy , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 ) holds for: &lt;this.miny, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , orig(y2) , orig(this.miny)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) xor (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(this.maxx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) xor (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; -1.0) implies (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;this.maxy, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) xor (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 0.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.minx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.minx , orig(x1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(y2) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) xor (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) iff (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.minx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(y1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt; Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.minx , this.maxx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= -1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.maxy, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) xor (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.minx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 0.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x2) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y2) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = -1.0) or (Double_Variable_1 != 0.0) ) holds for: &lt;this.maxy, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) xor (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;orig(y1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 = -1.0) ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.maxy, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) iff (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , return , return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt; Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.miny , return , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) xor (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) xor (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.miny , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.minx , this.minx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) iff (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt; Double_Variable_1 * Double_Variable_2 ) holds for: &lt;this.maxy , return , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - Double_Variable_2 ) holds for: &lt;this.maxx , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) xor (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.maxx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;this.maxy, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) iff (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;orig(y1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= -1.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) or (Double_Variable_1 != 0.0) ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) xor (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.minx , return , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) iff (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) xor (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.miny , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.minx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(y1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.minx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &lt; -1.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 + 1.0 ) holds for: &lt;orig(y1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.miny , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y2) , orig(this.miny)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + 1.0 ) holds for: &lt;this.minx, orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 0.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 1.0) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) xor (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxy , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 1.0) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) xor (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 * Double_Variable_2 ) holds for: &lt;this.maxx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + 0.0 ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 / 1.0 ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + 1.0 ) holds for: &lt;orig(y1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 * Double_Variable_2 ) holds for: &lt;this.minx , this.maxx , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.maxy, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) or (Double_Variable_1 != 0.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) or (Double_Variable_1 != 0.0) ) holds for: &lt;orig(x1), this.miny&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - 1.0 ) holds for: &lt;orig(y1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) xor (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt; Double_Variable_1 * Double_Variable_2 ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) implies (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.minx , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) iff (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxy , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;x1 , y2 , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 != -1.0) ) holds for: &lt;this.maxx, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.minx , orig(x1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) implies (Double_Variable_1 &gt; 0.0) ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x2) , orig(this.maxy)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.minx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;x1 , y2 , this.minx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) iff (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.miny , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;this.maxy, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 % 1.0 ) holds for: &lt;this.maxx, this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.minx , this.maxx , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.maxy, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , orig(x2) , orig(this.miny)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.minx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - 1.0 ) holds for: &lt;orig(x1), this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) iff (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , return , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , orig(this.maxy)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt; Double_Variable_1 + 1.0 ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &gt; Double_Variable_1 / -1.0 ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) xor (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;x1 , y2 , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &gt; Double_Variable_1 * -1.0 ) holds for: &lt;this.maxy, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = -1.0) or (Double_Variable_1 != 0.0) ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - Double_Variable_2 ) holds for: &lt;this.minx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 1.0) or (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 * 0.0 ) holds for: &lt;this.maxx, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &lt;= -1.0) ) holds for: &lt;orig(y1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;x1 , y2 , this.minx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) iff (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= -1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxy , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.minx, this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) or (Double_Variable_1 != 0.0) ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;x1 , y2 , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - Double_Variable_2 ) holds for: &lt;this.maxx , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) iff (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt;= -1.0) ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(y1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.maxx, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , this.miny&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt; Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.maxy , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 / Double_Variable_2 ) holds for: &lt;this.maxx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) xor (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 * Double_Variable_2 ) holds for: &lt;orig(x2) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; -1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 1.0) implies (Double_Variable_1 != 0.0) ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxy , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 ) holds for: &lt;this.minx, orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y2) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxy , orig(x1) , orig(this.maxy)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) xor (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= 1.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) iff (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) iff (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) xor (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;this.maxx, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= -1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - Double_Variable_2 ) holds for: &lt;this.maxx , this.maxx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) iff (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt; Double_Variable_1 - -1.0 ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt;= 0.0) ) holds for: &lt;this.miny, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y2) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 * 1.0 ) holds for: &lt;this.minx, orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;x1 , y2 , this.minx&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &gt; Double_Variable_1 / -1.0 ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; -1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , orig(y2) , orig(this.maxx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 0.0) or (Double_Variable_1 != -1.0) ) holds for: &lt;this.miny, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) xor (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.minx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - -1.0 ) holds for: &lt;orig(x2), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) iff (Double_Variable_1 = -1.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - Double_Variable_2 ) holds for: &lt;orig(x2) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;x1 , y2 , this.miny&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;orig(x2) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 0.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.maxy , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(y2) , orig(this.miny)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) iff (Double_Variable_1 &lt;= 1.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 0.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxy , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt; Double_Variable_1 * Double_Variable_2 ) holds for: &lt;this.miny , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 0.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;x1 , y2 , this.miny&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 * Double_Variable_2 ) holds for: &lt;this.maxx , return , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 1.0) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= -1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , orig(this.maxx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= -1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) xor (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) iff (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.minx , return , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) iff (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + 1.0 ) holds for: &lt;this.miny, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.maxx , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) xor (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , this.minx , orig(x1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.minx , orig(x1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 0.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; -1.0) or (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.maxy, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= -1.0) ) holds for: &lt;this.maxx, this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) xor (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) xor (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= -1.0) implies (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;x1 , y2 , this.minx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;x2 , y2 , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 0.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(this.miny)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) iff (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.miny , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 * Double_Variable_2 ) holds for: &lt;this.maxx , this.miny , this.miny&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - Double_Variable_2 ) holds for: &lt;this.minx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - -1.0 ) holds for: &lt;this.miny, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 % -1.0 ) holds for: &lt;this.maxx, this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(this.miny)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) iff (Double_Variable_1 &gt;= -1.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) or (Double_Variable_1 &gt;= -1.0) ) holds for: &lt;this.miny, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt;= -1.0) ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; -1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 / 1.0 ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x2) , orig(y2) , orig(this.miny)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 0.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxy , orig(x1) , orig(this.maxy)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(y2) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 0.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , orig(x1) , orig(this.maxy)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != -1.0) ) holds for: &lt;this.maxx, orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(y1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxy , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= 1.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt; Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.miny , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; -1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x2) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) iff (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.maxx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= -1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - Double_Variable_2 ) holds for: &lt;this.maxx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &lt; -1.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 0.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &gt; Double_Variable_1 - Double_Variable_2 ) holds for: &lt;this.maxy , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) iff (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , return , return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.maxx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= -1.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) iff (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &gt; Double_Variable_1 * -1.0 ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) xor (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 0.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.minx , orig(x1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) xor (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) iff (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 % 1.0 ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt; Double_Variable_1 * Double_Variable_2 ) holds for: &lt;this.miny , return , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.minx, orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) xor (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;orig(x2), this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(this.miny)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &gt; -1.0) ) holds for: &lt;this.miny, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 * 0.0 ) holds for: &lt;this.maxx, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) xor (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &gt; Double_Variable_1 - Double_Variable_2 ) holds for: &lt;this.maxx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(y2) , orig(this.maxx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(y2) , orig(this.maxx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) iff (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 1.0) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) iff (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - Double_Variable_2 ) holds for: &lt;this.miny , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 0.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) xor (Double_Variable_1 &gt;= 0.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - 0.0 ) holds for: &lt;this.maxx, this.miny&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != 0.0 ) holds for: return</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 * 1.0 ) holds for: &lt;this.miny, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;this.maxx, this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , orig(this.maxy)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;this.minx, this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + -1.0 ) holds for: &lt;this.miny, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) xor (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.maxy , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 0.0) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 1.0) or (Double_Variable_1 != -1.0) ) holds for: &lt;this.maxx, orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) xor (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxy , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) xor (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.minx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= 1.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.minx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) xor (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.miny , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) xor (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = -1.0) or (Double_Variable_1 != 0.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.miny, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(y2) , orig(this.maxx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;x1 , x2 , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y2) , orig(this.maxx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) iff (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(y1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 * Double_Variable_2 ) holds for: &lt;orig(y1) , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - Double_Variable_2 ) holds for: &lt;this.maxx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(y2) , orig(this.miny)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(y2) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;orig(x1) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) xor (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.miny , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) iff (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.miny , return , return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - 0.0 ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) xor (Double_Variable_1 &gt; -1.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) xor (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) iff (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(y2) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , return , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.minx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + 0.0 ) holds for: &lt;this.maxx, this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) xor (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxy , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.minx , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 - 0.0 ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 + 0.0 ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 * Double_Variable_2 ) holds for: &lt;this.maxx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) or (Double_Variable_1 != 0.0) ) holds for: &lt;this.minx, this.maxx&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;orig(x2) , this.miny , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt; Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.maxx , this.maxx , return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 * 1.0 ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) iff (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) iff (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) iff (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = -1.0) implies (Double_Variable_1 &gt; 1.0) ) holds for: &lt;orig(x1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(x1) , orig(this.maxy)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; -1.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , return , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) iff (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.minx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.minx , orig(x1)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 / 1.0 ) holds for: &lt;this.maxx, this.miny&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - Double_Variable_2 ) holds for: &lt;this.maxx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;this.maxx, this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 * Double_Variable_2 ) holds for: &lt;this.maxy , return , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) xor (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y2) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) iff (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(y1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.maxx , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.minx , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , orig(this.maxy)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; -1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(this.miny)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 1.0) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + -1.0 ) holds for: &lt;orig(x2), this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 != -1.0) ) holds for: &lt;this.maxx, orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &gt; -1.0) ) holds for: &lt;this.minx, orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 != 1.0) ) holds for: &lt;this.maxx, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= 1.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;x1 , x2 , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;x2 , y2 , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 1.0) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) iff (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.miny , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) iff (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.miny , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= -1.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 % 1.0 ) holds for: &lt;orig(x2), this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxy , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;x2 , y2 , this.minx&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - 1.0 ) holds for: &lt;orig(x2), this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 0.0) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.minx, this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 % -1.0 ) holds for: &lt;this.maxx, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 1.0) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.minx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) iff (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) xor (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.minx , orig(x1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.miny , return , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.minx , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= 1.0) or (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;orig(y1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt;= -1.0) ) holds for: &lt;this.miny, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;y1 , y2 , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x2) , orig(this.maxx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) xor (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - Double_Variable_2 ) holds for: &lt;this.minx , this.maxx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , orig(this.miny)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.minx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt;= 0.0) ) holds for: &lt;this.minx, orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 - -1.0 ) holds for: &lt;orig(y1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y2) , orig(this.miny)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;orig(x2) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 0.0) implies (Double_Variable_1 = -1.0) ) holds for: &lt;this.maxx, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x2) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.miny , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= 1.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxy , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x2) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) iff (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.minx , this.minx , return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - 1.0 ) holds for: &lt;this.miny, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + -1.0 ) holds for: &lt;orig(y1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 / 1.0 ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt; Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.minx , this.minx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 0.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y2) , orig(this.miny)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.minx , orig(x1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= -1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) iff (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) iff (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , this.minx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;x1 , y2 , this.minx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &gt;= Double_Variable_1 % Double_Variable_2 ) holds for: &lt;this.maxy , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; -1.0) or (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y2) , orig(this.miny)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.minx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.maxy, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt;= -1.0) ) holds for: &lt;this.minx, orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) iff (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 0.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(this.maxx)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.minx , return , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , return , return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt; Double_Variable_1 + 1.0 ) holds for: &lt;this.miny, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x2) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) xor (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxy , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 - -1.0 ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) xor (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.minx , this.minx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; -1.0) or (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) xor (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , return , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) iff (Double_Variable_1 = -1.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 + 1.0 ) holds for: &lt;this.miny, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &gt; Double_Variable_1 / -1.0 ) holds for: &lt;this.maxy, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) xor (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , return , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) iff (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 * 1.0 ) holds for: &lt;orig(y1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 * 1.0 ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; -1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(this.maxx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 * Double_Variable_2 ) holds for: &lt;orig(x1) , this.maxx , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) or (Double_Variable_1 != 0.0) ) holds for: &lt;orig(x2), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= -1.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) iff (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 / 1.0 ) holds for: &lt;orig(y1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) xor (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) implies (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.maxy, return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 % Double_Variable_2 ) holds for: &lt;this.maxx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - -1.0 ) holds for: &lt;this.minx, orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; -1.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &lt; -1.0) ) holds for: &lt;this.maxx, this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(y2) , orig(this.maxy)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxy , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x2) , orig(y2) , orig(this.maxx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(y2) , orig(this.maxy)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) xor (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 * 1.0 ) holds for: &lt;this.maxx, this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x2) , orig(x2) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(y2) , orig(this.miny)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(y2) , orig(this.maxx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 0.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxy , orig(x1) , orig(this.maxx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(y2) , orig(this.miny)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 1.0) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;this.maxy, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;orig(x2), this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + 0.0 ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) xor (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxy , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 ) holds for: &lt;orig(y1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 / Double_Variable_2 ) holds for: &lt;this.maxx , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.minx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;this.maxx, this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &gt; Double_Variable_1 - Double_Variable_2 ) holds for: &lt;this.minx , this.minx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.minx , orig(x1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.miny , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 0.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &gt; Double_Variable_1 * -1.0 ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) iff (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxy , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 * Double_Variable_2 ) holds for: &lt;orig(x2) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) iff (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(y2) , orig(this.maxx)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 * Double_Variable_2 ) holds for: &lt;this.minx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;x1 , y2 , this.minx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxy , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) iff (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x2) , orig(y2) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt; Double_Variable_1 - -1.0 ) holds for: &lt;this.minx, orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &gt;= 1.0 ) holds for: return</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;orig(x1) , orig(x2) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 1.0) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) xor (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.maxx , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) iff (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 % -1.0 ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.minx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxy , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 != -1.0) ) holds for: &lt;this.miny, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x2) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - 0.0 ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt; Double_Variable_1 - 0.0 ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) xor (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(y2) , orig(this.miny)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; -1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxy , orig(x1) , orig(this.maxy)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) iff (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.minx , this.minx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + 1.0 ) holds for: &lt;orig(x2), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) iff (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x2) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(y1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y2) , orig(this.maxx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 1.0) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 1.0) or (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.maxy, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 0.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.minx , this.maxx&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt; Double_Variable_1 + 1.0 ) holds for: &lt;this.minx, orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 + 1.0 ) holds for: &lt;this.minx, orig(x2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 % -1.0 ) holds for: &lt;orig(x2), this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxy , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; -1.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) iff (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 0.0) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &lt; -1.0) ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &gt; 0.0 ) holds for: return</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(y2) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; -1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;x1 , y2 , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(x1) , orig(this.maxx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(x1) , orig(this.maxx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y2) , orig(this.maxy)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) xor (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxy , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 0.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 0.0) or (Double_Variable_1 != -1.0) ) holds for: &lt;this.minx, orig(x2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 - 0.0 ) holds for: &lt;orig(y1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 + 0.0 ) holds for: &lt;orig(y1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(y2) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - Double_Variable_2 ) holds for: &lt;this.miny , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) xor (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 0.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y2) , orig(this.maxx)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt; Double_Variable_1 + 0.0 ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= -1.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= -1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 1.0) xor (Double_Variable_1 != 0.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.minx , orig(x1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) iff (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.minx , return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 * Double_Variable_2 ) holds for: &lt;this.miny , return , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.maxx , this.miny , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) or (Double_Variable_1 &gt;= -1.0) ) holds for: &lt;this.minx, orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) iff (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.miny&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt; Double_Variable_1 - -1.0 ) holds for: &lt;this.miny, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; -1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;orig(x1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - Double_Variable_2 ) holds for: &lt;this.minx , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxy , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(y1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x2) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.maxx , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) iff (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) xor (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt; Double_Variable_1 * 1.0 ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;this.maxx, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 0.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= 1.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.minx , this.maxx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &gt;= Double_Variable_1 % Double_Variable_2 ) holds for: &lt;this.maxx , this.maxx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 * Double_Variable_2 ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , orig(this.maxx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 0.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y2) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 * 1.0 ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) xor (Double_Variable_1 &gt; -1.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.minx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) xor (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) implies (Double_Variable_1 &gt; 0.0) ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 0.0) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;orig(y1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;x1 , y2 , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) implies (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.minx, this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) iff (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.minx , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y2) , orig(this.miny)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) iff (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.minx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) xor (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(y2) , orig(this.maxx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , orig(this.maxy)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; -1.0) implies (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= 1.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= 1.0) or (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;this.minx, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) iff (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.maxy , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) xor (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.minx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) iff (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= -1.0) ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) iff (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , this.minx , orig(x1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 - -1.0 ) holds for: &lt;this.minx, orig(x2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 * Double_Variable_2 ) holds for: &lt;this.miny , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.miny , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) implies (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) iff (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &gt;= Double_Variable_1 % Double_Variable_2 ) holds for: &lt;this.minx , this.minx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 != -1.0) ) holds for: &lt;this.minx, orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(this.miny)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) implies (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 0.0) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.maxy, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) iff (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxy , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - Double_Variable_2 ) holds for: &lt;this.minx , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) iff (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxy , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;orig(x2) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; -1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y2) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.minx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 0.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) iff (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &gt; Double_Variable_1 - Double_Variable_2 ) holds for: &lt;this.maxx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 != 0.0) ) holds for: &lt;orig(y1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;this.maxy, return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.minx , this.maxx , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &gt; Double_Variable_1 - Double_Variable_2 ) holds for: &lt;this.miny , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;orig(x1) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxy , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;x1 , y2 , this.minx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; -1.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxy , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) xor (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.minx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , orig(x2) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) iff (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 / 1.0 ) holds for: &lt;this.minx, orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) or (Double_Variable_1 &gt;= -1.0) ) holds for: &lt;this.miny, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) iff (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxy , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; -1.0) implies (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;this.minx, this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.minx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= 1.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.minx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y2) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) iff (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - -1.0 ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 + 0.0 ) holds for: &lt;this.miny, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(y1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) iff (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt;= 0.0) ) holds for: &lt;this.maxx, orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 * Double_Variable_2 ) holds for: &lt;this.minx , return , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 0.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 % -1.0 ) holds for: &lt;this.maxx, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - -1.0 ) holds for: &lt;orig(y1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(y1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;x1 , y2 , this.miny&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - -1.0 ) holds for: &lt;orig(x1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) iff (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxy , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 1.0) or (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) iff (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 * 1.0 ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;this.maxx, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 / Double_Variable_2 ) holds for: &lt;this.minx , return , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(this.miny)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) xor (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , this.miny&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + -1.0 ) holds for: &lt;orig(x1), this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 * Double_Variable_2 ) holds for: &lt;this.maxx , this.miny , orig(this.miny)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 * 0.0 ) holds for: &lt;this.maxx, this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y2) , orig(this.miny)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 * Double_Variable_2 ) holds for: &lt;this.minx , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 1.0) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , orig(x1) , orig(this.maxy)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) xor (Double_Variable_1 &gt;= 0.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 != 0.0) ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 1.0) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 * Double_Variable_2 ) holds for: &lt;this.maxx , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxy , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; -1.0) implies (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 0.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - Double_Variable_2 ) holds for: &lt;this.minx , this.minx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) iff (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.minx , orig(x1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= 1.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.maxy, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; -1.0) implies (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 = 0.0) ) holds for: &lt;this.minx, orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) iff (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) xor (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + 0.0 ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.maxx, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y2) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; -1.0) or (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(y1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y2) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 0.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;x1 , y2 , this.minx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; -1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;x1 , y2 , this.minx&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;this.maxy, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 % 1.0 ) holds for: &lt;this.maxx, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) iff (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; -1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y2) , orig(this.maxx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = -1.0) or (Double_Variable_1 != 0.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 * Double_Variable_2 ) holds for: &lt;orig(x2) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(y2) , orig(this.miny)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;x1 , y2 , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; -1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxy , orig(x1) , orig(this.maxx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.minx , this.maxx , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.maxy, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) iff (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(y1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - Double_Variable_2 ) holds for: &lt;this.minx , this.maxx , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) iff (Double_Variable_1 &gt;= -1.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) xor (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.minx , this.minx , return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;orig(x2) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;this.maxy, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;this.maxy, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) implies (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - 0.0 ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) iff (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , return , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y2) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;orig(x1) , this.maxx , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 + 0.0 ) holds for: &lt;this.minx, orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y2) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 - 0.0 ) holds for: &lt;this.minx, orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= -1.0) implies (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.maxy, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) iff (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != -1.0) or (Double_Variable_1 != 0.0) ) holds for: &lt;orig(x2), this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; -1.0) implies (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt; Double_Variable_1 ) holds for: &lt;this.miny, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) xor (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.maxy , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;x1 , y2 , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x2) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 ) holds for: &lt;this.maxx, this.miny&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &gt; Double_Variable_1 - Double_Variable_2 ) holds for: &lt;this.maxx , this.maxx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 != -1.0) ) holds for: &lt;this.minx, orig(y1)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt; Double_Variable_1 + 1.0 ) holds for: &lt;orig(y1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &gt; 1.0 ) holds for: return</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) xor (Double_Variable_1 = 0.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + -1.0 ) holds for: &lt;this.maxx, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(y1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.minx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 / 1.0 ) holds for: &lt;this.miny, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 0.0) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(y2) , orig(this.miny)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + 1.0 ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.miny , return , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , return , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) implies (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) iff (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.minx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) xor (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.minx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(x1) , this.maxx&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt;= Double_Variable_1 - -1.0 ) holds for: &lt;this.miny, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) xor (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt; Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.miny , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) xor (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.miny , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - 1.0 ) holds for: &lt;orig(x1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + 1.0 ) holds for: &lt;orig(x1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.minx , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - Double_Variable_2 ) holds for: &lt;orig(x1) , orig(x2) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 = 0.0) ) holds for: &lt;this.minx, orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.maxy , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(x1) , orig(this.maxy)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , orig(x2) , orig(this.maxx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.miny , orig(x2) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= -1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) or (Double_Variable_1 != 0.0) ) holds for: &lt;this.minx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - Double_Variable_2 ) holds for: &lt;this.maxx , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , orig(this.maxy)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) or (Double_Variable_1 != 0.0) ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) iff (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 0.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;x1 , y2 , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) xor (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxx , this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 0.0) or (Double_Variable_1 != -1.0) ) holds for: &lt;this.minx, orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(this.miny)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(y2) , orig(this.minx)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) implies (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.maxx, this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 &lt; Double_Variable_1 - -1.0 ) holds for: &lt;orig(y1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 = 0.0) ) holds for: &lt;this.miny, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) xor (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.miny , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 != 0.0) ) holds for: &lt;orig(y1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;this.miny, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) iff (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 1.0) or (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &gt; 1.0) ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= 0.0) implies (Double_Variable_1 != -1.0) ) holds for: &lt;this.maxx, orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.miny , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) iff (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(x1) , orig(x1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) iff (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.maxx , this.miny , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 = 0.0) ) holds for: &lt;this.miny, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) or (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;orig(y1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= -1.0) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;orig(x1), this.maxx&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxy , orig(y2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + -1.0 ) holds for: &lt;orig(x1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= 1.0) implies (Double_Variable_1 != 0.0) ) holds for: &lt;orig(y1), this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt;= Double_Variable_1) xor (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxy , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.maxx , this.maxx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 = Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 0.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.minx , this.maxx , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.miny , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) xor (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.maxx , this.maxx , orig(x2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x2) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) or (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) iff (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxx , orig(x2) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 % 1.0 ) holds for: &lt;this.maxx, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = Double_Variable_1) iff (Double_Variable_1 &gt; Double_Variable_2) ) holds for: &lt;this.miny , return , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) or (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , orig(y2) , orig(this.miny)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + 1.0 ) holds for: &lt;this.maxx, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; 1.0) or (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;this.maxy , this.maxy , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) implies (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.minx , orig(y1) , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - 1.0 ) holds for: &lt;this.maxx, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= -1.0) implies (Double_Variable_1 &gt;= Double_Variable_2) ) holds for: &lt;orig(x1) , this.maxy , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 - -1.0 ) holds for: &lt;this.maxx, orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) iff (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , orig(y1) , orig(y2)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; -1.0) implies (Double_Variable_1 &gt;= 1.0) ) holds for: &lt;this.maxx, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &lt; 1.0) implies (Double_Variable_1 != Double_Variable_2) ) holds for: &lt;orig(x2) , orig(x2) , this.miny&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt; Double_Variable_1) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , orig(x2) , orig(y1)&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 = 0.0) implies (Double_Variable_1 &lt; Double_Variable_2) ) holds for: &lt;this.minx , this.minx , return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 != Double_Variable_1) or (Double_Variable_1 &gt; 0.0) ) holds for: &lt;this.maxy, return&gt;</string>
    <string>FuzzedInvariant ( (Double_Variable_0 &gt;= Double_Variable_1) xor (Double_Variable_1 &lt;= Double_Variable_2) ) holds for: &lt;this.miny , this.maxy , this.maxy&gt;</string>
    <string>FuzzedInvariant ( Double_Variable_0 != Double_Variable_1 + Double_Variable_2 ) holds for: &lt;this.minx , this.maxx , orig(x2)&gt;</string>
  </set>
</object-stream>