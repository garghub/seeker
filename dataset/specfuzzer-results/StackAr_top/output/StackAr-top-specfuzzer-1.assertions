===========================================================================
DataStructures.StackAr:::OBJECT
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class.getName()
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.topOfStack
this.topOfStack >= -1
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <this, DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 > #(StackAr.theArray) ) holds for: <this, DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 >= #(StackAr.theArray) ) holds for: <this, DataStructures.StackAr.DEFAULT_CAPACITY>
this.topOfStack <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.StackAr.top():::ENTER
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <this, this.topOfStack>
===========================================================================
DataStructures.StackAr.top():::EXIT
this.theArray == \old(this.theArray)
this.theArray.getClass().getName() == \old(this.theArray.getClass().getName())
daikon.Quant.pairwiseEqual(this.theArray, \old(this.theArray))
this.topOfStack == \old(this.topOfStack)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
this.theArray.getClass().getName() != \result.getClass().getName()
daikon.Quant.memberOf(\result.getClass().getName() , daikon.Quant.typeArray(this.theArray) )
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 > #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 >= #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
