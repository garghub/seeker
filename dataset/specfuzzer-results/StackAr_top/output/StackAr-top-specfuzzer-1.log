> SpecFuzzer
# Inference step (Daikon + Fuzzed Specs)
Daikon version 5.8.2, released May 4, 2020; http://plse.cs.washington.edu/daikon.

Loading invariants from file: invs_file.xml
Loaded: 0

Fuzzing specs:
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= 1)
Fuzzed spec: (Integer_Variable_0 > -1) iff (Integer_Variable_1 <= 0)
Fuzzed spec: (Integer_Variable_0 <= 1) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = 1) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * 1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % 0
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 0) iff (Integer_Variable_1 = 0)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: (Integer_Variable_0 = -1) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: (Integer_Variable_0 >= -1) or (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < -1) iff (Integer_Variable_1 != 0)
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 1) or (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + -1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 <= 1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) xor (Integer_Variable_1 < 0)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != -1) xor (Integer_Variable_1 >= #(StackAr.theArray))
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 <= -1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != 0) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < 0)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) implies (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = -1) xor (Integer_Variable_1 >= 1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = -1)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= -1) iff (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / 1
Fuzzed spec: (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / -1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > 0) or (Integer_Variable_1 < -1)
Fuzzed spec: (Integer_Variable_0 <= -1) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 0)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 0) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < 1)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1)
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > -1) implies (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * 1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = 0) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / 1
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 <= 1)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 <= 0)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 < 1) xor (Integer_Variable_1 > -1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < 0)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % 1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > 1) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= 0
Discarded due to arity: 4 - (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % -1
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - 1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 = 0)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) implies (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 >= -1) iff (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = 1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < -1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= -1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * 1
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= 1) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 0) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = 1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / -1
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= -1)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 = 0)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < -1) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 = 1) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % 0
Fuzzed spec: all n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 0) xor (Integer_Variable_1 <= 1)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % -1
Fuzzed spec: (Integer_Variable_0 != -1) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != 1) xor (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) xor (Integer_Variable_1 >= 0)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 1
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 = 1) or (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1)
Fuzzed spec: (Integer_Variable_0 <= 0) xor (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 >= 1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != 0) iff (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) iff (Integer_Variable_1 > -1)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) implies (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < 1) implies (Integer_Variable_1 != -1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) xor (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < 1) implies (Integer_Variable_1 = 1)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != 0) xor (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= 1) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < 0) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 = 0)
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + 0
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 1) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 1
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < -1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % 0
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: all n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 > 1) or (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 < 1) iff (Integer_Variable_1 = 0)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - 1
Fuzzed spec: some n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 = -1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 1) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 0)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * 0
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != -1) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(StackAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < 1) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > 1)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < 0)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(StackAr.theArray)
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) implies (Integer_Variable_1 != Integer_Variable_2)
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < 0)
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) xor (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 != 1) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 <= 1) xor (Integer_Variable_1 != 1)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = 1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 0) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * -1
Fuzzed spec: (Integer_Variable_0 < -1) xor (Integer_Variable_1 <= -1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= 1)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < 1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > -1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1)
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 < 1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != 0) implies (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) or (Integer_Variable_1 < -1)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > 1)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < 0) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= -1) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(StackAr.theArray)) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % 1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != -1) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < -1) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % -1
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 1) iff (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) iff (Integer_Variable_1 = -1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - 0
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 1) xor (Integer_Variable_1 <= 0)
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) or (Integer_Variable_1 < 1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 <= #(StackAr.theArray))
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % -1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) implies (Integer_Variable_1 <= 1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < 0) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - 0
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 <= 0)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= 0) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < 0)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) xor (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= -1) implies (Integer_Variable_1 <= 0)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / 0
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = 1) or (Integer_Variable_1 = 1)
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 1) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < 1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(StackAr.theArray)) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != 0) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = -1) implies (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 1) iff (Integer_Variable_1 != -1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2)
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 >= #(StackAr.theArray)) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= 1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != -1) xor (Integer_Variable_1 > 0)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 != -1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 1) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) implies (Integer_Variable_1 = 1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 != -1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / 1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 >= 1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - 1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: (Integer_Variable_0 >= -1) implies (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: Integer_Variable_0 <= 0
Fuzzed spec: some n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) implies (Integer_Variable_1 = -1)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / -1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 = 0)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < 1) xor (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) iff (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > -1) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < 1) xor (Integer_Variable_1 > 0)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) implies (Integer_Variable_1 > -1)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: (Integer_Variable_0 > 0) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2)
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / -1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= -1) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / 0
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 <= -1)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 > 0) or (Integer_Variable_1 <= -1)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = 0) iff (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != 1) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 <= 0)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1)
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= 0) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * -1
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= 0)
Fuzzed spec: (Integer_Variable_0 >= 1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 <= 1) iff (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 = 1
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) iff (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= 1
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) implies (Integer_Variable_1 <= Integer_Variable_2)
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0)
Fuzzed spec: (Integer_Variable_0 != -1) iff (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 != 1
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < 1) iff (Integer_Variable_1 = 0)
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 = -1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = -1) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + -1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 != 1) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) implies (Integer_Variable_1 != 0)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 = -1)
Fuzzed spec: (Integer_Variable_0 = 1) xor (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 != 0) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= -1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) implies (Integer_Variable_1 = -1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / 0
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) implies (Integer_Variable_1 <= 1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: (Integer_Variable_0 != -1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 > -1) iff (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = -1) xor (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) or (Integer_Variable_1 >= 0)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 >= #(StackAr.theArray)) xor (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 0)
Fuzzed spec: (Integer_Variable_0 >= 0) or (Integer_Variable_1 < -1)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * 1
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) xor (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 <= 0) xor (Integer_Variable_1 = 1)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - 1
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 < #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= -1) iff (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 != 0) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % 0
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1)
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 < -1) xor (Integer_Variable_1 > 0)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 != 0)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= 1) xor (Integer_Variable_1 > 1)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 0) iff (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < -1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < -1) iff (Integer_Variable_1 != 0)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) implies (Integer_Variable_1 <= -1)
Fuzzed spec: (Integer_Variable_0 <= -1) or (Integer_Variable_1 <= -1)
Fuzzed spec: (Integer_Variable_0 >= -1) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * -1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > 0) or (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0)
Fuzzed spec: Integer_Variable_0 <= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / 1
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= 1
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = 0) iff (Integer_Variable_1 < 1)
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) iff (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * 0
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= 0)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / 1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != 0
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = 0
Fuzzed spec: all n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 > #(StackAr.theArray)) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: (Integer_Variable_0 != -1) or (Integer_Variable_1 >= Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > -1
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 - 0
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 / #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 < #(StackAr.theArray)) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= 0) iff (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 / 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 < #(StackAr.theArray)) xor (Integer_Variable_1 >= 0)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 - #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 < #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) xor (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + Integer_Variable_2
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 < 0) implies (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: no n : StackAr.theArray : n = null
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) implies (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: Integer_Variable_0 < 1
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * Integer_Variable_2
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 >= 0
Fuzzed spec: (Integer_Variable_0 != 1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * 0
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 0) implies (Integer_Variable_1 = #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) xor (Integer_Variable_1 <= 0)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 >= #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 >= 0) xor (Integer_Variable_1 != -1)
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * 0
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / 0
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 + #(StackAr.theArray)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 <= #(StackAr.theArray)) iff (Integer_Variable_1 <= #(StackAr.theArray))
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 <= Integer_Variable_1 + 1
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > 0
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1)
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 / -1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > #(StackAr.theArray)) iff (Integer_Variable_1 > #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 <= 0)
Discarded due to arity: 4 - (Integer_Variable_0 = #(StackAr.theArray)) xor (Integer_Variable_1 = Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 + -1
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 = #(StackAr.theArray)) xor (Integer_Variable_1 >= #(StackAr.theArray))
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: Integer_Variable_0 >= Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1 * #(StackAr.theArray)
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1 % Integer_Variable_2
Fuzzed spec: Integer_Variable_0 > Integer_Variable_1
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != Integer_Variable_1
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: (Integer_Variable_0 != #(StackAr.theArray)) iff (Integer_Variable_1 != #(StackAr.theArray))
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n != null
Discarded due to arity: 4 - (Integer_Variable_0 <= #(StackAr.theArray)) xor (Integer_Variable_1 != Integer_Variable_2)
Fuzzed spec: Integer_Variable_0 != #(StackAr.theArray)
Fuzzed spec: (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > Integer_Variable_2)
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n = null
Fuzzed spec: no n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: some n : StackAr.theArray : n != null
Fuzzed spec: all n : StackAr.theArray : n != null
Fuzzed spec: no n : StackAr.theArray : n = null
Fuzzed spec: Integer_Variable_0 = Integer_Variable_1
Fuzzed spec: Integer_Variable_0 < Integer_Variable_1 * 1
Fuzzed spec: (Integer_Variable_0 <= 0) xor (Integer_Variable_1 != 1)
Fuzzed spec: all n : StackAr.theArray : n = null
Unique fuzzed invariants: 437 (2000)
Unary: 24 - Binary: 153 - Ternary: 260 - Discarded: 37
Reading declaration files Processing trace data; reading 1 dtrace file:
Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/StackArTesterDriver-objects.xml
Total loaded objects: 2843

No return from procedure observed 63 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 44 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

===========================================================================
DataStructures.Overflow:::CLASS
===========================================================================
DataStructures.Overflow:::OBJECT
===========================================================================
DataStructures.Overflow.Overflow():::EXIT
===========================================================================
DataStructures.StackAr:::CLASS
===========================================================================
DataStructures.StackAr:::OBJECT
this.theArray != null
this.theArray.getClass().getName() == java.lang.Object[].class
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: this.topOfStack
this.topOfStack >= -1
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <this, DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 > #(StackAr.theArray) ) holds for: <this, DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 >= #(StackAr.theArray) ) holds for: <this, DataStructures.StackAr.DEFAULT_CAPACITY>
this.topOfStack <= size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.StackAr():::EXIT
this.theArray[] contains only nulls and has only one value, of length 10
this.theArray[] elements == null
this.theArray[].getClass().getName() == [null, null, null, null, null, null, null, null, null, null]
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
size(this.theArray[]) == 10
===========================================================================
DataStructures.StackAr.StackAr(int):::ENTER
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: capacity
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: capacity
capacity >= 0
===========================================================================
DataStructures.StackAr.StackAr(int):::EXIT
orig(capacity) == size(this.theArray[])
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(capacity)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 > -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 <= -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 <= 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < -1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <orig(capacity), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(capacity) , size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.isEmpty():::ENTER
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <this, this.topOfStack>
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
(this.topOfStack == -1)  <==>  (return == true)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 0 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack == -1)  ==>  (FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: this.topOfStack)
(this.topOfStack == -1)  ==>  (this.theArray[] elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[].getClass().getName() elements == null)
(this.topOfStack >= 0)  <==>  (return == false)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.topOfStack)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[]))
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.topOfStack)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[]))
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.topOfStack)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(this.topOfStack >= 0)  ==>  (FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this))
(this.topOfStack >= 0)  ==>  (size(this.theArray[]) one of { 10, 32, 100 })
(this.topOfStack >= 0)  ==>  (this.topOfStack < size(this.theArray[])-1)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 > #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 >= #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT;condition="return == true"
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
return == true
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT;condition="not(return == true)"
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.topOfStack
this.topOfStack >= 0
return == false
FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this)
size(this.theArray[]) one of { 10, 32, 100 }
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.isFull():::ENTER
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <this, this.topOfStack>
===========================================================================
DataStructures.StackAr.isFull():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
(return == false)  <==>  (this.topOfStack < size(this.theArray[])-1)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[]))
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[]))
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[]))
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == false)  ==>  (FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this))
(return == true)  <==>  (this.topOfStack == size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != 0) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 != 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < -1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 <= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 = 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 = 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 >= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 != -1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), size(this.theArray[])-1>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[]))
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), size(this.theArray[])-1>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 0 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 0 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: size(this.theArray[]))
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < 1 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), size(this.theArray[])-1>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= -1 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: size(this.theArray[]))
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 0 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: size(this.theArray[]))
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: size(this.theArray[])-1)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = -1 ) holds for: this.topOfStack)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = 0 ) holds for: size(this.theArray[]))
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <size(this.theArray[])-1, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>)
(return == true)  ==>  (FuzzedInvariant ( all n : StackAr.theArray : n != null ) holds for: orig(this))
(return == true)  ==>  (FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this))
(return == true)  ==>  (FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this))
(return == true)  ==>  (FuzzedInvariant ( no n : StackAr.theArray : n = null ) holds for: orig(this))
(return == true)  ==>  (this.theArray[] == [])
(return == true)  ==>  (this.theArray[].getClass().getName() == [])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 > #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 >= #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="return == true"
this.topOfStack == size(this.theArray[])-1
this.topOfStack == orig(size(this.theArray[]))-1
this.theArray[] == []
this.theArray[].getClass().getName() == []
return == true
FuzzedInvariant ( all n : StackAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( no n : StackAr.theArray : n = null ) holds for: orig(this)
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="not(return == true)"
return == false
FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.makeEmpty():::ENTER
===========================================================================
DataStructures.StackAr.makeEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[] elements == null
this.theArray[].getClass().getName() elements == null
this.topOfStack == -1
FuzzedInvariant ( all n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( no n : StackAr.theArray : n != null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
this.topOfStack <= orig(this.topOfStack)
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) xor (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) or (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 0) xor (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 > #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 >= #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
orig(this.topOfStack) <= size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) xor (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 0) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.pop():::ENTER
this.topOfStack one of { 0, 1, 2 }
size(this.theArray[]) == 10
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.pop():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[].getClass().getName() one of { [null, null, null, null, null, null, null, null, null, null], [java.lang.Long, null, null, null, null, null, null, null, null, null] }
this.topOfStack one of { -1, 0, 1 }
FuzzedInvariant ( Integer_Variable_0 <= 1 ) holds for: this.topOfStack
FuzzedInvariant ( some n : StackAr.theArray : n = null ) holds for: orig(this)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: orig(this.topOfStack)
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: orig(this.topOfStack)
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: orig(this.topOfStack)
size(this.theArray[]) == 10
this.theArray[orig(this.topOfStack)] == null
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 0) xor (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
this.topOfStack < orig(this.topOfStack)
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
this.topOfStack < size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 > #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 >= #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
this.theArray[orig(this.topOfStack)] in orig(this.theArray[])
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
orig(this.topOfStack) < size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::ENTER
this.theArray.getClass().getName() != x.getClass().getName()
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
orig(x) == this.theArray[this.topOfStack]
size(this.theArray[]) == orig(size(this.theArray[]))
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: this.topOfStack
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: this.topOfStack
this.topOfStack >= 0
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])-1
orig(this.theArray[post(this.topOfStack)]) == null
this.theArray.getClass().getName() != orig(x.getClass().getName())
orig(x.getClass().getName()) in this.theArray[].getClass().getName()
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != 1) xor (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < 1) xor (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) iff (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 <= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > 1) xor (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 <= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= 1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 = 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 = Integer_Variable_1 - -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, orig(this.topOfStack)>
this.topOfStack - orig(this.topOfStack) - 1 == 0
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) xor (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) iff (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) or (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 > #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 >= #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < -1) xor (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 < 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 = 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 >= 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 / -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 = 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < 0) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1) ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <orig(this.topOfStack), size(this.theArray[])-1>
orig(this.topOfStack) < size(this.theArray[])-1
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 % Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != -1) or (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 0) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 0) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < 1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) implies (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) xor (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) iff (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) implies (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = -1) xor (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) iff (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) or (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) or (Integer_Variable_1 > Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) iff (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) implies (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 = Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) iff (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) implies (Integer_Variable_1 <= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 != Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) or (Integer_Variable_1 < Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= Integer_Variable_1) xor (Integer_Variable_1 >= Integer_Variable_2) ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 + Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 > Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 >= Integer_Variable_1 - Integer_Variable_2 ) holds for: <this.topOfStack , orig(this.topOfStack) , size(this.theArray[])-1>
===========================================================================
DataStructures.StackAr.top():::ENTER
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <this, this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <this, this.topOfStack>
===========================================================================
DataStructures.StackAr.top():::EXIT
this.theArray == orig(this.theArray)
this.theArray.getClass().getName() == orig(this.theArray.getClass().getName())
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
FuzzedInvariant ( Integer_Variable_0 != -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 > -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 >= 0 ) holds for: size(this.theArray[])
FuzzedInvariant ( Integer_Variable_0 != 1 ) holds for: size(this.theArray[])-1
FuzzedInvariant ( Integer_Variable_0 >= -1 ) holds for: size(this.theArray[])-1
this.theArray.getClass().getName() != return.getClass().getName()
return.getClass().getName() in this.theArray[].getClass().getName()
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < 1) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = 1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 0) or (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) iff (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= -1) xor (Integer_Variable_1 < 0) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 * 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + -1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])>
FuzzedInvariant ( (Integer_Variable_0 != Integer_Variable_1) or (Integer_Variable_1 != 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 < Integer_Variable_1) or (Integer_Variable_1 = -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= 1) or (Integer_Variable_1 >= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 <= Integer_Variable_1) xor (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = 1) implies (Integer_Variable_1 > -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 != 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 = Integer_Variable_1) implies (Integer_Variable_1 <= 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 0) implies (Integer_Variable_1 > 1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > 1) implies (Integer_Variable_1 >= -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 < -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 > Integer_Variable_1) implies (Integer_Variable_1 > 0) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= -1) or (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( (Integer_Variable_0 >= 0) implies (Integer_Variable_1 != -1) ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != Integer_Variable_1 * -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 < Integer_Variable_1 - -1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 + 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 - 0 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 <= Integer_Variable_1 / 1 ) holds for: <this.topOfStack, size(this.theArray[])-1>
FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 > #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
FuzzedInvariant ( Integer_Variable_0 >= #(StackAr.theArray) ) holds for: <orig(this), DataStructures.StackAr.DEFAULT_CAPACITY>
===========================================================================
DataStructures.Underflow:::CLASS
===========================================================================
DataStructures.Underflow:::OBJECT
===========================================================================
DataStructures.Underflow.Underflow():::EXIT
Exiting Daikon.

# Filtering step

- Mutation is: 1:STD:<ASSIGN>:<NO-OP>:DataStructures.StackAr@<init>(int):45:theArray = new Object[capacity] |==> <NO-OP>
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m1.dtrace.gz
Loaded invs from previous step: 0
                                                                               [7:23:26 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m1-objects.xml
Total loaded objects: 1113
[7:23:27 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:28 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:30 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:31 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 373 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 13 invocations
  DataStructures.StackAr.isFull() : 190 invocations
  DataStructures.StackAr.push(java.lang.Object) : 142 invocations
  DataStructures.StackAr.makeEmpty() : 28 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 2,873 errors found in 178,381 samples (1.61%)
StackArTesterDriver.inv.gz: 187 false positives, out of 800, which is 23.38%.
Preserving 93 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 0
Saving - Total: 93
Saving mutants results file

- Mutation is: 17:ROR:==(int,int):<=(int,int):DataStructures.StackAr@isFull():65:topOfStack == theArray.length - 1 |==> topOfStack <= theArray.length - 1
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m17.dtrace.gz
Loaded invs from previous step: 93
                                                                               [7:23:33 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m17-objects.xml
Total loaded objects: 1467
[7:23:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:35 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:36 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:37 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:38 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:41 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:43 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:44 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:45 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:46 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:47 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:48 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:52 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:53 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:54 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:55 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:56 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:23:57 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 200 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 29 invocations
  DataStructures.StackAr.push(java.lang.Object) : 161 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 660,830 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 4077, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 93
Saving - Total: 93
Saving mutants results file

- Mutation is: 18:ROR:==(int,int):>=(int,int):DataStructures.StackAr@isFull():65:topOfStack == theArray.length - 1 |==> topOfStack >= theArray.length - 1
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m18.dtrace.gz
Loaded invs from previous step: 93
                                                                               [7:23:58 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m18-objects.xml
Total loaded objects: 2843
[7:23:59 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:00 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:01 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:02 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:03 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:04 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:05 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:06 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:07 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:08 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:09 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:10 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:11 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:12 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:13 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:14 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:15 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:16 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:17 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:18 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:19 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:20 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:21 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:22 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:23 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:24 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:25 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:26 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:27 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:28 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:30 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:31 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:33 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:36 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:37 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:38 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:39 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:41 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:43 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:44 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:45 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:46 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:47 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:48 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:52 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:53 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:54 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:55 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:56 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:57 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:58 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:24:59 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:00 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:01 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:02 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:03 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:04 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:05 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 63 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 44 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 1,837,216 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 7020, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 93
Saving - Total: 93
Saving mutants results file

- Mutation is: 19:ROR:==(int,int):FALSE(int,int):DataStructures.StackAr@isFull():65:topOfStack == theArray.length - 1 |==> false
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m19.dtrace.gz
Loaded invs from previous step: 93
                                                                               [7:25:06 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m19-objects.xml
Total loaded objects: 2843
[7:25:07 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:08 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:09 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:10 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:11 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:12 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:14 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:15 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:16 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:17 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:18 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:19 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:20 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:21 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:22 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:23 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:24 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:25 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:26 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:27 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:28 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:30 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:31 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:33 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:35 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:36 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:37 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:38 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:39 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:41 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:43 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:44 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:45 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:46 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:47 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:48 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:52 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:53 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:54 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:55 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:56 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:57 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:58 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:25:59 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:00 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:01 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:02 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:03 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:04 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:05 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:06 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:07 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:08 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:09 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:10 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:11 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 63 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 44 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 1,837,108 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 7008, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 93
Saving - Total: 93
Saving mutants results file

- Mutation is: 2:LVR:NEG:0:DataStructures.StackAr@<init>(int):46:-1 |==> 0
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
Loaded invs from previous step: 93
                                                                               [7:26:12 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m2-objects.xml
Total loaded objects: 2792
[7:26:13 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:14 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:15 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:16 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:17 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:18 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:19 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:20 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:21 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:22 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:23 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:24 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:25 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:26 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:27 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:28 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:30 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:31 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:33 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:35 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:36 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:37 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:38 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:39 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:41 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:43 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:44 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:45 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:46 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:47 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:48 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:52 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:53 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:54 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:55 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:56 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:57 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:58 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:26:59 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:00 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:01 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:02 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:03 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:04 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:05 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:06 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:07 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:08 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:09 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:10 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:11 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:12 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:13 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:14 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:15 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:16 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:17 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 52 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 20 invocations
  DataStructures.StackAr.push(java.lang.Object) : 6 invocations
  DataStructures.StackAr.top() : 11 invocations
  DataStructures.StackAr.makeEmpty() : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 64,822 errors found in 1,823,656 samples (3.55%)
StackArTesterDriver.inv.gz: 790 false positives, out of 7022, which is 11.25%.
Preserving 304 new invariants to file /specfuzzer/invs_file.xml
                                                                               Already preserved invariants: 93
Saving - Total: 355
Saving mutants results file

- Mutation is: 25:AOR:+(int,int):%(int,int):DataStructures.StackAr@makeEmpty():74:topOfStack + 1 |==> topOfStack % 1
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m25.dtrace.gz
Loaded invs from previous step: 355
                                                                               [7:27:20 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m25-objects.xml
Total loaded objects: 2843
[7:27:21 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:22 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:23 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:24 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:25 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:26 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:27 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:28 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:30 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:31 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:33 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:35 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:36 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:37 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:38 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:39 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:41 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:43 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:44 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:45 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:46 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:47 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:48 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:52 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:53 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:54 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:55 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:56 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:57 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:58 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:27:59 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:00 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:01 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:02 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:03 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:04 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:05 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:06 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:07 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:08 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:09 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:10 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:11 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:12 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:13 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:14 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:15 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:16 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:17 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:18 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:19 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:20 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:21 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:22 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:23 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:24 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:25 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:26 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 63 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 44 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 718 errors found in 1,837,216 samples (0.04%)
StackArTesterDriver.inv.gz: 12 false positives, out of 7020, which is 0.17%.
Preserving 2 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 355
Saving - Total: 357
Saving mutants results file

- Mutation is: 26:AOR:+(int,int):*(int,int):DataStructures.StackAr@makeEmpty():74:topOfStack + 1 |==> topOfStack StackArTesterDriver.inv.gz base-invs-by-mutants.csv base_invs_file.xml experiments hs_err_pid1983241.log hs_err_pid51463.log hs_err_pid53479.log invs-by-mutants.csv invs.csv invs_file.xml lib literals mutants scripts testers 1
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m26.dtrace.gz
Loaded invs from previous step: 357
                                                                               [7:28:28 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m26-objects.xml
Total loaded objects: 2672
[7:28:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:30 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:31 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:33 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:35 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:36 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:37 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:38 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:39 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:41 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:43 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:44 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:45 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:46 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:47 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:48 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:52 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:53 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:54 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:55 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:56 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:57 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:58 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:28:59 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:00 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:01 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:02 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:03 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:04 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:05 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:06 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:07 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:08 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:09 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:10 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:11 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:12 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:13 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:14 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:15 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:16 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:17 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:18 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:19 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:20 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:21 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:22 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:23 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:24 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:25 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:26 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 100 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 30 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
  DataStructures.StackAr.makeEmpty() : 51 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 516 errors found in 1,674,427 samples (0.03%)
StackArTesterDriver.inv.gz: 12 false positives, out of 7020, which is 0.17%.
Preserving 2 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 357
Saving - Total: 357
Saving mutants results file

- Mutation is: 27:AOR:+(int,int):-(int,int):DataStructures.StackAr@makeEmpty():74:topOfStack + 1 |==> topOfStack - 1
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m27.dtrace.gz
Loaded invs from previous step: 357
                                                                               [7:29:28 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m27-objects.xml
Total loaded objects: 2575
[7:29:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:31 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:33 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:35 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:36 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:37 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:38 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:41 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:43 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:44 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:45 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:47 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:48 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:52 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:55 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:56 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:57 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:58 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:29:59 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:00 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:01 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:02 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:03 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:04 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:05 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:06 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:07 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:08 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:09 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:10 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:11 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:12 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:13 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:14 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:15 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:16 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:17 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:18 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:19 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:20 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:21 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:22 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 129 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 25 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.makeEmpty() : 86 invocations
  DataStructures.StackAr.push(java.lang.Object) : 8 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 130 errors found in 1,542,303 samples (0.01%)
StackArTesterDriver.inv.gz: 10 false positives, out of 7020, which is 0.14%.
Preserving 2 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 357
Saving - Total: 357
Saving mutants results file

- Mutation is: 28:AOR:+(int,int):/(int,int):DataStructures.StackAr@makeEmpty():74:topOfStack + 1 |==> topOfStack / 1
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m28.dtrace.gz
Loaded invs from previous step: 357
                                                                               [7:30:24 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m28-objects.xml
Total loaded objects: 2672
[7:30:26 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:27 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:28 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:30 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:31 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:33 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:35 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:36 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:37 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:38 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:39 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:41 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:43 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:44 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:45 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:46 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:47 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:48 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:52 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:53 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:54 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:55 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:56 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:57 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:58 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:30:59 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:00 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:02 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:03 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:04 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:05 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:06 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:07 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:08 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:09 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:10 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:11 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:12 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:13 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:14 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:15 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:16 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:17 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:18 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:19 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:20 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:21 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:22 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:23 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 100 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 30 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
  DataStructures.StackAr.makeEmpty() : 51 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 516 errors found in 1,674,427 samples (0.03%)
StackArTesterDriver.inv.gz: 12 false positives, out of 7020, which is 0.17%.
Preserving 2 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 357
Saving - Total: 357
Saving mutants results file

- Mutation is: 29:STD:<CALL>:<NO-OP>:DataStructures.StackAr@makeEmpty():74:java.util.Arrays.fill(theArray, 0, topOfStack + 1, null) |==> <NO-OP>
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m29.dtrace.gz
Loaded invs from previous step: 357
                                                                               [7:31:25 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m29-objects.xml
Total loaded objects: 2843
[7:31:26 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:27 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:28 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:30 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:31 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:33 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:35 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:36 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:37 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:38 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:39 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:41 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:43 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:44 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:45 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:46 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:47 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:48 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:52 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:53 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:54 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:55 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:56 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:57 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:58 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:31:59 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:00 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:01 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:02 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:03 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:04 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:05 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:06 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:07 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:08 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:09 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:10 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:11 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:12 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:13 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:14 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:15 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:16 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:17 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:18 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:19 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:20 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:21 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:22 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:23 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:24 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:26 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:27 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:28 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:30 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:31 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 63 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 44 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 718 errors found in 1,837,216 samples (0.04%)
StackArTesterDriver.inv.gz: 12 false positives, out of 7020, which is 0.17%.
Preserving 2 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 357
Saving - Total: 357
Saving mutants results file

- Mutation is: 3:LVR:NEG:POS:DataStructures.StackAr@<init>(int):46:-1 |==> 1
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
Loaded invs from previous step: 357
                                                                               [7:32:32 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m3-objects.xml
Total loaded objects: 2789
[7:32:33 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:35 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:36 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:37 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:39 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:44 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:45 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:46 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:47 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:48 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:52 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:53 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:54 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:55 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:56 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:58 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:32:59 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:00 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:02 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:03 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:04 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:11 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:12 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:14 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:15 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:24 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:25 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:26 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:27 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:28 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:30 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:31 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:33 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 55 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 22 invocations
  DataStructures.StackAr.push(java.lang.Object) : 6 invocations
  DataStructures.StackAr.top() : 12 invocations
  DataStructures.StackAr.makeEmpty() : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 92,425 errors found in 1,817,991 samples (5.08%)
StackArTesterDriver.inv.gz: 778 false positives, out of 7010, which is 11.10%.
Preserving 269 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 357
Saving - Total: 445
Saving mutants results file

- Mutation is: 32:STD:<ASSIGN>:<NO-OP>:DataStructures.StackAr@makeEmpty():75:topOfStack = -1 |==> <NO-OP>
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m32.dtrace.gz
Loaded invs from previous step: 445
                                                                               [7:33:37 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m32-objects.xml
Total loaded objects: 2851
[7:33:38 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:39 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:41 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:43 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:44 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:45 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:46 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:47 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:48 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:52 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:53 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:54 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:55 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:56 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:57 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:58 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:33:59 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:00 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:01 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:02 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:03 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:04 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:05 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:06 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:08 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:09 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:10 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:11 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:12 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:13 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:14 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:15 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:16 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:17 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:18 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:19 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:20 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:21 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:22 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:23 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:24 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:25 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:26 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:27 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:28 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:30 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:31 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:33 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:35 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:36 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:37 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:38 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:39 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:41 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:43 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 55 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 36 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 13,144 errors found in 1,849,576 samples (0.71%)
StackArTesterDriver.inv.gz: 272 false positives, out of 7020, which is 3.87%.
Preserving 130 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 445
Saving - Total: 510
Saving mutants results file

- Mutation is: 33:COR:isEmpty():TRUE:DataStructures.StackAr@top():86:isEmpty() |==> false
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m33.dtrace.gz
Loaded invs from previous step: 510
                                                                               [7:34:45 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m33-objects.xml
Total loaded objects: 2493
[7:34:46 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:47 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:48 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:52 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:53 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:54 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:55 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:56 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:57 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:58 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:34:59 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:00 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:01 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:02 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:03 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:04 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:05 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:06 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:07 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:08 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:09 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:11 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:12 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:13 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:14 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:15 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:16 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:17 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:18 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:19 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:20 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:21 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:22 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:23 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:24 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:25 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:26 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:27 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:28 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:30 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:31 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:33 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:35 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:36 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:37 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:38 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:39 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:41 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 113 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 31 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.top() : 67 invocations
  DataStructures.StackAr.push(java.lang.Object) : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 1,583,337 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 7020, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 510
Saving - Total: 510
Saving mutants results file

- Mutation is: 34:COR:isEmpty():FALSE:DataStructures.StackAr@top():86:isEmpty() |==> true
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m34.dtrace.gz
Loaded invs from previous step: 510
                                                                               [7:35:44 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m34-objects.xml
Total loaded objects: 2755
[7:35:45 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:46 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:47 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:48 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:52 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:53 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:54 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:55 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:56 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:57 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:58 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:35:59 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:00 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:01 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:02 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:03 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:04 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:05 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:06 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:07 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:08 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:09 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:10 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:12 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:13 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:14 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:15 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:16 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:17 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:18 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:19 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:20 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:21 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:22 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:23 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:24 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:25 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:26 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:27 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:28 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:30 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:31 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:33 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:35 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:36 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:37 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:38 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:39 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:41 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:43 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:44 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:45 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 63 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 44 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 1,743,228 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 7014, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 510
Saving - Total: 510
Saving mutants results file

- Mutation is: 35:EVR:<ARRAY_ACCESS(java.lang.Object)>:<DEFAULT>:DataStructures.StackAr@top():89:theArray[topOfStack] |==> null
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m35.dtrace.gz
Loaded invs from previous step: 510
                                                                               [7:36:48 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m35-objects.xml
Total loaded objects: 2843
[7:36:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:52 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:53 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:54 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:55 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:56 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:57 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:58 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:36:59 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:00 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:01 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:02 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:03 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:04 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:05 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:06 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:07 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:08 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:09 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:10 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:11 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:12 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:13 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:14 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:15 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:16 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:17 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:18 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:19 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:20 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:21 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:22 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:23 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:25 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:27 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:28 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:31 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:35 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:43 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:46 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:48 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:53 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:54 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 63 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 44 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 1,836,260 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 7014, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 510
Saving - Total: 510
Saving mutants results file

- Mutation is: 36:LVR:TRUE:FALSE:DataStructures.StackAr@top():92:true |==> false
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m36.dtrace.gz
Loaded invs from previous step: 510
                                                                               [7:37:55 PM]:                                                                  Saving mutants results file

- Mutation is: 37:EVR:<IDENTIFIER(java.lang.Object)>:<DEFAULT>:DataStructures.StackAr@top():93:result |==> null
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m37.dtrace.gz
Loaded invs from previous step: 510
                                                                               [7:37:57 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m37-objects.xml
Total loaded objects: 2843
[7:37:58 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:37:59 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:00 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:01 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:02 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:04 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:05 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:06 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:07 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:08 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:09 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:10 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:11 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:12 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:13 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:14 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:15 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:16 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:17 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:18 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:19 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:20 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:21 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:22 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:23 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:24 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:25 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:26 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:27 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:28 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:30 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:31 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:33 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:35 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:36 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:37 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:38 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:39 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:41 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:43 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:44 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:45 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:46 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:47 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:48 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:52 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:53 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:54 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:55 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:56 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:57 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:58 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:38:59 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:00 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:01 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:02 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:03 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 63 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 44 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 1,836,260 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 7014, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 510
Saving - Total: 510
Saving mutants results file

- Mutation is: 4:STD:<ASSIGN>:<NO-OP>:DataStructures.StackAr@<init>(int):46:topOfStack = -1 |==> <NO-OP>
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
Loaded invs from previous step: 510
                                                                               [7:39:05 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m4-objects.xml
Total loaded objects: 2792
[7:39:06 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:07 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:08 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:09 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:10 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:11 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:12 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:13 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:14 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:15 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:16 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:17 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:18 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:19 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:20 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:21 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:22 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:23 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:24 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:25 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:26 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:27 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:28 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:30 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:33 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:35 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:36 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:37 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:38 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:39 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:41 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:43 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:44 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:45 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:46 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:47 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:48 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:52 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:53 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:54 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:55 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:56 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:57 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:58 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:39:59 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:00 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:01 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:02 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:03 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:04 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:05 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:06 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:07 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:08 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:09 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:10 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:11 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 52 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.pop() : 20 invocations
  DataStructures.StackAr.push(java.lang.Object) : 6 invocations
  DataStructures.StackAr.top() : 11 invocations
  DataStructures.StackAr.makeEmpty() : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 64,820 errors found in 1,823,656 samples (3.55%)
StackArTesterDriver.inv.gz: 790 false positives, out of 7022, which is 11.25%.
Preserving 304 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 510
Saving - Total: 510
Saving mutants results file

- Mutation is: 40:STD:<ASSIGN>:<NO-OP>:DataStructures.StackAr@pop():104:theArray[topOfStack] = null |==> <NO-OP>
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m40.dtrace.gz
Loaded invs from previous step: 510
                                                                               [7:40:14 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m40-objects.xml
Total loaded objects: 2843
[7:40:15 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:16 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:17 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:18 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:19 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:20 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:21 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:22 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:23 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:24 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:25 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:26 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:27 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:28 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:30 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:31 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:33 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:35 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:36 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:38 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:39 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:41 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:43 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:44 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:45 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:46 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:47 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:48 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:52 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:53 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:54 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:55 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:56 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:57 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:58 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:40:59 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:00 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:01 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:02 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:03 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:04 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:05 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:06 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:07 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:08 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:09 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:10 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:11 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:13 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:14 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:15 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:16 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:17 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:18 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:19 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 63 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 44 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 260 errors found in 1,837,216 samples (0.01%)
StackArTesterDriver.inv.gz: 16 false positives, out of 7020, which is 0.23%.
Preserving 2 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 510
Saving - Total: 510
Saving mutants results file

- Mutation is: 43:AOR:-(int,int):%(int,int):DataStructures.StackAr@pop():105:topOfStack - 1 |==> topOfStack % 1
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m43.dtrace.gz
Loaded invs from previous step: 510
                                                                               [7:41:22 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m43-objects.xml
Total loaded objects: 2843
[7:41:23 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:24 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:25 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:26 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:27 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:28 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:30 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:31 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:33 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:35 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:36 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:37 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:38 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:39 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:41 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:43 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:44 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:45 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:46 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:47 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:48 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:52 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:53 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:54 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:55 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:57 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:58 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:41:59 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:00 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:01 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:02 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:03 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:04 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:05 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:06 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:07 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:08 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:09 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:10 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:11 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:12 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:13 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:14 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:15 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:16 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:17 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:18 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:19 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:20 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:21 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:22 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:23 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:24 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:25 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:26 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:27 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:28 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 59 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 40 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 9,020 errors found in 1,843,402 samples (0.49%)
StackArTesterDriver.inv.gz: 152 false positives, out of 7020, which is 2.17%.
Preserving 74 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 510
Saving - Total: 568
Saving mutants results file

- Mutation is: 44:AOR:-(int,int):*(int,int):DataStructures.StackAr@pop():105:topOfStack - 1 |==> topOfStack StackArTesterDriver.inv.gz base-invs-by-mutants.csv base_invs_file.xml experiments hs_err_pid1983241.log hs_err_pid51463.log hs_err_pid53479.log invs-by-mutants.csv invs.csv invs_file.xml lib literals mutants scripts testers 1
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m44.dtrace.gz
Loaded invs from previous step: 568
                                                                               [7:42:31 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m44-objects.xml
Total loaded objects: 2843
[7:42:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:33 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:35 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:36 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:37 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:38 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:39 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:41 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:43 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:44 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:45 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:46 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:47 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:48 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:53 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:54 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:55 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:56 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:57 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:58 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:42:59 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:00 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:01 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:02 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:03 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:04 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:05 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:06 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:07 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:08 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:09 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:10 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:11 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:12 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:13 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:14 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:15 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:16 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:17 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:18 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:19 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:20 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:21 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:22 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:23 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:24 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:25 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:26 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:27 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:28 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:30 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:31 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:33 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:35 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 59 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 40 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 12,841 errors found in 1,843,390 samples (0.70%)
StackArTesterDriver.inv.gz: 212 false positives, out of 7020, which is 3.02%.
Preserving 97 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 568
Saving - Total: 568
Saving mutants results file

- Mutation is: 45:AOR:-(int,int):+(int,int):DataStructures.StackAr@pop():105:topOfStack - 1 |==> topOfStack + 1
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m45.dtrace.gz
Loaded invs from previous step: 568
                                                                               [7:43:38 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m45-objects.xml
Total loaded objects: 2843
[7:43:39 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:41 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:43 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:44 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:45 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:46 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:47 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:48 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:52 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:53 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:54 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:55 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:56 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:57 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:58 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:43:59 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:00 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:02 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:03 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:04 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:05 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:06 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:07 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:08 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:09 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:10 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:11 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:12 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:13 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:14 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:15 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:16 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:17 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:18 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:19 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:20 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:21 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:22 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:23 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:24 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:25 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:26 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:27 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:28 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:30 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:31 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:33 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:35 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:36 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:37 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:39 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:41 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:43 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 59 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 40 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 14,745 errors found in 1,843,390 samples (0.80%)
StackArTesterDriver.inv.gz: 213 false positives, out of 7020, which is 3.03%.
Preserving 96 new invariants to file /specfuzzer/invs_file.xml
                                                                               Already preserved invariants: 568
Saving - Total: 599
Saving mutants results file

- Mutation is: 46:AOR:-(int,int):/(int,int):DataStructures.StackAr@pop():105:topOfStack - 1 |==> topOfStack / 1
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m46.dtrace.gz
Loaded invs from previous step: 599
                                                                               [7:44:46 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m46-objects.xml
Total loaded objects: 2843
[7:44:47 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:48 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:52 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:53 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:54 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:55 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:56 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:57 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:58 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:44:59 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:00 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:01 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:02 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:03 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:04 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:05 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:06 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:07 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:08 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:09 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:10 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:11 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:12 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:13 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:14 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:15 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:16 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:17 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:18 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:19 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:20 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:21 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:22 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:23 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:24 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:25 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:26 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:27 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:28 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:30 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:31 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:33 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:35 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:36 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:37 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:38 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:39 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:41 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:43 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:44 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:45 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:46 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:47 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:48 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 59 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 40 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 12,841 errors found in 1,843,390 samples (0.70%)
StackArTesterDriver.inv.gz: 212 false positives, out of 7020, which is 3.02%.
Preserving 97 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 599
Saving - Total: 599
Saving mutants results file

- Mutation is: 47:STD:<ASSIGN>:<NO-OP>:DataStructures.StackAr@pop():105:topOfStack = topOfStack - 1 |==> <NO-OP>
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m47.dtrace.gz
Loaded invs from previous step: 599
                                                                               [7:45:53 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m47-objects.xml
Total loaded objects: 2843
[7:45:54 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:55 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:56 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:57 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:58 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:45:59 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:00 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:01 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:02 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:03 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:04 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:05 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:06 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:07 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:08 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:09 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:10 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:11 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:12 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:13 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:14 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:15 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:16 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:17 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:18 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:19 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:20 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:21 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:22 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:23 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:24 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:25 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:26 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:27 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:28 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:30 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:31 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:33 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:35 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:36 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:37 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:38 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:39 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:43 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:44 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:45 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:46 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:47 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:48 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:52 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:53 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:54 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:55 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:56 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:57 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:46:59 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 59 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 40 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 12,841 errors found in 1,843,390 samples (0.70%)
StackArTesterDriver.inv.gz: 212 false positives, out of 7020, which is 3.02%.
Preserving 97 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 599
Saving - Total: 599
Saving mutants results file

- Mutation is: 50:STD:<ASSIGN>:<NO-OP>:DataStructures.StackAr@push(java.lang.Object):119:theArray[++topOfStack] = x |==> <NO-OP>
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m50.dtrace.gz
Loaded invs from previous step: 599
                                                                               [7:47:01 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m50-objects.xml
Total loaded objects: 2521
[7:47:02 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:03 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:05 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:10 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:14 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:15 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:16 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:17 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:18 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:19 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:20 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:21 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:22 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:23 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:24 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:25 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:26 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:27 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:28 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:30 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:31 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:33 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:35 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:37 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:38 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:39 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:41 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:43 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:44 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:45 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:46 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:47 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:48 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:52 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 121 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 102 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 60,280 errors found in 1,479,450 samples (4.07%)
StackArTesterDriver.inv.gz: 258 false positives, out of 5445, which is 4.74%.
Preserving 123 new invariants to file /specfuzzer/invs_file.xml
                                                                               Already preserved invariants: 599
Saving - Total: 678
Saving mutants results file

- Mutation is: 7:ROR:==(int,int):<=(int,int):DataStructures.StackAr@isEmpty():55:topOfStack == -1 |==> topOfStack <= -1
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m7.dtrace.gz
Loaded invs from previous step: 678
                                                                               [7:47:56 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m7-objects.xml
Total loaded objects: 2843
[7:47:57 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:58 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:47:59 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:01 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:04 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:07 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:08 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:09 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:11 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:12 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:16 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:17 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:22 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:23 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:25 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:26 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:27 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:30 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:31 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:33 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:36 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:37 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:38 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:39 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:41 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:43 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:44 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:45 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:46 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:47 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:52 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:53 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:54 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:55 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:56 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:57 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:48:58 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:00 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:01 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:02 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 63 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 44 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 1,837,216 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 7020, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 678
Saving - Total: 678
Saving mutants results file

- Mutation is: 8:ROR:==(int,int):>=(int,int):DataStructures.StackAr@isEmpty():55:topOfStack == -1 |==> topOfStack >= -1
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m8.dtrace.gz
Loaded invs from previous step: 678
                                                                               [7:49:05 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m8-objects.xml
Total loaded objects: 2521
[7:49:06 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:07 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:08 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:09 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:10 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:11 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:12 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:13 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:14 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:15 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:16 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:17 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:18 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:19 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:20 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:22 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:23 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:24 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:25 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:26 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:27 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:28 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:30 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:31 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:33 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:35 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:36 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:37 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:38 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:39 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:41 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:42 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:43 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:44 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:45 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:46 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:47 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:48 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:52 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:53 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:54 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:55 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:56 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:57 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:49:58 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 121 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 102 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.push(java.lang.Object) : 9 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 1,481,706 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 5453, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 678
Saving - Total: 678
Saving mutants results file

- Mutation is: 9:ROR:==(int,int):FALSE(int,int):DataStructures.StackAr@isEmpty():55:topOfStack == -1 |==> false
Checking invs on mutant: experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m9.dtrace.gz
Loaded invs from previous step: 678
                                                                               [7:50:01 PM]:                                                                  Loaded objects from file: /specfuzzer/experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m9-objects.xml
Total loaded objects: 2617
[7:50:02 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:03 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:04 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:05 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:06 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:07 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:08 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:09 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:10 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:11 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:12 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:13 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:14 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:15 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:16 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:17 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:18 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:19 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:20 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:21 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:22 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:23 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:24 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:25 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:26 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:27 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:28 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:29 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:30 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:31 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:32 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:33 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:34 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:35 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:36 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:37 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:38 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:39 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:40 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:41 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:43 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:44 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:45 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:46 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:47 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:48 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:49 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:50 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:51 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:52 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:53 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:54 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:55 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:56 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:57 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:58 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:50:59 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester[7:51:00 PM]: Reading experiments/StackAr_top/setup-files/mutants/StackArTester
No return from procedure observed 113 times.  Unmatched entries are ignored!
Unterminated calls:
  DataStructures.StackAr.pop() : 31 invocations
  DataStructures.StackAr.StackAr(int) : 10 invocations
  DataStructures.StackAr.top() : 67 invocations
  DataStructures.StackAr.push(java.lang.Object) : 5 invocations
End of report for procedures not returned from.  Unmatched entries are ignored!

StackArTesterDriver.inv.gz: 0 errors found in 1,665,447 samples (0.00%)
StackArTesterDriver.inv.gz: 0 false positives, out of 7004, which is 0.00%.
Preserving 0 new invariants to file /specfuzzer/invs_file.xml
Already preserved invariants: 678
Saving - Total: 678
Saving mutants results file

# Filtering step took minutes: 27
# Mutation killing ability results saved in: experiments/StackAr_top/output/StackAr-top-specfuzzer-1-invs-by-mutants.csv

# Writing assertions to file: experiments/StackAr_top/output/StackAr-top-specfuzzer-1.assertions

# Filtering specs with buckets
> Mutant filter from file: experiments/StackAr_top/output/StackAr-top-specfuzzer-1-invs-by-mutants.csv
Unique mutants: 17
Loading assertions from: experiments/StackAr_top/output/StackAr-top-specfuzzer-1.assertions
Specs killing mutants: 7

> Minimizing by exploring the bit vector of each spec
Building bit vectors of size: 17
Building buckets
=====================================
Buckets: 5
Vector: [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
Mutants:
	experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m1.dtrace.gz
Specs:
	this.theArray != null l:  21  - Fails:  1517 Quality:  1517
Picked:
	this.theArray != null

Vector: [0. 1. 0. 0. 0. 0. 0. 1. 1. 1. 0. 0. 1. 1. 1. 1. 0.]
Mutants:
	experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
	experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m32.dtrace.gz
	experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
	experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m44.dtrace.gz
	experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m45.dtrace.gz
	experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m46.dtrace.gz
	experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m47.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack> l:  101  - Fails:  3042 Quality:  3043
	FuzzedInvariant ( Integer_Variable_0 != #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack> l:  102  - Fails:  2914 Quality:  2915
Picked:
	FuzzedInvariant ( Integer_Variable_0 < #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>

Vector: [0. 1. 0. 0. 0. 0. 0. 1. 0. 1. 0. 0. 0. 0. 0. 0. 0.]
Mutants:
	experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m2.dtrace.gz
	experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m4.dtrace.gz
Specs:
	this.topOfStack <= daikon.Quant.size(this.theArray)-1 l:  53  - Fails:  871 Quality:  871
Picked:
	this.topOfStack <= daikon.Quant.size(this.theArray)-1

Vector: [0. 0. 0. 0. 0. 0. 0. 1. 1. 0. 0. 0. 1. 1. 1. 1. 0.]
Mutants:
	experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m3.dtrace.gz
	experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m32.dtrace.gz
	experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m44.dtrace.gz
	experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m45.dtrace.gz
	experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m46.dtrace.gz
	experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m47.dtrace.gz
Specs:
	FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack> l:  102  - Fails:  451 Quality:  452
Picked:
	FuzzedInvariant ( Integer_Variable_0 <= #(StackAr.theArray) ) holds for: <orig(this), this.topOfStack>

Vector: [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 1.]
Mutants:
	experiments/StackAr_top/setup-files/mutants/StackArTesterDriver-m50.dtrace.gz
Specs:
	daikon.Quant.memberOf(\old(x) , this.theArray ) l:  47  - Fails:  510 Quality:  510
	daikon.Quant.memberOf(\old(x.getClass().getName()) , daikon.Quant.typeArray(this.theArray) ) l:  92  - Fails:  510 Quality:  510
Picked:
	daikon.Quant.memberOf(\old(x) , this.theArray )

daikon.Quant.memberOf(\old(x) , this.theArray )
Buckets: 5
Specs: 4
Saved in file: experiments/StackAr_top/output/StackAr-top-specfuzzer-1-buckets.assertions

